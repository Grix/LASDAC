
lasdac_mainfirmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003edc  00400000  00400000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000008fc  20000000  00403edc  00010000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000001b4  200008fc  004047d8  000108fc  2**2
                  ALLOC
  3 .stack        00003000  20000ab0  0040498c  000108fc  2**0
                  ALLOC
  4 .ARM.attributes 0000002a  00000000  00000000  000108fc  2**0
                  CONTENTS, READONLY
  5 .comment      0000005b  00000000  00000000  00010926  2**0
                  CONTENTS, READONLY
  6 .debug_info   0000e3bd  00000000  00000000  00010981  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002729  00000000  00000000  0001ed3e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_aranges 00000978  00000000  00000000  00021467  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_macro  0001393c  00000000  00000000  00021ddf  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   0000d267  00000000  00000000  0003571b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00051e7f  00000000  00000000  00042982  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00005b41  00000000  00000000  00094801  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000948  00000000  00000000  0009a342  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  000017dc  00000000  00000000  0009ac8c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <_sfixed>:
  400000:	20003ab0 	.word	0x20003ab0
  400004:	00402bdd 	.word	0x00402bdd
  400008:	00402bd9 	.word	0x00402bd9
  40000c:	00402bd9 	.word	0x00402bd9
  400010:	00402bd9 	.word	0x00402bd9
  400014:	00402bd9 	.word	0x00402bd9
  400018:	00402bd9 	.word	0x00402bd9
	...
  40002c:	00402bd9 	.word	0x00402bd9
  400030:	00402bd9 	.word	0x00402bd9
  400034:	00000000 	.word	0x00000000
  400038:	00402bd9 	.word	0x00402bd9
  40003c:	00403149 	.word	0x00403149
  400040:	00402bd9 	.word	0x00402bd9
  400044:	00402bd9 	.word	0x00402bd9
  400048:	00402bd9 	.word	0x00402bd9
  40004c:	00402bd9 	.word	0x00402bd9
  400050:	00402bd9 	.word	0x00402bd9
  400054:	00402bd9 	.word	0x00402bd9
  400058:	00402bd9 	.word	0x00402bd9
  40005c:	00000000 	.word	0x00000000
  400060:	00402bd9 	.word	0x00402bd9
  400064:	00402bd9 	.word	0x00402bd9
  400068:	00000000 	.word	0x00000000
  40006c:	00400881 	.word	0x00400881
  400070:	00400895 	.word	0x00400895
  400074:	00000000 	.word	0x00000000
  400078:	00402bd9 	.word	0x00402bd9
  40007c:	00402bd9 	.word	0x00402bd9
	...
  400088:	00402bd9 	.word	0x00402bd9
  40008c:	00402bd9 	.word	0x00402bd9
  400090:	00402bd9 	.word	0x00402bd9
  400094:	00402bd9 	.word	0x00402bd9
  400098:	00402bd9 	.word	0x00402bd9
  40009c:	00402bd9 	.word	0x00402bd9
  4000a0:	00402bd9 	.word	0x00402bd9
  4000a4:	00402bd9 	.word	0x00402bd9
	...
  4000b4:	00402bd9 	.word	0x00402bd9
  4000b8:	00402bd9 	.word	0x00402bd9
  4000bc:	00402bd9 	.word	0x00402bd9
  4000c0:	00402bd9 	.word	0x00402bd9
  4000c4:	00402bd9 	.word	0x00402bd9
  4000c8:	00401029 	.word	0x00401029

004000cc <__do_global_dtors_aux>:
  4000cc:	b510      	push	{r4, lr}
  4000ce:	4c05      	ldr	r4, [pc, #20]	; (4000e4 <__do_global_dtors_aux+0x18>)
  4000d0:	7823      	ldrb	r3, [r4, #0]
  4000d2:	b933      	cbnz	r3, 4000e2 <__do_global_dtors_aux+0x16>
  4000d4:	4b04      	ldr	r3, [pc, #16]	; (4000e8 <__do_global_dtors_aux+0x1c>)
  4000d6:	b113      	cbz	r3, 4000de <__do_global_dtors_aux+0x12>
  4000d8:	4804      	ldr	r0, [pc, #16]	; (4000ec <__do_global_dtors_aux+0x20>)
  4000da:	f3af 8000 	nop.w
  4000de:	2301      	movs	r3, #1
  4000e0:	7023      	strb	r3, [r4, #0]
  4000e2:	bd10      	pop	{r4, pc}
  4000e4:	200008fc 	.word	0x200008fc
  4000e8:	00000000 	.word	0x00000000
  4000ec:	00403edc 	.word	0x00403edc

004000f0 <frame_dummy>:
  4000f0:	4b08      	ldr	r3, [pc, #32]	; (400114 <frame_dummy+0x24>)
  4000f2:	b510      	push	{r4, lr}
  4000f4:	b11b      	cbz	r3, 4000fe <frame_dummy+0xe>
  4000f6:	4808      	ldr	r0, [pc, #32]	; (400118 <frame_dummy+0x28>)
  4000f8:	4908      	ldr	r1, [pc, #32]	; (40011c <frame_dummy+0x2c>)
  4000fa:	f3af 8000 	nop.w
  4000fe:	4808      	ldr	r0, [pc, #32]	; (400120 <frame_dummy+0x30>)
  400100:	6803      	ldr	r3, [r0, #0]
  400102:	b903      	cbnz	r3, 400106 <frame_dummy+0x16>
  400104:	bd10      	pop	{r4, pc}
  400106:	4b07      	ldr	r3, [pc, #28]	; (400124 <frame_dummy+0x34>)
  400108:	2b00      	cmp	r3, #0
  40010a:	d0fb      	beq.n	400104 <frame_dummy+0x14>
  40010c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  400110:	4718      	bx	r3
  400112:	bf00      	nop
  400114:	00000000 	.word	0x00000000
  400118:	00403edc 	.word	0x00403edc
  40011c:	20000900 	.word	0x20000900
  400120:	00403edc 	.word	0x00403edc
  400124:	00000000 	.word	0x00000000

00400128 <udi_vendor_setup>:
				&& (0 != udd_g_ctrlreq.req.wLength)) {
			return UDI_VENDOR_SETUP_OUT_RECEIVED();
		}
	}
	return false; // Not supported request
}
  400128:	2000      	movs	r0, #0
  40012a:	4770      	bx	lr

0040012c <udi_vendor_getsetting>:

uint8_t udi_vendor_getsetting(void)
{
	return udi_vendor_alternate_setting;
}
  40012c:	4b01      	ldr	r3, [pc, #4]	; (400134 <udi_vendor_getsetting+0x8>)
  40012e:	7818      	ldrb	r0, [r3, #0]
  400130:	4770      	bx	lr
  400132:	bf00      	nop
  400134:	20000918 	.word	0x20000918

00400138 <udi_vendor_enable>:
/**
 * \name Internal routines
 */
//@{
bool udi_vendor_enable(void)
{
  400138:	b508      	push	{r3, lr}
	udi_vendor_alternate_setting = udc_get_interface_desc()->bAlternateSetting;
  40013a:	4b07      	ldr	r3, [pc, #28]	; (400158 <udi_vendor_enable+0x20>)
  40013c:	4798      	blx	r3
  40013e:	78c3      	ldrb	r3, [r0, #3]
  400140:	4a06      	ldr	r2, [pc, #24]	; (40015c <udi_vendor_enable+0x24>)
  400142:	7013      	strb	r3, [r2, #0]
	if (1 == udi_vendor_alternate_setting) {
  400144:	2b01      	cmp	r3, #1
  400146:	d105      	bne.n	400154 <udi_vendor_enable+0x1c>
		// Call application callback
		// to notify that interface is enabled
		if (!UDI_VENDOR_ENABLE_EXT()) {
  400148:	4b05      	ldr	r3, [pc, #20]	; (400160 <udi_vendor_enable+0x28>)
  40014a:	4798      	blx	r3
  40014c:	3000      	adds	r0, #0
  40014e:	bf18      	it	ne
  400150:	2001      	movne	r0, #1
  400152:	bd08      	pop	{r3, pc}
			return false;
		}
	}
	return true;
  400154:	2001      	movs	r0, #1
}
  400156:	bd08      	pop	{r3, pc}
  400158:	0040033d 	.word	0x0040033d
  40015c:	20000918 	.word	0x20000918
  400160:	00403235 	.word	0x00403235

00400164 <udi_vendor_disable>:


void udi_vendor_disable(void)
{
  400164:	b508      	push	{r3, lr}
	if (1 == udi_vendor_alternate_setting) {
  400166:	4b03      	ldr	r3, [pc, #12]	; (400174 <udi_vendor_disable+0x10>)
  400168:	781b      	ldrb	r3, [r3, #0]
  40016a:	2b01      	cmp	r3, #1
  40016c:	d101      	bne.n	400172 <udi_vendor_disable+0xe>
		UDI_VENDOR_DISABLE_EXT();
  40016e:	4b02      	ldr	r3, [pc, #8]	; (400178 <udi_vendor_disable+0x14>)
  400170:	4798      	blx	r3
  400172:	bd08      	pop	{r3, pc}
  400174:	20000918 	.word	0x20000918
  400178:	004032d5 	.word	0x004032d5

0040017c <udi_vendor_interrupt_out_run>:
 *
 * \return \c 1 if function was successfully done, otherwise \c 0.
 */
bool udi_vendor_interrupt_out_run(uint8_t * buf, iram_size_t buf_size,
		udd_callback_trans_t callback)
{
  40017c:	b510      	push	{r4, lr}
  40017e:	b082      	sub	sp, #8
  400180:	4604      	mov	r4, r0
  400182:	460b      	mov	r3, r1
	return udd_ep_run(UDI_VENDOR_EP_INTERRUPT_OUT,
  400184:	9200      	str	r2, [sp, #0]
  400186:	2006      	movs	r0, #6
  400188:	2100      	movs	r1, #0
  40018a:	4622      	mov	r2, r4
  40018c:	4c01      	ldr	r4, [pc, #4]	; (400194 <udi_vendor_interrupt_out_run+0x18>)
  40018e:	47a0      	blx	r4
			false,
			buf,
			buf_size,
			callback);
}
  400190:	b002      	add	sp, #8
  400192:	bd10      	pop	{r4, pc}
  400194:	00402035 	.word	0x00402035

00400198 <udi_vendor_bulk_out_run>:
 *
 * \return \c 1 if function was successfully done, otherwise \c 0.
 */
bool udi_vendor_bulk_out_run(uint8_t * buf, iram_size_t buf_size,
		udd_callback_trans_t callback)
{
  400198:	b510      	push	{r4, lr}
  40019a:	b082      	sub	sp, #8
  40019c:	4604      	mov	r4, r0
  40019e:	460b      	mov	r3, r1
	return udd_ep_run(UDI_VENDOR_EP_BULK_OUT,
  4001a0:	9200      	str	r2, [sp, #0]
  4001a2:	2002      	movs	r0, #2
  4001a4:	2100      	movs	r1, #0
  4001a6:	4622      	mov	r2, r4
  4001a8:	4c01      	ldr	r4, [pc, #4]	; (4001b0 <udi_vendor_bulk_out_run+0x18>)
  4001aa:	47a0      	blx	r4
			false,
			buf,
			buf_size,
			callback);
}
  4001ac:	b002      	add	sp, #8
  4001ae:	bd10      	pop	{r4, pc}
  4001b0:	00402035 	.word	0x00402035

004001b4 <udc_next_desc_in_iface>:
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
			udc_ptr_conf->desc +
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
  4001b4:	4b0f      	ldr	r3, [pc, #60]	; (4001f4 <udc_next_desc_in_iface+0x40>)
  4001b6:	681b      	ldr	r3, [r3, #0]
  4001b8:	681a      	ldr	r2, [r3, #0]
 *
 * \return address after the last byte of USB Configuration descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
  4001ba:	8853      	ldrh	r3, [r2, #2]
  4001bc:	441a      	add	r2, r3
{
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_eof_desc;

	ptr_eof_desc = udc_get_eof_conf();
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
  4001be:	7803      	ldrb	r3, [r0, #0]
  4001c0:	4418      	add	r0, r3
			desc->bLength);
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
  4001c2:	4290      	cmp	r0, r2
  4001c4:	d210      	bcs.n	4001e8 <udc_next_desc_in_iface+0x34>
		// If new interface descriptor is found,
		// then it is the end of the current global interface descriptor
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
  4001c6:	7843      	ldrb	r3, [r0, #1]
  4001c8:	2b04      	cmp	r3, #4
  4001ca:	d00f      	beq.n	4001ec <udc_next_desc_in_iface+0x38>
			break; // End of global interface descriptor
		}
		if (desc_id == desc->bDescriptorType) {
  4001cc:	428b      	cmp	r3, r1
  4001ce:	d105      	bne.n	4001dc <udc_next_desc_in_iface+0x28>
  4001d0:	4770      	bx	lr
			desc->bLength);
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
		// If new interface descriptor is found,
		// then it is the end of the current global interface descriptor
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
  4001d2:	7843      	ldrb	r3, [r0, #1]
  4001d4:	2b04      	cmp	r3, #4
  4001d6:	d00b      	beq.n	4001f0 <udc_next_desc_in_iface+0x3c>
			break; // End of global interface descriptor
		}
		if (desc_id == desc->bDescriptorType) {
  4001d8:	428b      	cmp	r3, r1
  4001da:	d00a      	beq.n	4001f2 <udc_next_desc_in_iface+0x3e>
			return desc; // Specific descriptor found
		}
		// Go to next descriptor
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
  4001dc:	7803      	ldrb	r3, [r0, #0]
  4001de:	4418      	add	r0, r3
	ptr_eof_desc = udc_get_eof_conf();
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
			desc->bLength);
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
  4001e0:	4290      	cmp	r0, r2
  4001e2:	d3f6      	bcc.n	4001d2 <udc_next_desc_in_iface+0x1e>
		}
		// Go to next descriptor
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
				desc->bLength);
	}
	return NULL; // No specific descriptor found
  4001e4:	2000      	movs	r0, #0
  4001e6:	4770      	bx	lr
  4001e8:	2000      	movs	r0, #0
  4001ea:	4770      	bx	lr
  4001ec:	2000      	movs	r0, #0
  4001ee:	4770      	bx	lr
  4001f0:	2000      	movs	r0, #0
}
  4001f2:	4770      	bx	lr
  4001f4:	2000091c 	.word	0x2000091c

004001f8 <udc_valid_address>:
/**
 * \brief Change the address of device
 * Callback called at the end of request set address
 */
static void udc_valid_address(void)
{
  4001f8:	b508      	push	{r3, lr}
	udd_set_address(udd_g_ctrlreq.req.wValue & 0x7F);
  4001fa:	4b03      	ldr	r3, [pc, #12]	; (400208 <udc_valid_address+0x10>)
  4001fc:	7898      	ldrb	r0, [r3, #2]
  4001fe:	f000 007f 	and.w	r0, r0, #127	; 0x7f
  400202:	4b02      	ldr	r3, [pc, #8]	; (40020c <udc_valid_address+0x14>)
  400204:	4798      	blx	r3
  400206:	bd08      	pop	{r3, pc}
  400208:	20000a80 	.word	0x20000a80
  40020c:	00401c49 	.word	0x00401c49

00400210 <udc_update_iface_desc>:
 */
static bool udc_update_iface_desc(uint8_t iface_num, uint8_t setting_num)
{
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_end_desc;

	if (0 == udc_num_configuration) {
  400210:	4b16      	ldr	r3, [pc, #88]	; (40026c <udc_update_iface_desc+0x5c>)
  400212:	781b      	ldrb	r3, [r3, #0]
  400214:	b30b      	cbz	r3, 40025a <udc_update_iface_desc+0x4a>
		return false;
	}

	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
  400216:	4b16      	ldr	r3, [pc, #88]	; (400270 <udc_update_iface_desc+0x60>)
  400218:	681b      	ldr	r3, [r3, #0]
  40021a:	681b      	ldr	r3, [r3, #0]
  40021c:	791a      	ldrb	r2, [r3, #4]
  40021e:	4282      	cmp	r2, r0
  400220:	d91d      	bls.n	40025e <udc_update_iface_desc+0x4e>
 * \param setting_num   Setting number of interface to find
 *
 * \return 1 if found or 0 if not found
 */
static bool udc_update_iface_desc(uint8_t iface_num, uint8_t setting_num)
{
  400222:	b410      	push	{r4}
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
		return false;
	}

	// Start at the beginning of configuration descriptor
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
  400224:	4a13      	ldr	r2, [pc, #76]	; (400274 <udc_update_iface_desc+0x64>)
  400226:	6013      	str	r3, [r2, #0]
 *
 * \return address after the last byte of USB Configuration descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
  400228:	885c      	ldrh	r4, [r3, #2]
  40022a:	441c      	add	r4, r3
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
			udc_ptr_conf->desc;

	// Check the end of configuration descriptor
	ptr_end_desc = udc_get_eof_conf();
	while (ptr_end_desc >
  40022c:	42a3      	cmp	r3, r4
  40022e:	d218      	bcs.n	400262 <udc_update_iface_desc+0x52>
			(UDC_DESC_STORAGE usb_conf_desc_t *) udc_ptr_iface) {
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
  400230:	785a      	ldrb	r2, [r3, #1]
  400232:	2a04      	cmp	r2, #4
  400234:	d109      	bne.n	40024a <udc_update_iface_desc+0x3a>
			// A interface descriptor is found
			// Check interface and alternate setting number
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
  400236:	789a      	ldrb	r2, [r3, #2]
  400238:	4282      	cmp	r2, r0
  40023a:	d106      	bne.n	40024a <udc_update_iface_desc+0x3a>
  40023c:	78da      	ldrb	r2, [r3, #3]
  40023e:	428a      	cmp	r2, r1
  400240:	d103      	bne.n	40024a <udc_update_iface_desc+0x3a>
  400242:	4a0c      	ldr	r2, [pc, #48]	; (400274 <udc_update_iface_desc+0x64>)
  400244:	6013      	str	r3, [r2, #0]
					(setting_num ==
					udc_ptr_iface->bAlternateSetting)) {
				return true; // Interface found
  400246:	2001      	movs	r0, #1
  400248:	e00c      	b.n	400264 <udc_update_iface_desc+0x54>
			}
		}
		// Go to next descriptor
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
  40024a:	781a      	ldrb	r2, [r3, #0]
  40024c:	4413      	add	r3, r2
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
			udc_ptr_conf->desc;

	// Check the end of configuration descriptor
	ptr_end_desc = udc_get_eof_conf();
	while (ptr_end_desc >
  40024e:	42a3      	cmp	r3, r4
  400250:	d3ee      	bcc.n	400230 <udc_update_iface_desc+0x20>
  400252:	4a08      	ldr	r2, [pc, #32]	; (400274 <udc_update_iface_desc+0x64>)
  400254:	6013      	str	r3, [r2, #0]
		// Go to next descriptor
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
				(uint8_t *) udc_ptr_iface +
				udc_ptr_iface->bLength);
	}
	return false; // Interface not found
  400256:	2000      	movs	r0, #0
  400258:	e004      	b.n	400264 <udc_update_iface_desc+0x54>
static bool udc_update_iface_desc(uint8_t iface_num, uint8_t setting_num)
{
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_end_desc;

	if (0 == udc_num_configuration) {
		return false;
  40025a:	2000      	movs	r0, #0
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
				(uint8_t *) udc_ptr_iface +
				udc_ptr_iface->bLength);
	}
	return false; // Interface not found
}
  40025c:	4770      	bx	lr
	if (0 == udc_num_configuration) {
		return false;
	}

	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
		return false;
  40025e:	2000      	movs	r0, #0
  400260:	4770      	bx	lr
		// Go to next descriptor
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
				(uint8_t *) udc_ptr_iface +
				udc_ptr_iface->bLength);
	}
	return false; // Interface not found
  400262:	2000      	movs	r0, #0
}
  400264:	f85d 4b04 	ldr.w	r4, [sp], #4
  400268:	4770      	bx	lr
  40026a:	bf00      	nop
  40026c:	20000928 	.word	0x20000928
  400270:	2000091c 	.word	0x2000091c
  400274:	2000092c 	.word	0x2000092c

00400278 <udc_iface_disable>:
 * \param iface_num     Interface number to disable
 *
 * \return 1 if it is done or 0 if interface is not found
 */
static bool udc_iface_disable(uint8_t iface_num)
{
  400278:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  40027c:	4604      	mov	r4, r0
	udi_api_t UDC_DESC_STORAGE *udi_api;

	// Select first alternate setting of the interface
	// to update udc_ptr_iface before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
  40027e:	2100      	movs	r1, #0
  400280:	4b12      	ldr	r3, [pc, #72]	; (4002cc <udc_iface_disable+0x54>)
  400282:	4798      	blx	r3
  400284:	4680      	mov	r8, r0
  400286:	b1e8      	cbz	r0, 4002c4 <udc_iface_disable+0x4c>
		return false;
	}

	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
  400288:	4b11      	ldr	r3, [pc, #68]	; (4002d0 <udc_iface_disable+0x58>)
  40028a:	681b      	ldr	r3, [r3, #0]
  40028c:	685b      	ldr	r3, [r3, #4]
  40028e:	f853 9024 	ldr.w	r9, [r3, r4, lsl #2]

#if (0!=USB_DEVICE_MAX_EP)
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
  400292:	f8d9 300c 	ldr.w	r3, [r9, #12]
  400296:	4798      	blx	r3
  400298:	4601      	mov	r1, r0
  40029a:	4620      	mov	r0, r4
  40029c:	4b0b      	ldr	r3, [pc, #44]	; (4002cc <udc_iface_disable+0x54>)
  40029e:	4798      	blx	r3
  4002a0:	4680      	mov	r8, r0
  4002a2:	b178      	cbz	r0, 4002c4 <udc_iface_disable+0x4c>
	}

	// Start at the beginning of interface descriptor
	{
		usb_ep_desc_t UDC_DESC_STORAGE *ep_desc;
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
  4002a4:	4b0b      	ldr	r3, [pc, #44]	; (4002d4 <udc_iface_disable+0x5c>)
  4002a6:	681c      	ldr	r4, [r3, #0]
		while (1) {
			// Search Endpoint descriptor included in global interface descriptor
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
  4002a8:	2605      	movs	r6, #5
  4002aa:	4d0b      	ldr	r5, [pc, #44]	; (4002d8 <udc_iface_disable+0x60>)
					ep_desc, USB_DT_ENDPOINT);
			if (NULL == ep_desc) {
				break;
			}
			// Free the endpoint used by the interface
			udd_ep_free(ep_desc->bEndpointAddress);
  4002ac:	4f0b      	ldr	r7, [pc, #44]	; (4002dc <udc_iface_disable+0x64>)
	{
		usb_ep_desc_t UDC_DESC_STORAGE *ep_desc;
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
		while (1) {
			// Search Endpoint descriptor included in global interface descriptor
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
  4002ae:	4620      	mov	r0, r4
  4002b0:	4631      	mov	r1, r6
  4002b2:	47a8      	blx	r5
					udc_next_desc_in_iface((UDC_DESC_STORAGE
					usb_conf_desc_t *)
					ep_desc, USB_DT_ENDPOINT);
			if (NULL == ep_desc) {
  4002b4:	4604      	mov	r4, r0
  4002b6:	b110      	cbz	r0, 4002be <udc_iface_disable+0x46>
				break;
			}
			// Free the endpoint used by the interface
			udd_ep_free(ep_desc->bEndpointAddress);
  4002b8:	7880      	ldrb	r0, [r0, #2]
  4002ba:	47b8      	blx	r7
		}
  4002bc:	e7f7      	b.n	4002ae <udc_iface_disable+0x36>
	}
#endif

	// Disable interface
	udi_api->disable();
  4002be:	f8d9 3004 	ldr.w	r3, [r9, #4]
  4002c2:	4798      	blx	r3
	return true;
}
  4002c4:	4640      	mov	r0, r8
  4002c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4002ca:	bf00      	nop
  4002cc:	00400211 	.word	0x00400211
  4002d0:	2000091c 	.word	0x2000091c
  4002d4:	2000092c 	.word	0x2000092c
  4002d8:	004001b5 	.word	0x004001b5
  4002dc:	00401db1 	.word	0x00401db1

004002e0 <udc_iface_enable>:
 * \param setting_num   Setting number to enable
 *
 * \return 1 if it is done or 0 if interface is not found
 */
static bool udc_iface_enable(uint8_t iface_num, uint8_t setting_num)
{
  4002e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4002e4:	4680      	mov	r8, r0
	// Select the interface descriptor
	if (!udc_update_iface_desc(iface_num, setting_num)) {
  4002e6:	4b10      	ldr	r3, [pc, #64]	; (400328 <udc_iface_enable+0x48>)
  4002e8:	4798      	blx	r3
  4002ea:	4603      	mov	r3, r0
  4002ec:	b1c8      	cbz	r0, 400322 <udc_iface_enable+0x42>

#if (0!=USB_DEVICE_MAX_EP)
	usb_ep_desc_t UDC_DESC_STORAGE *ep_desc;

	// Start at the beginning of the global interface descriptor
	ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
  4002ee:	4b0f      	ldr	r3, [pc, #60]	; (40032c <udc_iface_enable+0x4c>)
  4002f0:	681c      	ldr	r4, [r3, #0]
	while (1) {
		// Search Endpoint descriptor included in the global interface descriptor
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
  4002f2:	2605      	movs	r6, #5
  4002f4:	4d0e      	ldr	r5, [pc, #56]	; (400330 <udc_iface_enable+0x50>)
						usb_conf_desc_t *) ep_desc,
				USB_DT_ENDPOINT);
		if (NULL == ep_desc)
			break;
		// Alloc the endpoint used by the interface
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
  4002f6:	4f0f      	ldr	r7, [pc, #60]	; (400334 <udc_iface_enable+0x54>)

	// Start at the beginning of the global interface descriptor
	ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
	while (1) {
		// Search Endpoint descriptor included in the global interface descriptor
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
  4002f8:	4620      	mov	r0, r4
  4002fa:	4631      	mov	r1, r6
  4002fc:	47a8      	blx	r5
				udc_next_desc_in_iface((UDC_DESC_STORAGE
						usb_conf_desc_t *) ep_desc,
				USB_DT_ENDPOINT);
		if (NULL == ep_desc)
  4002fe:	4604      	mov	r4, r0
  400300:	b138      	cbz	r0, 400312 <udc_iface_enable+0x32>
			break;
		// Alloc the endpoint used by the interface
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
  400302:	7880      	ldrb	r0, [r0, #2]
  400304:	78e1      	ldrb	r1, [r4, #3]
  400306:	88a2      	ldrh	r2, [r4, #4]
  400308:	47b8      	blx	r7
  40030a:	4603      	mov	r3, r0
  40030c:	2800      	cmp	r0, #0
  40030e:	d1f3      	bne.n	4002f8 <udc_iface_enable+0x18>
  400310:	e007      	b.n	400322 <udc_iface_enable+0x42>
			return false;
		}
	}
#endif
	// Enable the interface
	return udc_ptr_conf->udi_apis[iface_num]->enable();
  400312:	4b09      	ldr	r3, [pc, #36]	; (400338 <udc_iface_enable+0x58>)
  400314:	681b      	ldr	r3, [r3, #0]
  400316:	685b      	ldr	r3, [r3, #4]
  400318:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
  40031c:	681b      	ldr	r3, [r3, #0]
  40031e:	4798      	blx	r3
  400320:	4603      	mov	r3, r0
}
  400322:	4618      	mov	r0, r3
  400324:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400328:	00400211 	.word	0x00400211
  40032c:	2000092c 	.word	0x2000092c
  400330:	004001b5 	.word	0x004001b5
  400334:	00401ca9 	.word	0x00401ca9
  400338:	2000091c 	.word	0x2000091c

0040033c <udc_get_interface_desc>:
//! @}

usb_iface_desc_t UDC_DESC_STORAGE *udc_get_interface_desc(void)
{
	return udc_ptr_iface;
}
  40033c:	4b01      	ldr	r3, [pc, #4]	; (400344 <udc_get_interface_desc+0x8>)
  40033e:	6818      	ldr	r0, [r3, #0]
  400340:	4770      	bx	lr
  400342:	bf00      	nop
  400344:	2000092c 	.word	0x2000092c

00400348 <udc_start>:
}

/*! \brief Start the USB Device stack
 */
void udc_start(void)
{
  400348:	b508      	push	{r3, lr}
	udd_enable();
  40034a:	4b01      	ldr	r3, [pc, #4]	; (400350 <udc_start+0x8>)
  40034c:	4798      	blx	r3
  40034e:	bd08      	pop	{r3, pc}
  400350:	00401b85 	.word	0x00401b85

00400354 <udc_reset>:
/**
 * \brief Reset the current configuration of the USB device,
 * This routines can be called by UDD when a RESET on the USB line occurs.
 */
void udc_reset(void)
{
  400354:	b570      	push	{r4, r5, r6, lr}
	uint8_t iface_num;

	if (udc_num_configuration) {
  400356:	4b0d      	ldr	r3, [pc, #52]	; (40038c <udc_reset+0x38>)
  400358:	781b      	ldrb	r3, [r3, #0]
  40035a:	b183      	cbz	r3, 40037e <udc_reset+0x2a>
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
  40035c:	4b0c      	ldr	r3, [pc, #48]	; (400390 <udc_reset+0x3c>)
  40035e:	681b      	ldr	r3, [r3, #0]
  400360:	681b      	ldr	r3, [r3, #0]
void udc_reset(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
  400362:	791b      	ldrb	r3, [r3, #4]
  400364:	b15b      	cbz	r3, 40037e <udc_reset+0x2a>
  400366:	2400      	movs	r4, #0
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			udc_iface_disable(iface_num);
  400368:	4e0a      	ldr	r6, [pc, #40]	; (400394 <udc_reset+0x40>)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
  40036a:	4d09      	ldr	r5, [pc, #36]	; (400390 <udc_reset+0x3c>)
				iface_num++) {
			udc_iface_disable(iface_num);
  40036c:	4620      	mov	r0, r4
  40036e:	47b0      	blx	r6
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
  400370:	3401      	adds	r4, #1
  400372:	b2e4      	uxtb	r4, r4
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
  400374:	682b      	ldr	r3, [r5, #0]
  400376:	681b      	ldr	r3, [r3, #0]
void udc_reset(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
  400378:	791b      	ldrb	r3, [r3, #4]
  40037a:	42a3      	cmp	r3, r4
  40037c:	d8f6      	bhi.n	40036c <udc_reset+0x18>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			udc_iface_disable(iface_num);
		}
	}
	udc_num_configuration = 0;
  40037e:	2300      	movs	r3, #0
  400380:	4a02      	ldr	r2, [pc, #8]	; (40038c <udc_reset+0x38>)
  400382:	7013      	strb	r3, [r2, #0]
	if (CPU_TO_LE16(USB_DEV_STATUS_REMOTEWAKEUP) & udc_device_status) {
		// Remote wakeup is enabled then disable it
		UDC_REMOTEWAKEUP_DISABLE();
	}
#endif
	udc_device_status =
  400384:	4a04      	ldr	r2, [pc, #16]	; (400398 <udc_reset+0x44>)
  400386:	8013      	strh	r3, [r2, #0]
  400388:	bd70      	pop	{r4, r5, r6, pc}
  40038a:	bf00      	nop
  40038c:	20000928 	.word	0x20000928
  400390:	2000091c 	.word	0x2000091c
  400394:	00400279 	.word	0x00400279
  400398:	20000926 	.word	0x20000926

0040039c <udc_sof_notify>:
			CPU_TO_LE16(USB_DEV_STATUS_BUS_POWERED);
#endif
}

void udc_sof_notify(void)
{
  40039c:	b538      	push	{r3, r4, r5, lr}
	uint8_t iface_num;

	if (udc_num_configuration) {
  40039e:	4b0c      	ldr	r3, [pc, #48]	; (4003d0 <udc_sof_notify+0x34>)
  4003a0:	781b      	ldrb	r3, [r3, #0]
  4003a2:	b19b      	cbz	r3, 4003cc <udc_sof_notify+0x30>
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
  4003a4:	4b0b      	ldr	r3, [pc, #44]	; (4003d4 <udc_sof_notify+0x38>)
  4003a6:	681b      	ldr	r3, [r3, #0]
  4003a8:	681a      	ldr	r2, [r3, #0]
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
  4003aa:	7912      	ldrb	r2, [r2, #4]
  4003ac:	b172      	cbz	r2, 4003cc <udc_sof_notify+0x30>
  4003ae:	2400      	movs	r4, #0
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
  4003b0:	4d08      	ldr	r5, [pc, #32]	; (4003d4 <udc_sof_notify+0x38>)
				iface_num++) {
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
  4003b2:	685b      	ldr	r3, [r3, #4]
  4003b4:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
  4003b8:	691b      	ldr	r3, [r3, #16]
  4003ba:	b103      	cbz	r3, 4003be <udc_sof_notify+0x22>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
  4003bc:	4798      	blx	r3
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
  4003be:	3401      	adds	r4, #1
  4003c0:	b2e4      	uxtb	r4, r4
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
  4003c2:	682b      	ldr	r3, [r5, #0]
  4003c4:	681a      	ldr	r2, [r3, #0]
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
  4003c6:	7912      	ldrb	r2, [r2, #4]
  4003c8:	42a2      	cmp	r2, r4
  4003ca:	d8f2      	bhi.n	4003b2 <udc_sof_notify+0x16>
  4003cc:	bd38      	pop	{r3, r4, r5, pc}
  4003ce:	bf00      	nop
  4003d0:	20000928 	.word	0x20000928
  4003d4:	2000091c 	.word	0x2000091c

004003d8 <udc_process_setup>:
 * sent to a specific application callback.
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
  4003d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
  4003da:	4b81      	ldr	r3, [pc, #516]	; (4005e0 <udc_process_setup+0x208>)
  4003dc:	2200      	movs	r2, #0
  4003de:	819a      	strh	r2, [r3, #12]
	udd_g_ctrlreq.callback = NULL;
  4003e0:	611a      	str	r2, [r3, #16]
	udd_g_ctrlreq.over_under_run = NULL;
  4003e2:	615a      	str	r2, [r3, #20]

	if (Udd_setup_is_in()) {
  4003e4:	781b      	ldrb	r3, [r3, #0]
  4003e6:	f013 0f80 	tst.w	r3, #128	; 0x80
  4003ea:	f000 81f0 	beq.w	4007ce <udc_process_setup+0x3f6>
		if (udd_g_ctrlreq.req.wLength == 0) {
  4003ee:	4a7c      	ldr	r2, [pc, #496]	; (4005e0 <udc_process_setup+0x208>)
  4003f0:	88d2      	ldrh	r2, [r2, #6]
  4003f2:	2a00      	cmp	r2, #0
  4003f4:	f040 81e7 	bne.w	4007c6 <udc_process_setup+0x3ee>
  4003f8:	e1e1      	b.n	4007be <udc_process_setup+0x3e6>
		// GET Standard Requests
		if (udd_g_ctrlreq.req.wLength == 0) {
			return false; // Error for USB host
		}

		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
  4003fa:	f013 031f 	ands.w	r3, r3, #31
  4003fe:	f040 8082 	bne.w	400506 <udc_process_setup+0x12e>
			// Standard Get Device request
			switch (udd_g_ctrlreq.req.bRequest) {
  400402:	4977      	ldr	r1, [pc, #476]	; (4005e0 <udc_process_setup+0x208>)
  400404:	7849      	ldrb	r1, [r1, #1]
  400406:	2906      	cmp	r1, #6
  400408:	d00b      	beq.n	400422 <udc_process_setup+0x4a>
  40040a:	2908      	cmp	r1, #8
  40040c:	d073      	beq.n	4004f6 <udc_process_setup+0x11e>
  40040e:	2900      	cmp	r1, #0
  400410:	d179      	bne.n	400506 <udc_process_setup+0x12e>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_status(void)
{
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
  400412:	2a02      	cmp	r2, #2
  400414:	f040 8183 	bne.w	40071e <udc_process_setup+0x346>
		return false;
	}

	udd_set_setup_payload( (uint8_t *) & udc_device_status,
  400418:	4872      	ldr	r0, [pc, #456]	; (4005e4 <udc_process_setup+0x20c>)
  40041a:	2102      	movs	r1, #2
  40041c:	4b72      	ldr	r3, [pc, #456]	; (4005e8 <udc_process_setup+0x210>)
  40041e:	4798      	blx	r3
  400420:	e1dc      	b.n	4007dc <udc_process_setup+0x404>
 */
static bool udc_req_std_dev_get_descriptor(void)
{
	uint8_t conf_num;

	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
  400422:	4b6f      	ldr	r3, [pc, #444]	; (4005e0 <udc_process_setup+0x208>)
  400424:	885a      	ldrh	r2, [r3, #2]

	// Check descriptor ID
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
  400426:	0a13      	lsrs	r3, r2, #8
  400428:	3b01      	subs	r3, #1
  40042a:	2b0e      	cmp	r3, #14
  40042c:	f200 816e 	bhi.w	40070c <udc_process_setup+0x334>
  400430:	e8df f013 	tbh	[pc, r3, lsl #1]
  400434:	0016000f 	.word	0x0016000f
  400438:	016c0034 	.word	0x016c0034
  40043c:	016c016c 	.word	0x016c016c
  400440:	016c016c 	.word	0x016c016c
  400444:	016c016c 	.word	0x016c016c
  400448:	016c016c 	.word	0x016c016c
  40044c:	016c016c 	.word	0x016c016c
  400450:	002a      	.short	0x002a
		} else
#endif
		{
			udd_set_setup_payload(
				(uint8_t *) udc_config.confdev_lsfs,
				udc_config.confdev_lsfs->bLength);
  400452:	4b66      	ldr	r3, [pc, #408]	; (4005ec <udc_process_setup+0x214>)
  400454:	681b      	ldr	r3, [r3, #0]
				(uint8_t *) udc_config.confdev_hs,
				udc_config.confdev_hs->bLength);
		} else
#endif
		{
			udd_set_setup_payload(
  400456:	4618      	mov	r0, r3
  400458:	7819      	ldrb	r1, [r3, #0]
  40045a:	4b63      	ldr	r3, [pc, #396]	; (4005e8 <udc_process_setup+0x210>)
  40045c:	4798      	blx	r3
  40045e:	e041      	b.n	4004e4 <udc_process_setup+0x10c>
 */
static bool udc_req_std_dev_get_descriptor(void)
{
	uint8_t conf_num;

	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
  400460:	b2d2      	uxtb	r2, r2
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
		} else
#endif
		{
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
  400462:	4b62      	ldr	r3, [pc, #392]	; (4005ec <udc_process_setup+0x214>)
  400464:	681b      	ldr	r3, [r3, #0]
  400466:	7c5b      	ldrb	r3, [r3, #17]
  400468:	4293      	cmp	r3, r2
  40046a:	f240 8158 	bls.w	40071e <udc_process_setup+0x346>
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
  40046e:	4b5f      	ldr	r3, [pc, #380]	; (4005ec <udc_process_setup+0x214>)
  400470:	685b      	ldr	r3, [r3, #4]
  400472:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
  400476:	4618      	mov	r0, r3
  400478:	8859      	ldrh	r1, [r3, #2]
  40047a:	4b5b      	ldr	r3, [pc, #364]	; (4005e8 <udc_process_setup+0x210>)
  40047c:	4798      	blx	r3
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
		}
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
  40047e:	4b58      	ldr	r3, [pc, #352]	; (4005e0 <udc_process_setup+0x208>)
  400480:	689b      	ldr	r3, [r3, #8]
  400482:	2202      	movs	r2, #2
  400484:	705a      	strb	r2, [r3, #1]
  400486:	e02d      	b.n	4004e4 <udc_process_setup+0x10c>
		break;
#endif

	case USB_DT_BOS:
		// Device BOS descriptor requested
		if (udc_config.conf_bos == NULL) {
  400488:	4b58      	ldr	r3, [pc, #352]	; (4005ec <udc_process_setup+0x214>)
  40048a:	689b      	ldr	r3, [r3, #8]
  40048c:	2b00      	cmp	r3, #0
  40048e:	f000 8146 	beq.w	40071e <udc_process_setup+0x346>
			return false;
		}
		udd_set_setup_payload( (uint8_t *) udc_config.conf_bos,
  400492:	4618      	mov	r0, r3
  400494:	8859      	ldrh	r1, [r3, #2]
  400496:	4b54      	ldr	r3, [pc, #336]	; (4005e8 <udc_process_setup+0x210>)
  400498:	4798      	blx	r3
  40049a:	e023      	b.n	4004e4 <udc_process_setup+0x10c>
	uint8_t i;
	const uint8_t *str;
	uint8_t str_length = 0;

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
  40049c:	b2d2      	uxtb	r2, r2
  40049e:	2a03      	cmp	r2, #3
  4004a0:	f200 813d 	bhi.w	40071e <udc_process_setup+0x346>
  4004a4:	e8df f012 	tbh	[pc, r2, lsl #1]
  4004a8:	000c0007 	.word	0x000c0007
  4004ac:	00040197 	.word	0x00040197
		str = udc_string_product_name;
		break;
#endif
#if defined USB_DEVICE_SERIAL_NAME || defined USB_DEVICE_GET_SERIAL_NAME_POINTER
	case 3:
		str_length = USB_DEVICE_SERIAL_NAME_SIZE;
  4004b0:	2205      	movs	r2, #5
		str = udc_get_string_serial_name();
  4004b2:	4b4f      	ldr	r3, [pc, #316]	; (4005f0 <udc_process_setup+0x218>)
  4004b4:	e006      	b.n	4004c4 <udc_process_setup+0xec>
	uint8_t str_length = 0;

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
	case 0:
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
  4004b6:	484f      	ldr	r0, [pc, #316]	; (4005f4 <udc_process_setup+0x21c>)
  4004b8:	2104      	movs	r1, #4
  4004ba:	4b4b      	ldr	r3, [pc, #300]	; (4005e8 <udc_process_setup+0x210>)
  4004bc:	4798      	blx	r3
  4004be:	e011      	b.n	4004e4 <udc_process_setup+0x10c>
		break;

#ifdef USB_DEVICE_MANUFACTURE_NAME
	case 1:
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
		str = udc_string_manufacturer_name;
  4004c0:	4b4d      	ldr	r3, [pc, #308]	; (4005f8 <udc_process_setup+0x220>)
				sizeof(udc_string_desc_languageid));
		break;

#ifdef USB_DEVICE_MANUFACTURE_NAME
	case 1:
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
  4004c2:	2203      	movs	r2, #3
  4004c4:	461c      	mov	r4, r3
  4004c6:	484d      	ldr	r0, [pc, #308]	; (4005fc <udc_process_setup+0x224>)
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
  4004c8:	f813 1b01 	ldrb.w	r1, [r3], #1
  4004cc:	f820 1f02 	strh.w	r1, [r0, #2]!
  4004d0:	1b19      	subs	r1, r3, r4
#endif
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
  4004d2:	b2c9      	uxtb	r1, r1
  4004d4:	4291      	cmp	r1, r2
  4004d6:	d3f7      	bcc.n	4004c8 <udc_process_setup+0xf0>
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
		}

		udc_string_desc.header.bLength = 2 + (str_length) * 2;
  4004d8:	0052      	lsls	r2, r2, #1
  4004da:	1c91      	adds	r1, r2, #2
  4004dc:	4847      	ldr	r0, [pc, #284]	; (4005fc <udc_process_setup+0x224>)
  4004de:	7001      	strb	r1, [r0, #0]
		udd_set_setup_payload(
  4004e0:	4b41      	ldr	r3, [pc, #260]	; (4005e8 <udc_process_setup+0x210>)
  4004e2:	4798      	blx	r3
	default:
		// Unknown descriptor requested
		return false;
	}
	// if the descriptor is larger than length requested, then reduce it
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
  4004e4:	4b3e      	ldr	r3, [pc, #248]	; (4005e0 <udc_process_setup+0x208>)
  4004e6:	88da      	ldrh	r2, [r3, #6]
  4004e8:	899b      	ldrh	r3, [r3, #12]
  4004ea:	4293      	cmp	r3, r2
  4004ec:	f240 8176 	bls.w	4007dc <udc_process_setup+0x404>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
  4004f0:	4b3b      	ldr	r3, [pc, #236]	; (4005e0 <udc_process_setup+0x208>)
  4004f2:	819a      	strh	r2, [r3, #12]
  4004f4:	e172      	b.n	4007dc <udc_process_setup+0x404>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_configuration(void)
{
	if (udd_g_ctrlreq.req.wLength != 1) {
  4004f6:	2a01      	cmp	r2, #1
  4004f8:	f040 8111 	bne.w	40071e <udc_process_setup+0x346>
		return false;
	}

	udd_set_setup_payload(&udc_num_configuration,1);
  4004fc:	4840      	ldr	r0, [pc, #256]	; (400600 <udc_process_setup+0x228>)
  4004fe:	2101      	movs	r1, #1
  400500:	4b39      	ldr	r3, [pc, #228]	; (4005e8 <udc_process_setup+0x210>)
  400502:	4798      	blx	r3
  400504:	e16a      	b.n	4007dc <udc_process_setup+0x404>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
  400506:	2b01      	cmp	r3, #1
  400508:	d127      	bne.n	40055a <udc_process_setup+0x182>
			// Standard Get Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
  40050a:	4935      	ldr	r1, [pc, #212]	; (4005e0 <udc_process_setup+0x208>)
  40050c:	7849      	ldrb	r1, [r1, #1]
  40050e:	290a      	cmp	r1, #10
  400510:	d123      	bne.n	40055a <udc_process_setup+0x182>
static bool udc_req_std_iface_get_setting(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (udd_g_ctrlreq.req.wLength != 1) {
  400512:	2a01      	cmp	r2, #1
  400514:	f040 8103 	bne.w	40071e <udc_process_setup+0x346>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
  400518:	4b39      	ldr	r3, [pc, #228]	; (400600 <udc_process_setup+0x228>)
  40051a:	781b      	ldrb	r3, [r3, #0]
  40051c:	2b00      	cmp	r3, #0
  40051e:	f000 80fe 	beq.w	40071e <udc_process_setup+0x346>
		return false; // The device is not is configured state yet
	}

	// Check the interface number included in the request
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
  400522:	4b2f      	ldr	r3, [pc, #188]	; (4005e0 <udc_process_setup+0x208>)
  400524:	791c      	ldrb	r4, [r3, #4]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
  400526:	4b37      	ldr	r3, [pc, #220]	; (400604 <udc_process_setup+0x22c>)
  400528:	681d      	ldr	r5, [r3, #0]
  40052a:	682b      	ldr	r3, [r5, #0]
  40052c:	791b      	ldrb	r3, [r3, #4]
  40052e:	42a3      	cmp	r3, r4
  400530:	f240 80f5 	bls.w	40071e <udc_process_setup+0x346>
		return false;
	}

	// Select first alternate setting of the interface to update udc_ptr_iface
	// before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
  400534:	4620      	mov	r0, r4
  400536:	2100      	movs	r1, #0
  400538:	4b33      	ldr	r3, [pc, #204]	; (400608 <udc_process_setup+0x230>)
  40053a:	4798      	blx	r3
  40053c:	2800      	cmp	r0, #0
  40053e:	f000 80ee 	beq.w	40071e <udc_process_setup+0x346>
		return false;
	}
	// Get alternate setting from UDI
	udi_api = udc_ptr_conf->udi_apis[iface_num];
  400542:	686b      	ldr	r3, [r5, #4]
	udc_iface_setting = udi_api->getsetting();
  400544:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
  400548:	68db      	ldr	r3, [r3, #12]
  40054a:	4798      	blx	r3
  40054c:	4b2f      	ldr	r3, [pc, #188]	; (40060c <udc_process_setup+0x234>)
  40054e:	7018      	strb	r0, [r3, #0]

	// Link value to payload pointer of request
	udd_set_setup_payload(&udc_iface_setting,1);
  400550:	4618      	mov	r0, r3
  400552:	2101      	movs	r1, #1
  400554:	4b24      	ldr	r3, [pc, #144]	; (4005e8 <udc_process_setup+0x210>)
  400556:	4798      	blx	r3
  400558:	e140      	b.n	4007dc <udc_process_setup+0x404>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
  40055a:	2b02      	cmp	r3, #2
  40055c:	f040 80df 	bne.w	40071e <udc_process_setup+0x346>
			// Standard Get Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
  400560:	4b1f      	ldr	r3, [pc, #124]	; (4005e0 <udc_process_setup+0x208>)
  400562:	785b      	ldrb	r3, [r3, #1]
  400564:	2b00      	cmp	r3, #0
  400566:	f040 80d3 	bne.w	400710 <udc_process_setup+0x338>
 */
static bool udc_req_std_ep_get_status(void)
{
	static le16_t udc_ep_status;

	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
  40056a:	2a02      	cmp	r2, #2
  40056c:	f040 80d7 	bne.w	40071e <udc_process_setup+0x346>
		return false;
	}

	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
  400570:	4b1b      	ldr	r3, [pc, #108]	; (4005e0 <udc_process_setup+0x208>)
  400572:	7918      	ldrb	r0, [r3, #4]
  400574:	4b26      	ldr	r3, [pc, #152]	; (400610 <udc_process_setup+0x238>)
  400576:	4798      	blx	r3
  400578:	4b26      	ldr	r3, [pc, #152]	; (400614 <udc_process_setup+0x23c>)
  40057a:	8018      	strh	r0, [r3, #0]
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;

	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
  40057c:	4618      	mov	r0, r3
  40057e:	2102      	movs	r1, #2
  400580:	4b19      	ldr	r3, [pc, #100]	; (4005e8 <udc_process_setup+0x210>)
  400582:	4798      	blx	r3
  400584:	e12a      	b.n	4007dc <udc_process_setup+0x404>
			}
		}
#endif
	} else {
		// SET Standard Requests
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
  400586:	f013 031f 	ands.w	r3, r3, #31
  40058a:	d17f      	bne.n	40068c <udc_process_setup+0x2b4>
			// Standard Set Device request
			switch (udd_g_ctrlreq.req.bRequest) {
  40058c:	4a14      	ldr	r2, [pc, #80]	; (4005e0 <udc_process_setup+0x208>)
  40058e:	7852      	ldrb	r2, [r2, #1]
  400590:	3a01      	subs	r2, #1
  400592:	2a08      	cmp	r2, #8
  400594:	d87a      	bhi.n	40068c <udc_process_setup+0x2b4>
  400596:	e8df f012 	tbh	[pc, r2, lsl #1]
  40059a:	0012      	.short	0x0012
  40059c:	00bd0079 	.word	0x00bd0079
  4005a0:	00090079 	.word	0x00090079
  4005a4:	00790079 	.word	0x00790079
  4005a8:	00410079 	.word	0x00410079
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_address(void)
{
	if (udd_g_ctrlreq.req.wLength) {
  4005ac:	4b0c      	ldr	r3, [pc, #48]	; (4005e0 <udc_process_setup+0x208>)
  4005ae:	88db      	ldrh	r3, [r3, #6]
  4005b0:	2b00      	cmp	r3, #0
  4005b2:	f040 80b4 	bne.w	40071e <udc_process_setup+0x346>
		return false;
	}

	// The address must be changed at the end of setup request after the handshake
	// then we use a callback to change address
	udd_g_ctrlreq.callback = udc_valid_address;
  4005b6:	4a18      	ldr	r2, [pc, #96]	; (400618 <udc_process_setup+0x240>)
  4005b8:	4b09      	ldr	r3, [pc, #36]	; (4005e0 <udc_process_setup+0x208>)
  4005ba:	611a      	str	r2, [r3, #16]
  4005bc:	e10e      	b.n	4007dc <udc_process_setup+0x404>
 *
 * \return true if success
 */
static bool udc_req_std_dev_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
  4005be:	4b08      	ldr	r3, [pc, #32]	; (4005e0 <udc_process_setup+0x208>)
  4005c0:	88db      	ldrh	r3, [r3, #6]
  4005c2:	2b00      	cmp	r3, #0
  4005c4:	f040 80ab 	bne.w	40071e <udc_process_setup+0x346>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
  4005c8:	4b05      	ldr	r3, [pc, #20]	; (4005e0 <udc_process_setup+0x208>)
  4005ca:	885b      	ldrh	r3, [r3, #2]
  4005cc:	2b01      	cmp	r3, #1
  4005ce:	f040 80a6 	bne.w	40071e <udc_process_setup+0x346>
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
  4005d2:	4a04      	ldr	r2, [pc, #16]	; (4005e4 <udc_process_setup+0x20c>)
  4005d4:	8813      	ldrh	r3, [r2, #0]
  4005d6:	f023 0302 	bic.w	r3, r3, #2
  4005da:	8013      	strh	r3, [r2, #0]
  4005dc:	e0fe      	b.n	4007dc <udc_process_setup+0x404>
  4005de:	bf00      	nop
  4005e0:	20000a80 	.word	0x20000a80
  4005e4:	20000926 	.word	0x20000926
  4005e8:	00401c9d 	.word	0x00401c9d
  4005ec:	2000003c 	.word	0x2000003c
  4005f0:	00403ea8 	.word	0x00403ea8
  4005f4:	20000030 	.word	0x20000030
  4005f8:	2000001c 	.word	0x2000001c
  4005fc:	20000020 	.word	0x20000020
  400600:	20000928 	.word	0x20000928
  400604:	2000091c 	.word	0x2000091c
  400608:	00400211 	.word	0x00400211
  40060c:	20000924 	.word	0x20000924
  400610:	00401e19 	.word	0x00401e19
  400614:	20000920 	.word	0x20000920
  400618:	004001f9 	.word	0x004001f9
static bool udc_req_std_dev_set_configuration(void)
{
	uint8_t iface_num;

	// Check request length
	if (udd_g_ctrlreq.req.wLength) {
  40061c:	4b71      	ldr	r3, [pc, #452]	; (4007e4 <udc_process_setup+0x40c>)
  40061e:	88db      	ldrh	r3, [r3, #6]
  400620:	2b00      	cmp	r3, #0
  400622:	d17c      	bne.n	40071e <udc_process_setup+0x346>
		return false;
	}
	// Authorize configuration only if the address is valid
	if (!udd_getaddress()) {
  400624:	4b70      	ldr	r3, [pc, #448]	; (4007e8 <udc_process_setup+0x410>)
  400626:	4798      	blx	r3
  400628:	2800      	cmp	r0, #0
  40062a:	d078      	beq.n	40071e <udc_process_setup+0x346>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
  40062c:	4b6d      	ldr	r3, [pc, #436]	; (4007e4 <udc_process_setup+0x40c>)
  40062e:	789a      	ldrb	r2, [r3, #2]
				udc_config.confdev_lsfs->bNumConfigurations) {
  400630:	4b6e      	ldr	r3, [pc, #440]	; (4007ec <udc_process_setup+0x414>)
  400632:	681b      	ldr	r3, [r3, #0]
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
  400634:	7c5b      	ldrb	r3, [r3, #17]
  400636:	429a      	cmp	r2, r3
  400638:	dc71      	bgt.n	40071e <udc_process_setup+0x346>
			return false;
		}
	}

	// Reset current configuration
	udc_reset();
  40063a:	4b6d      	ldr	r3, [pc, #436]	; (4007f0 <udc_process_setup+0x418>)
  40063c:	4798      	blx	r3

	// Enable new configuration
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
  40063e:	4b69      	ldr	r3, [pc, #420]	; (4007e4 <udc_process_setup+0x40c>)
  400640:	789b      	ldrb	r3, [r3, #2]
  400642:	4a6c      	ldr	r2, [pc, #432]	; (4007f4 <udc_process_setup+0x41c>)
  400644:	7013      	strb	r3, [r2, #0]
	if (udc_num_configuration == 0) {
  400646:	2b00      	cmp	r3, #0
  400648:	f000 80c8 	beq.w	4007dc <udc_process_setup+0x404>
		udc_ptr_conf = &udc_config.conf_hs[udc_num_configuration - 1];
	} else
#endif
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
  40064c:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
  400650:	3b01      	subs	r3, #1
  400652:	4a66      	ldr	r2, [pc, #408]	; (4007ec <udc_process_setup+0x414>)
  400654:	6852      	ldr	r2, [r2, #4]
  400656:	eb02 00c3 	add.w	r0, r2, r3, lsl #3
  40065a:	4967      	ldr	r1, [pc, #412]	; (4007f8 <udc_process_setup+0x420>)
  40065c:	6008      	str	r0, [r1, #0]
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
  40065e:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
  400662:	791b      	ldrb	r3, [r3, #4]
  400664:	2b00      	cmp	r3, #0
  400666:	f000 80b9 	beq.w	4007dc <udc_process_setup+0x404>
  40066a:	2400      	movs	r4, #0
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
  40066c:	4626      	mov	r6, r4
  40066e:	4d63      	ldr	r5, [pc, #396]	; (4007fc <udc_process_setup+0x424>)
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
  400670:	460f      	mov	r7, r1
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
  400672:	4620      	mov	r0, r4
  400674:	4631      	mov	r1, r6
  400676:	47a8      	blx	r5
  400678:	2800      	cmp	r0, #0
  40067a:	d050      	beq.n	40071e <udc_process_setup+0x346>
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
  40067c:	3401      	adds	r4, #1
  40067e:	b2e4      	uxtb	r4, r4
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
  400680:	683b      	ldr	r3, [r7, #0]
  400682:	681b      	ldr	r3, [r3, #0]
  400684:	791b      	ldrb	r3, [r3, #4]
  400686:	42a3      	cmp	r3, r4
  400688:	d8f3      	bhi.n	400672 <udc_process_setup+0x29a>
  40068a:	e0a7      	b.n	4007dc <udc_process_setup+0x404>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
  40068c:	2b01      	cmp	r3, #1
  40068e:	d119      	bne.n	4006c4 <udc_process_setup+0x2ec>
			// Standard Set Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
  400690:	4a54      	ldr	r2, [pc, #336]	; (4007e4 <udc_process_setup+0x40c>)
  400692:	7852      	ldrb	r2, [r2, #1]
  400694:	2a0b      	cmp	r2, #11
  400696:	d115      	bne.n	4006c4 <udc_process_setup+0x2ec>
 */
static bool udc_req_std_iface_set_setting(void)
{
	uint8_t iface_num, setting_num;

	if (udd_g_ctrlreq.req.wLength) {
  400698:	4b52      	ldr	r3, [pc, #328]	; (4007e4 <udc_process_setup+0x40c>)
  40069a:	88db      	ldrh	r3, [r3, #6]
  40069c:	2b00      	cmp	r3, #0
  40069e:	d13e      	bne.n	40071e <udc_process_setup+0x346>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
  4006a0:	4b54      	ldr	r3, [pc, #336]	; (4007f4 <udc_process_setup+0x41c>)
  4006a2:	781b      	ldrb	r3, [r3, #0]
  4006a4:	2b00      	cmp	r3, #0
  4006a6:	d03a      	beq.n	40071e <udc_process_setup+0x346>
		return false; // The device is not is configured state yet
	}

	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
  4006a8:	4b4e      	ldr	r3, [pc, #312]	; (4007e4 <udc_process_setup+0x40c>)
  4006aa:	791c      	ldrb	r4, [r3, #4]
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
  4006ac:	885d      	ldrh	r5, [r3, #2]

	// Disable current setting
	if (!udc_iface_disable(iface_num)) {
  4006ae:	4620      	mov	r0, r4
  4006b0:	4b53      	ldr	r3, [pc, #332]	; (400800 <udc_process_setup+0x428>)
  4006b2:	4798      	blx	r3
  4006b4:	2800      	cmp	r0, #0
  4006b6:	d032      	beq.n	40071e <udc_process_setup+0x346>
		return false;
	}

	// Enable new setting
	return udc_iface_enable(iface_num, setting_num);
  4006b8:	4620      	mov	r0, r4
  4006ba:	b2e9      	uxtb	r1, r5
  4006bc:	4b4f      	ldr	r3, [pc, #316]	; (4007fc <udc_process_setup+0x424>)
  4006be:	4798      	blx	r3
  4006c0:	4603      	mov	r3, r0
  4006c2:	e02a      	b.n	40071a <udc_process_setup+0x342>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
  4006c4:	2b02      	cmp	r3, #2
  4006c6:	d12a      	bne.n	40071e <udc_process_setup+0x346>
			// Standard Set Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
  4006c8:	4b46      	ldr	r3, [pc, #280]	; (4007e4 <udc_process_setup+0x40c>)
  4006ca:	785b      	ldrb	r3, [r3, #1]
  4006cc:	2b01      	cmp	r3, #1
  4006ce:	d002      	beq.n	4006d6 <udc_process_setup+0x2fe>
  4006d0:	2b03      	cmp	r3, #3
  4006d2:	d00c      	beq.n	4006ee <udc_process_setup+0x316>
  4006d4:	e020      	b.n	400718 <udc_process_setup+0x340>
 *
 * \return true if success
 */
static bool udc_req_std_ep_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
  4006d6:	4b43      	ldr	r3, [pc, #268]	; (4007e4 <udc_process_setup+0x40c>)
  4006d8:	88db      	ldrh	r3, [r3, #6]
  4006da:	bb03      	cbnz	r3, 40071e <udc_process_setup+0x346>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
  4006dc:	4b41      	ldr	r3, [pc, #260]	; (4007e4 <udc_process_setup+0x40c>)
  4006de:	885b      	ldrh	r3, [r3, #2]
  4006e0:	b9eb      	cbnz	r3, 40071e <udc_process_setup+0x346>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
  4006e2:	4b40      	ldr	r3, [pc, #256]	; (4007e4 <udc_process_setup+0x40c>)
  4006e4:	7918      	ldrb	r0, [r3, #4]
  4006e6:	4b47      	ldr	r3, [pc, #284]	; (400804 <udc_process_setup+0x42c>)
  4006e8:	4798      	blx	r3
  4006ea:	4603      	mov	r3, r0
  4006ec:	e015      	b.n	40071a <udc_process_setup+0x342>
 * \return true if success
 */
#if (0!=USB_DEVICE_MAX_EP)
static bool udc_req_std_ep_set_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
  4006ee:	4b3d      	ldr	r3, [pc, #244]	; (4007e4 <udc_process_setup+0x40c>)
  4006f0:	88db      	ldrh	r3, [r3, #6]
  4006f2:	b9a3      	cbnz	r3, 40071e <udc_process_setup+0x346>
		return false;
	}
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
  4006f4:	4b3b      	ldr	r3, [pc, #236]	; (4007e4 <udc_process_setup+0x40c>)
  4006f6:	885b      	ldrh	r3, [r3, #2]
  4006f8:	b98b      	cbnz	r3, 40071e <udc_process_setup+0x346>
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
  4006fa:	4c3a      	ldr	r4, [pc, #232]	; (4007e4 <udc_process_setup+0x40c>)
  4006fc:	7920      	ldrb	r0, [r4, #4]
  4006fe:	4b42      	ldr	r3, [pc, #264]	; (400808 <udc_process_setup+0x430>)
  400700:	4798      	blx	r3
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
  400702:	7920      	ldrb	r0, [r4, #4]
  400704:	4b41      	ldr	r3, [pc, #260]	; (40080c <udc_process_setup+0x434>)
  400706:	4798      	blx	r3
  400708:	4603      	mov	r3, r0
  40070a:	e006      	b.n	40071a <udc_process_setup+0x342>
		}
		break;

	default:
		// Unknown descriptor requested
		return false;
  40070c:	2300      	movs	r3, #0
  40070e:	e004      	b.n	40071a <udc_process_setup+0x342>
				break;
			}
		}
#endif
	}
	return false;
  400710:	2300      	movs	r3, #0
  400712:	e002      	b.n	40071a <udc_process_setup+0x342>
			case USB_REQ_SET_ADDRESS:
				return udc_req_std_dev_set_address();
			case USB_REQ_CLEAR_FEATURE:
				return udc_req_std_dev_clear_feature();
			case USB_REQ_SET_FEATURE:
				return udc_req_std_dev_set_feature();
  400714:	2300      	movs	r3, #0
  400716:	e000      	b.n	40071a <udc_process_setup+0x342>
				break;
			}
		}
#endif
	}
	return false;
  400718:	2300      	movs	r3, #0
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
		if (udc_reqstd()) {
  40071a:	2b00      	cmp	r3, #0
  40071c:	d15f      	bne.n	4007de <udc_process_setup+0x406>
			return true;
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
  40071e:	4b31      	ldr	r3, [pc, #196]	; (4007e4 <udc_process_setup+0x40c>)
  400720:	781b      	ldrb	r3, [r3, #0]
  400722:	f003 031f 	and.w	r3, r3, #31
  400726:	2b01      	cmp	r3, #1
  400728:	d11e      	bne.n	400768 <udc_process_setup+0x390>
static bool udc_req_iface(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
  40072a:	4b32      	ldr	r3, [pc, #200]	; (4007f4 <udc_process_setup+0x41c>)
  40072c:	781b      	ldrb	r3, [r3, #0]
  40072e:	b1db      	cbz	r3, 400768 <udc_process_setup+0x390>
		return false; // The device is not is configured state yet
	}
	// Check interface number
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
  400730:	4b2c      	ldr	r3, [pc, #176]	; (4007e4 <udc_process_setup+0x40c>)
  400732:	791c      	ldrb	r4, [r3, #4]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
  400734:	4b30      	ldr	r3, [pc, #192]	; (4007f8 <udc_process_setup+0x420>)
  400736:	681d      	ldr	r5, [r3, #0]
  400738:	682b      	ldr	r3, [r5, #0]
  40073a:	791b      	ldrb	r3, [r3, #4]
  40073c:	42a3      	cmp	r3, r4
  40073e:	d913      	bls.n	400768 <udc_process_setup+0x390>
	}

	//* To update udc_ptr_iface with the selected interface in request
	// Select first alternate setting of interface to update udc_ptr_iface
	// before calling udi_api->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
  400740:	4620      	mov	r0, r4
  400742:	2100      	movs	r1, #0
  400744:	4b32      	ldr	r3, [pc, #200]	; (400810 <udc_process_setup+0x438>)
  400746:	4798      	blx	r3
  400748:	b170      	cbz	r0, 400768 <udc_process_setup+0x390>
		return false;
	}
	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
  40074a:	686b      	ldr	r3, [r5, #4]
  40074c:	f853 5024 	ldr.w	r5, [r3, r4, lsl #2]
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
  400750:	68eb      	ldr	r3, [r5, #12]
  400752:	4798      	blx	r3
  400754:	4601      	mov	r1, r0
  400756:	4620      	mov	r0, r4
  400758:	4b2d      	ldr	r3, [pc, #180]	; (400810 <udc_process_setup+0x438>)
  40075a:	4798      	blx	r3
  40075c:	b120      	cbz	r0, 400768 <udc_process_setup+0x390>
		return false;
	}

	// Send the SETUP request to the UDI corresponding to the interface number
	return udi_api->setup();
  40075e:	68ab      	ldr	r3, [r5, #8]
  400760:	4798      	blx	r3
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
		if (udc_req_iface()) {
  400762:	4603      	mov	r3, r0
  400764:	2800      	cmp	r0, #0
  400766:	d13a      	bne.n	4007de <udc_process_setup+0x406>
			return true;
		}
	}

	// If endpoint request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
  400768:	4b1e      	ldr	r3, [pc, #120]	; (4007e4 <udc_process_setup+0x40c>)
  40076a:	781b      	ldrb	r3, [r3, #0]
  40076c:	f003 031f 	and.w	r3, r3, #31
  400770:	2b02      	cmp	r3, #2
  400772:	d126      	bne.n	4007c2 <udc_process_setup+0x3ea>
static bool udc_req_ep(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
  400774:	4b1f      	ldr	r3, [pc, #124]	; (4007f4 <udc_process_setup+0x41c>)
  400776:	781b      	ldrb	r3, [r3, #0]
  400778:	b1eb      	cbz	r3, 4007b6 <udc_process_setup+0x3de>
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
  40077a:	4b1f      	ldr	r3, [pc, #124]	; (4007f8 <udc_process_setup+0x420>)
  40077c:	681a      	ldr	r2, [r3, #0]
  40077e:	6813      	ldr	r3, [r2, #0]
  400780:	791b      	ldrb	r3, [r3, #4]
  400782:	b1d3      	cbz	r3, 4007ba <udc_process_setup+0x3e2>
  400784:	2400      	movs	r4, #0
			iface_num++) {
		// Select the interface with the current alternate setting
		udi_api = udc_ptr_conf->udi_apis[iface_num];
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
  400786:	4e22      	ldr	r6, [pc, #136]	; (400810 <udc_process_setup+0x438>)
	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
  400788:	4f1b      	ldr	r7, [pc, #108]	; (4007f8 <udc_process_setup+0x420>)
			iface_num++) {
		// Select the interface with the current alternate setting
		udi_api = udc_ptr_conf->udi_apis[iface_num];
  40078a:	6853      	ldr	r3, [r2, #4]
  40078c:	f853 5024 	ldr.w	r5, [r3, r4, lsl #2]
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
  400790:	68eb      	ldr	r3, [r5, #12]
  400792:	4798      	blx	r3
  400794:	4601      	mov	r1, r0
  400796:	4620      	mov	r0, r4
  400798:	47b0      	blx	r6
  40079a:	4603      	mov	r3, r0
  40079c:	b1f8      	cbz	r0, 4007de <udc_process_setup+0x406>
			return false;
		}

		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
  40079e:	68ab      	ldr	r3, [r5, #8]
  4007a0:	4798      	blx	r3
  4007a2:	4603      	mov	r3, r0
  4007a4:	b9d8      	cbnz	r0, 4007de <udc_process_setup+0x406>
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
  4007a6:	3401      	adds	r4, #1
  4007a8:	b2e4      	uxtb	r4, r4
	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
  4007aa:	683a      	ldr	r2, [r7, #0]
  4007ac:	6811      	ldr	r1, [r2, #0]
  4007ae:	7909      	ldrb	r1, [r1, #4]
  4007b0:	42a1      	cmp	r1, r4
  4007b2:	d8ea      	bhi.n	40078a <udc_process_setup+0x3b2>
  4007b4:	e013      	b.n	4007de <udc_process_setup+0x406>
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
  4007b6:	2300      	movs	r3, #0
  4007b8:	e011      	b.n	4007de <udc_process_setup+0x406>
		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
			return true;
		}
	}
	return false;
  4007ba:	2300      	movs	r3, #0
  4007bc:	e00f      	b.n	4007de <udc_process_setup+0x406>
	udd_g_ctrlreq.callback = NULL;
	udd_g_ctrlreq.over_under_run = NULL;

	if (Udd_setup_is_in()) {
		if (udd_g_ctrlreq.req.wLength == 0) {
			return false; // Error from USB host
  4007be:	2300      	movs	r3, #0
  4007c0:	e00d      	b.n	4007de <udc_process_setup+0x406>
	// Here SETUP request unknown by UDC and UDIs
#ifdef USB_DEVICE_SPECIFIC_REQUEST
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
  4007c2:	2300      	movs	r3, #0
  4007c4:	e00b      	b.n	4007de <udc_process_setup+0x406>
			return false; // Error from USB host
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
  4007c6:	f013 0f60 	tst.w	r3, #96	; 0x60
  4007ca:	d1a8      	bne.n	40071e <udc_process_setup+0x346>
  4007cc:	e615      	b.n	4003fa <udc_process_setup+0x22>
  4007ce:	f013 0f60 	tst.w	r3, #96	; 0x60
  4007d2:	d1a4      	bne.n	40071e <udc_process_setup+0x346>
  4007d4:	e6d7      	b.n	400586 <udc_process_setup+0x1ae>
		str = udc_string_manufacturer_name;
		break;
#endif
#ifdef USB_DEVICE_PRODUCT_NAME
	case 2:
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
  4007d6:	2206      	movs	r2, #6
		str = udc_string_product_name;
  4007d8:	4b0e      	ldr	r3, [pc, #56]	; (400814 <udc_process_setup+0x43c>)
  4007da:	e673      	b.n	4004c4 <udc_process_setup+0xec>
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
		if (udc_reqstd()) {
			return true;
  4007dc:	2301      	movs	r3, #1
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
#endif
}
  4007de:	4618      	mov	r0, r3
  4007e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4007e2:	bf00      	nop
  4007e4:	20000a80 	.word	0x20000a80
  4007e8:	00401c81 	.word	0x00401c81
  4007ec:	2000003c 	.word	0x2000003c
  4007f0:	00400355 	.word	0x00400355
  4007f4:	20000928 	.word	0x20000928
  4007f8:	2000091c 	.word	0x2000091c
  4007fc:	004002e1 	.word	0x004002e1
  400800:	00400279 	.word	0x00400279
  400804:	00401f45 	.word	0x00401f45
  400808:	004021a9 	.word	0x004021a9
  40080c:	00401e59 	.word	0x00401e59
  400810:	00400211 	.word	0x00400211
  400814:	20000014 	.word	0x20000014

00400818 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  400818:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  40081c:	4681      	mov	r9, r0
  40081e:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  400820:	4b12      	ldr	r3, [pc, #72]	; (40086c <pio_handler_process+0x54>)
  400822:	4798      	blx	r3
  400824:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  400826:	4648      	mov	r0, r9
  400828:	4b11      	ldr	r3, [pc, #68]	; (400870 <pio_handler_process+0x58>)
  40082a:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
  40082c:	4005      	ands	r5, r0
  40082e:	d013      	beq.n	400858 <pio_handler_process+0x40>
  400830:	4c10      	ldr	r4, [pc, #64]	; (400874 <pio_handler_process+0x5c>)
  400832:	f104 0660 	add.w	r6, r4, #96	; 0x60
		/* Find triggering source */
		i = 0;
		while (status != 0) {
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
  400836:	6823      	ldr	r3, [r4, #0]
  400838:	4543      	cmp	r3, r8
  40083a:	d108      	bne.n	40084e <pio_handler_process+0x36>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  40083c:	6861      	ldr	r1, [r4, #4]
  40083e:	4229      	tst	r1, r5
  400840:	d005      	beq.n	40084e <pio_handler_process+0x36>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  400842:	68e3      	ldr	r3, [r4, #12]
  400844:	4640      	mov	r0, r8
  400846:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
  400848:	6863      	ldr	r3, [r4, #4]
  40084a:	ea25 0503 	bic.w	r5, r5, r3
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
  40084e:	42b4      	cmp	r4, r6
  400850:	d002      	beq.n	400858 <pio_handler_process+0x40>
  400852:	3410      	adds	r4, #16

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
  400854:	2d00      	cmp	r5, #0
  400856:	d1ee      	bne.n	400836 <pio_handler_process+0x1e>
		}
	}

	/* Check capture events */
#if (SAM3S || SAM4S || SAM4E)
	if (pio_capture_enable_flag) {
  400858:	4b07      	ldr	r3, [pc, #28]	; (400878 <pio_handler_process+0x60>)
  40085a:	681b      	ldr	r3, [r3, #0]
  40085c:	b123      	cbz	r3, 400868 <pio_handler_process+0x50>
		if (pio_capture_handler) {
  40085e:	4b07      	ldr	r3, [pc, #28]	; (40087c <pio_handler_process+0x64>)
  400860:	681b      	ldr	r3, [r3, #0]
  400862:	b10b      	cbz	r3, 400868 <pio_handler_process+0x50>
			pio_capture_handler(p_pio);
  400864:	4648      	mov	r0, r9
  400866:	4798      	blx	r3
  400868:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40086c:	00402559 	.word	0x00402559
  400870:	0040255d 	.word	0x0040255d
  400874:	20000934 	.word	0x20000934
  400878:	20000a98 	.word	0x20000a98
  40087c:	20000930 	.word	0x20000930

00400880 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  400880:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  400882:	4802      	ldr	r0, [pc, #8]	; (40088c <PIOA_Handler+0xc>)
  400884:	210b      	movs	r1, #11
  400886:	4b02      	ldr	r3, [pc, #8]	; (400890 <PIOA_Handler+0x10>)
  400888:	4798      	blx	r3
  40088a:	bd08      	pop	{r3, pc}
  40088c:	400e0e00 	.word	0x400e0e00
  400890:	00400819 	.word	0x00400819

00400894 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  400894:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  400896:	4802      	ldr	r0, [pc, #8]	; (4008a0 <PIOB_Handler+0xc>)
  400898:	210c      	movs	r1, #12
  40089a:	4b02      	ldr	r3, [pc, #8]	; (4008a4 <PIOB_Handler+0x10>)
  40089c:	4798      	blx	r3
  40089e:	bd08      	pop	{r3, pc}
  4008a0:	400e1000 	.word	0x400e1000
  4008a4:	00400819 	.word	0x00400819

004008a8 <spi_enable_clock>:
 * \brief Enable SPI clock.
 *
 * \param p_spi Pointer to an SPI instance.
 */
void spi_enable_clock(Spi *p_spi)
{
  4008a8:	b508      	push	{r3, lr}
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  4008aa:	2015      	movs	r0, #21
  4008ac:	4b01      	ldr	r3, [pc, #4]	; (4008b4 <spi_enable_clock+0xc>)
  4008ae:	4798      	blx	r3
  4008b0:	bd08      	pop	{r3, pc}
  4008b2:	bf00      	nop
  4008b4:	0040278d 	.word	0x0040278d

004008b8 <spi_set_peripheral_chip_select_value>:
 *                 \ref spi_enable_peripheral_select_decode,
 *                 \ref spi_disable_peripheral_select_decode.
 */
void spi_set_peripheral_chip_select_value(Spi *p_spi, uint32_t ul_value)
{
	p_spi->SPI_MR &= (~SPI_MR_PCS_Msk);
  4008b8:	6843      	ldr	r3, [r0, #4]
  4008ba:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
  4008be:	6043      	str	r3, [r0, #4]
	p_spi->SPI_MR |= SPI_MR_PCS(ul_value);
  4008c0:	6843      	ldr	r3, [r0, #4]
  4008c2:	0409      	lsls	r1, r1, #16
  4008c4:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
  4008c8:	430b      	orrs	r3, r1
  4008ca:	6043      	str	r3, [r0, #4]
  4008cc:	4770      	bx	lr
  4008ce:	bf00      	nop

004008d0 <spi_set_delay_between_chip_select>:
 * \param p_spi Pointer to an SPI instance.
 * \param ul_delay Delay between chip selects (in number of MCK clocks).
 */
void spi_set_delay_between_chip_select(Spi *p_spi, uint32_t ul_delay)
{
	p_spi->SPI_MR &= (~SPI_MR_DLYBCS_Msk);
  4008d0:	6843      	ldr	r3, [r0, #4]
  4008d2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
  4008d6:	6043      	str	r3, [r0, #4]
	p_spi->SPI_MR |= SPI_MR_DLYBCS(ul_delay);
  4008d8:	6843      	ldr	r3, [r0, #4]
  4008da:	ea43 6101 	orr.w	r1, r3, r1, lsl #24
  4008de:	6041      	str	r1, [r0, #4]
  4008e0:	4770      	bx	lr
  4008e2:	bf00      	nop

004008e4 <spi_write>:
 * \retval SPI_OK on Success.
 * \retval SPI_ERROR_TIMEOUT on Time-out.
 */
spi_status_t spi_write(Spi *p_spi, uint16_t us_data,
		uint8_t uc_pcs, uint8_t uc_last)
{
  4008e4:	b430      	push	{r4, r5}
	uint32_t timeout = SPI_TIMEOUT;
	uint32_t value;

	while (!(p_spi->SPI_SR & SPI_SR_TDRE)) {
  4008e6:	f643 2499 	movw	r4, #15001	; 0x3a99
  4008ea:	e001      	b.n	4008f0 <spi_write+0xc>
		if (!timeout--) {
  4008ec:	3c01      	subs	r4, #1
  4008ee:	d011      	beq.n	400914 <spi_write+0x30>
		uint8_t uc_pcs, uint8_t uc_last)
{
	uint32_t timeout = SPI_TIMEOUT;
	uint32_t value;

	while (!(p_spi->SPI_SR & SPI_SR_TDRE)) {
  4008f0:	6905      	ldr	r5, [r0, #16]
  4008f2:	f015 0f02 	tst.w	r5, #2
  4008f6:	d0f9      	beq.n	4008ec <spi_write+0x8>
 *
 * \return 1 for Variable mode, 0 for fixed mode.
 */
static inline uint32_t spi_get_peripheral_select_mode(Spi *p_spi)
{
	if (p_spi->SPI_MR & SPI_MR_PS) {
  4008f8:	6844      	ldr	r4, [r0, #4]
		if (!timeout--) {
			return SPI_ERROR_TIMEOUT;
		}
	}

	if (spi_get_peripheral_select_mode(p_spi)) {
  4008fa:	f014 0f02 	tst.w	r4, #2
  4008fe:	d006      	beq.n	40090e <spi_write+0x2a>
		value = SPI_TDR_TD(us_data) | SPI_TDR_PCS(uc_pcs);
  400900:	0412      	lsls	r2, r2, #16
  400902:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
  400906:	4311      	orrs	r1, r2
		if (uc_last) {
  400908:	b10b      	cbz	r3, 40090e <spi_write+0x2a>
			value |= SPI_TDR_LASTXFER;
  40090a:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
		}
	} else {
		value = SPI_TDR_TD(us_data);
	}

	p_spi->SPI_TDR = value;
  40090e:	60c1      	str	r1, [r0, #12]

	return SPI_OK;
  400910:	2000      	movs	r0, #0
  400912:	e000      	b.n	400916 <spi_write+0x32>
	uint32_t timeout = SPI_TIMEOUT;
	uint32_t value;

	while (!(p_spi->SPI_SR & SPI_SR_TDRE)) {
		if (!timeout--) {
			return SPI_ERROR_TIMEOUT;
  400914:	2001      	movs	r0, #1
	}

	p_spi->SPI_TDR = value;

	return SPI_OK;
}
  400916:	bc30      	pop	{r4, r5}
  400918:	4770      	bx	lr
  40091a:	bf00      	nop

0040091c <spi_set_clock_polarity>:
 * \param ul_polarity Default clock state is logical one(high)/zero(low).
 */
void spi_set_clock_polarity(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_polarity)
{
	if (ul_polarity) {
  40091c:	b132      	cbz	r2, 40092c <spi_set_clock_polarity+0x10>
  40091e:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
  400922:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400924:	f043 0301 	orr.w	r3, r3, #1
  400928:	6303      	str	r3, [r0, #48]	; 0x30
  40092a:	4770      	bx	lr
  40092c:	eb00 0081 	add.w	r0, r0, r1, lsl #2
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CPOL);
  400930:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400932:	f023 0301 	bic.w	r3, r3, #1
  400936:	6303      	str	r3, [r0, #48]	; 0x30
  400938:	4770      	bx	lr
  40093a:	bf00      	nop

0040093c <spi_set_clock_phase>:
 *  \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 *  \param ul_phase Data capture on the rising/falling edge of clock.
 */
void spi_set_clock_phase(Spi *p_spi, uint32_t ul_pcs_ch, uint32_t ul_phase)
{
	if (ul_phase) {
  40093c:	b132      	cbz	r2, 40094c <spi_set_clock_phase+0x10>
  40093e:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
  400942:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400944:	f043 0302 	orr.w	r3, r3, #2
  400948:	6303      	str	r3, [r0, #48]	; 0x30
  40094a:	4770      	bx	lr
  40094c:	eb00 0081 	add.w	r0, r0, r1, lsl #2
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_NCPHA);
  400950:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400952:	f023 0302 	bic.w	r3, r3, #2
  400956:	6303      	str	r3, [r0, #48]	; 0x30
  400958:	4770      	bx	lr
  40095a:	bf00      	nop

0040095c <spi_configure_cs_behavior>:
 * \param ul_cs_behavior Behavior of the Chip Select after transfer.
 */
void spi_configure_cs_behavior(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_cs_behavior)
{
	if (ul_cs_behavior == SPI_CS_RISE_FORCED) {
  40095c:	2a04      	cmp	r2, #4
  40095e:	d10a      	bne.n	400976 <spi_configure_cs_behavior+0x1a>
  400960:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
  400964:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400966:	f023 0308 	bic.w	r3, r3, #8
  40096a:	6303      	str	r3, [r0, #48]	; 0x30
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSNAAT;
  40096c:	6b03      	ldr	r3, [r0, #48]	; 0x30
  40096e:	f043 0304 	orr.w	r3, r3, #4
  400972:	6303      	str	r3, [r0, #48]	; 0x30
  400974:	4770      	bx	lr
	} else if (ul_cs_behavior == SPI_CS_RISE_NO_TX) {
  400976:	b952      	cbnz	r2, 40098e <spi_configure_cs_behavior+0x32>
  400978:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
  40097c:	6b03      	ldr	r3, [r0, #48]	; 0x30
  40097e:	f023 0308 	bic.w	r3, r3, #8
  400982:	6303      	str	r3, [r0, #48]	; 0x30
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSNAAT);
  400984:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400986:	f023 0304 	bic.w	r3, r3, #4
  40098a:	6303      	str	r3, [r0, #48]	; 0x30
  40098c:	4770      	bx	lr
	} else if (ul_cs_behavior == SPI_CS_KEEP_LOW) {
  40098e:	2a08      	cmp	r2, #8
  400990:	d105      	bne.n	40099e <spi_configure_cs_behavior+0x42>
  400992:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSAAT;
  400996:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400998:	f043 0308 	orr.w	r3, r3, #8
  40099c:	6303      	str	r3, [r0, #48]	; 0x30
  40099e:	4770      	bx	lr

004009a0 <spi_set_bits_per_transfer>:
 * \param ul_bits Number of bits (8~16), use the pattern defined
 *        in the device header file.
 */
void spi_set_bits_per_transfer(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_bits)
{
  4009a0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_BITS_Msk);
  4009a4:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  4009a6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  4009aa:	630b      	str	r3, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= ul_bits;
  4009ac:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  4009ae:	431a      	orrs	r2, r3
  4009b0:	630a      	str	r2, [r1, #48]	; 0x30
  4009b2:	4770      	bx	lr

004009b4 <spi_set_baudrate_div>:
 * \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 * \param uc_baudrate_divider Baudrate divider from MCK.
 */
void spi_set_baudrate_div(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_baudrate_divider)
{
  4009b4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_SCBR_Msk);
  4009b8:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  4009ba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
  4009be:	630b      	str	r3, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_SCBR(uc_baudrate_divider);
  4009c0:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  4009c2:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
  4009c6:	630a      	str	r2, [r1, #48]	; 0x30
  4009c8:	4770      	bx	lr
  4009ca:	bf00      	nop

004009cc <spi_set_transfer_delay>:
 * \param uc_dlybs Delay before SPCK (in number of MCK clocks).
 * \param uc_dlybct Delay between consecutive transfers (in number of MCK clocks).
 */
void spi_set_transfer_delay(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_dlybs, uint8_t uc_dlybct)
{
  4009cc:	b410      	push	{r4}
  4009ce:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	p_spi->SPI_CSR[ul_pcs_ch] &= ~(SPI_CSR_DLYBS_Msk | SPI_CSR_DLYBCT_Msk);
  4009d2:	6b08      	ldr	r0, [r1, #48]	; 0x30
  4009d4:	b280      	uxth	r0, r0
  4009d6:	6308      	str	r0, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_DLYBS(uc_dlybs)
  4009d8:	6b0c      	ldr	r4, [r1, #48]	; 0x30
  4009da:	ea44 6303 	orr.w	r3, r4, r3, lsl #24
  4009de:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
  4009e2:	630a      	str	r2, [r1, #48]	; 0x30
			| SPI_CSR_DLYBCT(uc_dlybct);
}
  4009e4:	f85d 4b04 	ldr.w	r4, [sp], #4
  4009e8:	4770      	bx	lr
  4009ea:	bf00      	nop

004009ec <udd_ctrl_init>:
	cpu_irq_restore(flags);
}

static void udd_ctrl_init(void)
{
	udd_g_ctrlreq.callback = NULL;
  4009ec:	4a03      	ldr	r2, [pc, #12]	; (4009fc <udd_ctrl_init+0x10>)
  4009ee:	2300      	movs	r3, #0
  4009f0:	6113      	str	r3, [r2, #16]
	udd_g_ctrlreq.over_under_run = NULL;
  4009f2:	6153      	str	r3, [r2, #20]
	udd_g_ctrlreq.payload_size = 0;
  4009f4:	8193      	strh	r3, [r2, #12]
	udd_ep_control_state = UDD_EPCTRL_SETUP;
  4009f6:	4a02      	ldr	r2, [pc, #8]	; (400a00 <udd_ctrl_init+0x14>)
  4009f8:	7013      	strb	r3, [r2, #0]
  4009fa:	4770      	bx	lr
  4009fc:	20000a80 	.word	0x20000a80
  400a00:	20000a25 	.word	0x20000a25

00400a04 <udd_ctrl_stall_data>:
	udd_ack_bank0_received(0);
}


static void udd_ctrl_stall_data(void)
{
  400a04:	b082      	sub	sp, #8
	// Stall all packets on IN & OUT control endpoint
	udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
  400a06:	2205      	movs	r2, #5
  400a08:	4b0e      	ldr	r3, [pc, #56]	; (400a44 <udd_ctrl_stall_data+0x40>)
  400a0a:	701a      	strb	r2, [r3, #0]
	udd_enable_stall_handshake(0);
  400a0c:	4a0e      	ldr	r2, [pc, #56]	; (400a48 <udd_ctrl_stall_data+0x44>)
  400a0e:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400a10:	9300      	str	r3, [sp, #0]
  400a12:	9b00      	ldr	r3, [sp, #0]
  400a14:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  400a18:	9300      	str	r3, [sp, #0]
  400a1a:	9b00      	ldr	r3, [sp, #0]
  400a1c:	f043 0320 	orr.w	r3, r3, #32
  400a20:	9300      	str	r3, [sp, #0]
  400a22:	9b00      	ldr	r3, [sp, #0]
  400a24:	6313      	str	r3, [r2, #48]	; 0x30
  400a26:	2300      	movs	r3, #0
  400a28:	9301      	str	r3, [sp, #4]
  400a2a:	9b01      	ldr	r3, [sp, #4]
  400a2c:	2b13      	cmp	r3, #19
  400a2e:	d806      	bhi.n	400a3e <udd_ctrl_stall_data+0x3a>

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
  400a30:	bf00      	nop
  400a32:	9b01      	ldr	r3, [sp, #4]
  400a34:	3301      	adds	r3, #1
  400a36:	9301      	str	r3, [sp, #4]
  400a38:	9b01      	ldr	r3, [sp, #4]
  400a3a:	2b13      	cmp	r3, #19
  400a3c:	d9f8      	bls.n	400a30 <udd_ctrl_stall_data+0x2c>
}
  400a3e:	b002      	add	sp, #8
  400a40:	4770      	bx	lr
  400a42:	bf00      	nop
  400a44:	20000a25 	.word	0x20000a25
  400a48:	40034000 	.word	0x40034000

00400a4c <udd_ctrl_send_zlp_in>:


static void udd_ctrl_send_zlp_in(void)
{
  400a4c:	b082      	sub	sp, #8
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP;
  400a4e:	2203      	movs	r2, #3
  400a50:	4b0e      	ldr	r3, [pc, #56]	; (400a8c <udd_ctrl_send_zlp_in+0x40>)
  400a52:	701a      	strb	r2, [r3, #0]
	// Validate and send empty IN packet on control endpoint
	// Send ZLP on IN endpoint
	udd_set_transmit_ready(0);
  400a54:	4a0e      	ldr	r2, [pc, #56]	; (400a90 <udd_ctrl_send_zlp_in+0x44>)
  400a56:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400a58:	9300      	str	r3, [sp, #0]
  400a5a:	9b00      	ldr	r3, [sp, #0]
  400a5c:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  400a60:	9300      	str	r3, [sp, #0]
  400a62:	9b00      	ldr	r3, [sp, #0]
  400a64:	f043 0310 	orr.w	r3, r3, #16
  400a68:	9300      	str	r3, [sp, #0]
  400a6a:	9b00      	ldr	r3, [sp, #0]
  400a6c:	6313      	str	r3, [r2, #48]	; 0x30
  400a6e:	2300      	movs	r3, #0
  400a70:	9301      	str	r3, [sp, #4]
  400a72:	9b01      	ldr	r3, [sp, #4]
  400a74:	2b13      	cmp	r3, #19
  400a76:	d806      	bhi.n	400a86 <udd_ctrl_send_zlp_in+0x3a>
  400a78:	bf00      	nop
  400a7a:	9b01      	ldr	r3, [sp, #4]
  400a7c:	3301      	adds	r3, #1
  400a7e:	9301      	str	r3, [sp, #4]
  400a80:	9b01      	ldr	r3, [sp, #4]
  400a82:	2b13      	cmp	r3, #19
  400a84:	d9f8      	bls.n	400a78 <udd_ctrl_send_zlp_in+0x2c>
}
  400a86:	b002      	add	sp, #8
  400a88:	4770      	bx	lr
  400a8a:	bf00      	nop
  400a8c:	20000a25 	.word	0x20000a25
  400a90:	40034000 	.word	0x40034000

00400a94 <udd_ctrl_endofrequest>:
	// because the buffer of control endpoint is already free
}


static void udd_ctrl_endofrequest(void)
{
  400a94:	b508      	push	{r3, lr}
	// If a callback is registered then call it
	if (udd_g_ctrlreq.callback) {
  400a96:	4b02      	ldr	r3, [pc, #8]	; (400aa0 <udd_ctrl_endofrequest+0xc>)
  400a98:	691b      	ldr	r3, [r3, #16]
  400a9a:	b103      	cbz	r3, 400a9e <udd_ctrl_endofrequest+0xa>
		udd_g_ctrlreq.callback();
  400a9c:	4798      	blx	r3
  400a9e:	bd08      	pop	{r3, pc}
  400aa0:	20000a80 	.word	0x20000a80

00400aa4 <udd_ctrl_in_sent>:
	}
}


static void udd_ctrl_in_sent(void)
{
  400aa4:	b530      	push	{r4, r5, lr}
  400aa6:	b08b      	sub	sp, #44	; 0x2c
	uint16_t nb_remain;
	uint8_t i;
	uint8_t *ptr_src;
	irqflags_t flags;

	if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
  400aa8:	4b75      	ldr	r3, [pc, #468]	; (400c80 <udd_ctrl_in_sent+0x1dc>)
  400aaa:	781b      	ldrb	r3, [r3, #0]
  400aac:	2b03      	cmp	r3, #3
  400aae:	d11d      	bne.n	400aec <udd_ctrl_in_sent+0x48>
		// Ack
		udd_ack_in_sent(0);
  400ab0:	4a74      	ldr	r2, [pc, #464]	; (400c84 <udd_ctrl_in_sent+0x1e0>)
  400ab2:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400ab4:	9300      	str	r3, [sp, #0]
  400ab6:	9b00      	ldr	r3, [sp, #0]
  400ab8:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  400abc:	9300      	str	r3, [sp, #0]
  400abe:	9b00      	ldr	r3, [sp, #0]
  400ac0:	f023 0301 	bic.w	r3, r3, #1
  400ac4:	9300      	str	r3, [sp, #0]
  400ac6:	9b00      	ldr	r3, [sp, #0]
  400ac8:	6313      	str	r3, [r2, #48]	; 0x30
  400aca:	2300      	movs	r3, #0
  400acc:	9301      	str	r3, [sp, #4]
  400ace:	9b01      	ldr	r3, [sp, #4]
  400ad0:	2b13      	cmp	r3, #19
  400ad2:	d806      	bhi.n	400ae2 <udd_ctrl_in_sent+0x3e>
  400ad4:	bf00      	nop
  400ad6:	9b01      	ldr	r3, [sp, #4]
  400ad8:	3301      	adds	r3, #1
  400ada:	9301      	str	r3, [sp, #4]
  400adc:	9b01      	ldr	r3, [sp, #4]
  400ade:	2b13      	cmp	r3, #19
  400ae0:	d9f8      	bls.n	400ad4 <udd_ctrl_in_sent+0x30>
		// ZLP on IN is sent, then valid end of setup request
		udd_ctrl_endofrequest();
  400ae2:	4b69      	ldr	r3, [pc, #420]	; (400c88 <udd_ctrl_in_sent+0x1e4>)
  400ae4:	4798      	blx	r3
		// Reinitializes control endpoint management
		udd_ctrl_init();
  400ae6:	4b69      	ldr	r3, [pc, #420]	; (400c8c <udd_ctrl_in_sent+0x1e8>)
  400ae8:	4798      	blx	r3
		return;
  400aea:	e0c6      	b.n	400c7a <udd_ctrl_in_sent+0x1d6>
	}
	Assert(udd_ep_control_state == UDD_EPCTRL_DATA_IN);

	nb_remain = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
  400aec:	4b68      	ldr	r3, [pc, #416]	; (400c90 <udd_ctrl_in_sent+0x1ec>)
  400aee:	881a      	ldrh	r2, [r3, #0]
  400af0:	4b68      	ldr	r3, [pc, #416]	; (400c94 <udd_ctrl_in_sent+0x1f0>)
  400af2:	899c      	ldrh	r4, [r3, #12]
  400af4:	1aa4      	subs	r4, r4, r2
  400af6:	b2a4      	uxth	r4, r4
	if (0 == nb_remain) {
  400af8:	2c00      	cmp	r4, #0
  400afa:	d133      	bne.n	400b64 <udd_ctrl_in_sent+0xc0>
		// All content of current buffer payload are sent
		// Update number of total data sending by previous payload buffer
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
  400afc:	4966      	ldr	r1, [pc, #408]	; (400c98 <udd_ctrl_in_sent+0x1f4>)
  400afe:	880b      	ldrh	r3, [r1, #0]
  400b00:	4413      	add	r3, r2
  400b02:	b29b      	uxth	r3, r3
  400b04:	800b      	strh	r3, [r1, #0]
		if ((udd_g_ctrlreq.req.wLength == udd_ctrl_prev_payload_nb_trans)
  400b06:	4a63      	ldr	r2, [pc, #396]	; (400c94 <udd_ctrl_in_sent+0x1f0>)
  400b08:	88d2      	ldrh	r2, [r2, #6]
  400b0a:	429a      	cmp	r2, r3
  400b0c:	d002      	beq.n	400b14 <udd_ctrl_in_sent+0x70>
				|| b_shortpacket) {
  400b0e:	4b63      	ldr	r3, [pc, #396]	; (400c9c <udd_ctrl_in_sent+0x1f8>)
  400b10:	781b      	ldrb	r3, [r3, #0]
  400b12:	b1eb      	cbz	r3, 400b50 <udd_ctrl_in_sent+0xac>
}


static void udd_ctrl_send_zlp_out(void)
{
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
  400b14:	2204      	movs	r2, #4
  400b16:	4b5a      	ldr	r3, [pc, #360]	; (400c80 <udd_ctrl_in_sent+0x1dc>)
  400b18:	701a      	strb	r2, [r3, #0]
				|| b_shortpacket) {
			// All data requested are transfered or a short packet has been sent
			// then it is the end of data phase.
			// Generate an OUT ZLP for handshake phase.
			udd_ctrl_send_zlp_out();
			udd_ack_in_sent(0);
  400b1a:	4a5a      	ldr	r2, [pc, #360]	; (400c84 <udd_ctrl_in_sent+0x1e0>)
  400b1c:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400b1e:	9302      	str	r3, [sp, #8]
  400b20:	9b02      	ldr	r3, [sp, #8]
  400b22:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  400b26:	9302      	str	r3, [sp, #8]
  400b28:	9b02      	ldr	r3, [sp, #8]
  400b2a:	f023 0301 	bic.w	r3, r3, #1
  400b2e:	9302      	str	r3, [sp, #8]
  400b30:	9b02      	ldr	r3, [sp, #8]
  400b32:	6313      	str	r3, [r2, #48]	; 0x30
  400b34:	2300      	movs	r3, #0
  400b36:	9303      	str	r3, [sp, #12]
  400b38:	9b03      	ldr	r3, [sp, #12]
  400b3a:	2b13      	cmp	r3, #19
  400b3c:	f200 809d 	bhi.w	400c7a <udd_ctrl_in_sent+0x1d6>
  400b40:	bf00      	nop
  400b42:	9b03      	ldr	r3, [sp, #12]
  400b44:	3301      	adds	r3, #1
  400b46:	9303      	str	r3, [sp, #12]
  400b48:	9b03      	ldr	r3, [sp, #12]
  400b4a:	2b13      	cmp	r3, #19
  400b4c:	d9f8      	bls.n	400b40 <udd_ctrl_in_sent+0x9c>
  400b4e:	e094      	b.n	400c7a <udd_ctrl_in_sent+0x1d6>
			return;
		}
		// Need of new buffer because the data phase is not complete
		if ((!udd_g_ctrlreq.over_under_run)
  400b50:	4b50      	ldr	r3, [pc, #320]	; (400c94 <udd_ctrl_in_sent+0x1f0>)
  400b52:	695b      	ldr	r3, [r3, #20]
  400b54:	b16b      	cbz	r3, 400b72 <udd_ctrl_in_sent+0xce>
				|| (!udd_g_ctrlreq.over_under_run())) {
  400b56:	4798      	blx	r3
  400b58:	b158      	cbz	r0, 400b72 <udd_ctrl_in_sent+0xce>
			// Underrun then send zlp on IN
			// Here nb_remain=0 and allows to send a IN ZLP
		} else {
			// A new payload buffer is given
			udd_ctrl_payload_nb_trans = 0;
  400b5a:	2200      	movs	r2, #0
  400b5c:	4b4c      	ldr	r3, [pc, #304]	; (400c90 <udd_ctrl_in_sent+0x1ec>)
  400b5e:	801a      	strh	r2, [r3, #0]
			nb_remain = udd_g_ctrlreq.payload_size;
  400b60:	4b4c      	ldr	r3, [pc, #304]	; (400c94 <udd_ctrl_in_sent+0x1f0>)
  400b62:	899c      	ldrh	r4, [r3, #12]
		}
	}
	// Continue transfer and send next data
	if (nb_remain >= USB_DEVICE_EP_CTRL_SIZE) {
  400b64:	2c3f      	cmp	r4, #63	; 0x3f
  400b66:	d904      	bls.n	400b72 <udd_ctrl_in_sent+0xce>
		nb_remain = USB_DEVICE_EP_CTRL_SIZE;
		b_shortpacket = false;
  400b68:	2200      	movs	r2, #0
  400b6a:	4b4c      	ldr	r3, [pc, #304]	; (400c9c <udd_ctrl_in_sent+0x1f8>)
  400b6c:	701a      	strb	r2, [r3, #0]
			nb_remain = udd_g_ctrlreq.payload_size;
		}
	}
	// Continue transfer and send next data
	if (nb_remain >= USB_DEVICE_EP_CTRL_SIZE) {
		nb_remain = USB_DEVICE_EP_CTRL_SIZE;
  400b6e:	2440      	movs	r4, #64	; 0x40
  400b70:	e002      	b.n	400b78 <udd_ctrl_in_sent+0xd4>
		b_shortpacket = false;
	} else {
		b_shortpacket = true;
  400b72:	2201      	movs	r2, #1
  400b74:	4b49      	ldr	r3, [pc, #292]	; (400c9c <udd_ctrl_in_sent+0x1f8>)
  400b76:	701a      	strb	r2, [r3, #0]
	}
	// Fill buffer of endpoint control
	ptr_src = udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans;
  400b78:	4b46      	ldr	r3, [pc, #280]	; (400c94 <udd_ctrl_in_sent+0x1f0>)
  400b7a:	6899      	ldr	r1, [r3, #8]
  400b7c:	4b44      	ldr	r3, [pc, #272]	; (400c90 <udd_ctrl_in_sent+0x1ec>)
  400b7e:	881b      	ldrh	r3, [r3, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  400b80:	f3ef 8010 	mrs	r0, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
  400b84:	fab0 f080 	clz	r0, r0
  400b88:	0940      	lsrs	r0, r0, #5
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
  400b8a:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  400b8c:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  400b90:	2500      	movs	r5, #0
  400b92:	4a43      	ldr	r2, [pc, #268]	; (400ca0 <udd_ctrl_in_sent+0x1fc>)
  400b94:	7015      	strb	r5, [r2, #0]
	// a next setup reception in same endpoint 0 DPRAM.
	// Thereby, an OUT ZLP reception must check before IN data write
	// and if no OUT ZLP is received the data must be written quickly (800us)
	// before an eventually ZLP OUT and SETUP reception
	flags = cpu_irq_save();
	if (Is_udd_bank0_received(0)) {
  400b96:	4a3b      	ldr	r2, [pc, #236]	; (400c84 <udd_ctrl_in_sent+0x1e0>)
  400b98:	6b12      	ldr	r2, [r2, #48]	; 0x30
  400b9a:	f012 0f02 	tst.w	r2, #2
  400b9e:	d101      	bne.n	400ba4 <udd_ctrl_in_sent+0x100>
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
		udd_ack_in_sent(0);
		return; // Exit of IN DATA phase
	}
	// Write quickly the IN data
	for (i = 0; i < nb_remain; i++) {
  400ba0:	bb24      	cbnz	r4, 400bec <udd_ctrl_in_sent+0x148>
  400ba2:	e02d      	b.n	400c00 <udd_ctrl_in_sent+0x15c>
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  400ba4:	b128      	cbz	r0, 400bb2 <udd_ctrl_in_sent+0x10e>
		cpu_irq_enable();
  400ba6:	2201      	movs	r2, #1
  400ba8:	4b3d      	ldr	r3, [pc, #244]	; (400ca0 <udd_ctrl_in_sent+0x1fc>)
  400baa:	701a      	strb	r2, [r3, #0]
  400bac:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
  400bb0:	b662      	cpsie	i
	// before an eventually ZLP OUT and SETUP reception
	flags = cpu_irq_save();
	if (Is_udd_bank0_received(0)) {
		// IN DATA phase aborted by OUT ZLP
		cpu_irq_restore(flags);
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
  400bb2:	2204      	movs	r2, #4
  400bb4:	4b32      	ldr	r3, [pc, #200]	; (400c80 <udd_ctrl_in_sent+0x1dc>)
  400bb6:	701a      	strb	r2, [r3, #0]
		udd_ack_in_sent(0);
  400bb8:	4a32      	ldr	r2, [pc, #200]	; (400c84 <udd_ctrl_in_sent+0x1e0>)
  400bba:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400bbc:	9304      	str	r3, [sp, #16]
  400bbe:	9b04      	ldr	r3, [sp, #16]
  400bc0:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  400bc4:	9304      	str	r3, [sp, #16]
  400bc6:	9b04      	ldr	r3, [sp, #16]
  400bc8:	f023 0301 	bic.w	r3, r3, #1
  400bcc:	9304      	str	r3, [sp, #16]
  400bce:	9b04      	ldr	r3, [sp, #16]
  400bd0:	6313      	str	r3, [r2, #48]	; 0x30
  400bd2:	2300      	movs	r3, #0
  400bd4:	9305      	str	r3, [sp, #20]
  400bd6:	9b05      	ldr	r3, [sp, #20]
  400bd8:	2b13      	cmp	r3, #19
  400bda:	d84e      	bhi.n	400c7a <udd_ctrl_in_sent+0x1d6>

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
  400bdc:	bf00      	nop
  400bde:	9b05      	ldr	r3, [sp, #20]
  400be0:	3301      	adds	r3, #1
  400be2:	9305      	str	r3, [sp, #20]
  400be4:	9b05      	ldr	r3, [sp, #20]
  400be6:	2b13      	cmp	r3, #19
  400be8:	d9f8      	bls.n	400bdc <udd_ctrl_in_sent+0x138>
  400bea:	e046      	b.n	400c7a <udd_ctrl_in_sent+0x1d6>
		b_shortpacket = false;
	} else {
		b_shortpacket = true;
	}
	// Fill buffer of endpoint control
	ptr_src = udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans;
  400bec:	4419      	add	r1, r3
  400bee:	460a      	mov	r2, r1
		udd_ack_in_sent(0);
		return; // Exit of IN DATA phase
	}
	// Write quickly the IN data
	for (i = 0; i < nb_remain; i++) {
		udd_endpoint_fifo_write(0, *ptr_src++);
  400bf0:	4d24      	ldr	r5, [pc, #144]	; (400c84 <udd_ctrl_in_sent+0x1e0>)
  400bf2:	f812 3b01 	ldrb.w	r3, [r2], #1
  400bf6:	652b      	str	r3, [r5, #80]	; 0x50
  400bf8:	1a53      	subs	r3, r2, r1
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
		udd_ack_in_sent(0);
		return; // Exit of IN DATA phase
	}
	// Write quickly the IN data
	for (i = 0; i < nb_remain; i++) {
  400bfa:	b2db      	uxtb	r3, r3
  400bfc:	42a3      	cmp	r3, r4
  400bfe:	d3f8      	bcc.n	400bf2 <udd_ctrl_in_sent+0x14e>
		udd_endpoint_fifo_write(0, *ptr_src++);
	}
	udd_ctrl_payload_nb_trans += nb_remain;
  400c00:	4a23      	ldr	r2, [pc, #140]	; (400c90 <udd_ctrl_in_sent+0x1ec>)
  400c02:	8813      	ldrh	r3, [r2, #0]
  400c04:	441c      	add	r4, r3
  400c06:	8014      	strh	r4, [r2, #0]
	// Validate and send the data available in the control endpoint buffer
	udd_set_transmit_ready(0);
  400c08:	4a1e      	ldr	r2, [pc, #120]	; (400c84 <udd_ctrl_in_sent+0x1e0>)
  400c0a:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400c0c:	9306      	str	r3, [sp, #24]
  400c0e:	9b06      	ldr	r3, [sp, #24]
  400c10:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  400c14:	9306      	str	r3, [sp, #24]
  400c16:	9b06      	ldr	r3, [sp, #24]
  400c18:	f043 0310 	orr.w	r3, r3, #16
  400c1c:	9306      	str	r3, [sp, #24]
  400c1e:	9b06      	ldr	r3, [sp, #24]
  400c20:	6313      	str	r3, [r2, #48]	; 0x30
  400c22:	2300      	movs	r3, #0
  400c24:	9307      	str	r3, [sp, #28]
  400c26:	9b07      	ldr	r3, [sp, #28]
  400c28:	2b13      	cmp	r3, #19
  400c2a:	d806      	bhi.n	400c3a <udd_ctrl_in_sent+0x196>
  400c2c:	bf00      	nop
  400c2e:	9b07      	ldr	r3, [sp, #28]
  400c30:	3301      	adds	r3, #1
  400c32:	9307      	str	r3, [sp, #28]
  400c34:	9b07      	ldr	r3, [sp, #28]
  400c36:	2b13      	cmp	r3, #19
  400c38:	d9f8      	bls.n	400c2c <udd_ctrl_in_sent+0x188>
	udd_ack_in_sent(0);
  400c3a:	4a12      	ldr	r2, [pc, #72]	; (400c84 <udd_ctrl_in_sent+0x1e0>)
  400c3c:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400c3e:	9308      	str	r3, [sp, #32]
  400c40:	9b08      	ldr	r3, [sp, #32]
  400c42:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  400c46:	9308      	str	r3, [sp, #32]
  400c48:	9b08      	ldr	r3, [sp, #32]
  400c4a:	f023 0301 	bic.w	r3, r3, #1
  400c4e:	9308      	str	r3, [sp, #32]
  400c50:	9b08      	ldr	r3, [sp, #32]
  400c52:	6313      	str	r3, [r2, #48]	; 0x30
  400c54:	2300      	movs	r3, #0
  400c56:	9309      	str	r3, [sp, #36]	; 0x24
  400c58:	9b09      	ldr	r3, [sp, #36]	; 0x24
  400c5a:	2b13      	cmp	r3, #19
  400c5c:	d806      	bhi.n	400c6c <udd_ctrl_in_sent+0x1c8>
  400c5e:	bf00      	nop
  400c60:	9b09      	ldr	r3, [sp, #36]	; 0x24
  400c62:	3301      	adds	r3, #1
  400c64:	9309      	str	r3, [sp, #36]	; 0x24
  400c66:	9b09      	ldr	r3, [sp, #36]	; 0x24
  400c68:	2b13      	cmp	r3, #19
  400c6a:	d9f8      	bls.n	400c5e <udd_ctrl_in_sent+0x1ba>
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  400c6c:	b128      	cbz	r0, 400c7a <udd_ctrl_in_sent+0x1d6>
		cpu_irq_enable();
  400c6e:	2201      	movs	r2, #1
  400c70:	4b0b      	ldr	r3, [pc, #44]	; (400ca0 <udd_ctrl_in_sent+0x1fc>)
  400c72:	701a      	strb	r2, [r3, #0]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  400c74:	f3bf 8f5f 	dmb	sy
  400c78:	b662      	cpsie	i

	// In case of abort of DATA IN phase, no need to enable nak OUT interrupt
	// because OUT endpoint is already free and ZLP OUT accepted.
	cpu_irq_restore(flags);
}
  400c7a:	b00b      	add	sp, #44	; 0x2c
  400c7c:	bd30      	pop	{r4, r5, pc}
  400c7e:	bf00      	nop
  400c80:	20000a25 	.word	0x20000a25
  400c84:	40034000 	.word	0x40034000
  400c88:	00400a95 	.word	0x00400a95
  400c8c:	004009ed 	.word	0x004009ed
  400c90:	20000a22 	.word	0x20000a22
  400c94:	20000a80 	.word	0x20000a80
  400c98:	200009a4 	.word	0x200009a4
  400c9c:	20000a24 	.word	0x20000a24
  400ca0:	200000ac 	.word	0x200000ac

00400ca4 <udd_ep_finish_job>:
}


static void udd_ep_finish_job(udd_ep_job_t * ptr_job, int status,
		uint8_t ep_num)
{
  400ca4:	b538      	push	{r3, r4, r5, lr}
  400ca6:	4603      	mov	r3, r0
	if (ptr_job->busy == false) {
  400ca8:	7c44      	ldrb	r4, [r0, #17]
  400caa:	f014 0f10 	tst.w	r4, #16
  400cae:	d015      	beq.n	400cdc <udd_ep_finish_job+0x38>
		return; // No on-going job
	}
	ptr_job->busy = false;
  400cb0:	7c44      	ldrb	r4, [r0, #17]
  400cb2:	f36f 1404 	bfc	r4, #4, #1
  400cb6:	7444      	strb	r4, [r0, #17]
	if (NULL == ptr_job->call_trans) {
  400cb8:	6805      	ldr	r5, [r0, #0]
  400cba:	b17d      	cbz	r5, 400cdc <udd_ep_finish_job+0x38>
		return; // No callback linked to job
	}
	if (Is_udd_endpoint_type_in(ep_num)) {
  400cbc:	f102 040c 	add.w	r4, r2, #12
  400cc0:	4807      	ldr	r0, [pc, #28]	; (400ce0 <udd_ep_finish_job+0x3c>)
  400cc2:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
  400cc6:	f410 6f80 	tst.w	r0, #1024	; 0x400
		ep_num |= USB_EP_DIR_IN;
  400cca:	bf18      	it	ne
  400ccc:	f042 0280 	orrne.w	r2, r2, #128	; 0x80
	}	
	ptr_job->call_trans((status == UDD_EP_TRANSFER_ABORT) ?
  400cd0:	2901      	cmp	r1, #1
  400cd2:	bf14      	ite	ne
  400cd4:	2000      	movne	r0, #0
  400cd6:	2001      	moveq	r0, #1
  400cd8:	6899      	ldr	r1, [r3, #8]
  400cda:	47a8      	blx	r5
  400cdc:	bd38      	pop	{r3, r4, r5, pc}
  400cde:	bf00      	nop
  400ce0:	40034000 	.word	0x40034000

00400ce4 <udd_ep_ack_out_received>:
		UDD_EP_TRANSFER_ABORT : UDD_EP_TRANSFER_OK, ptr_job->buf_size, ep_num);
}


static void udd_ep_ack_out_received(udd_ep_id_t ep)
{
  400ce4:	b430      	push	{r4, r5}
  400ce6:	b084      	sub	sp, #16
	bool bank0_received, bank1_received;
	udd_ep_job_t *ptr_job = &udd_ep_job[ep - 1];
  400ce8:	1e42      	subs	r2, r0, #1
  400cea:	0083      	lsls	r3, r0, #2
  400cec:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
  400cf0:	f503 3340 	add.w	r3, r3, #196608	; 0x30000

	bank0_received = Is_udd_bank0_received(ep);
  400cf4:	6b19      	ldr	r1, [r3, #48]	; 0x30
	bank1_received = Is_udd_bank1_received(ep);
  400cf6:	6b1c      	ldr	r4, [r3, #48]	; 0x30

	if (bank0_received && bank1_received) {
  400cf8:	f011 0f02 	tst.w	r1, #2
  400cfc:	d00c      	beq.n	400d18 <udd_ep_ack_out_received+0x34>
  400cfe:	f014 0f40 	tst.w	r4, #64	; 0x40
  400d02:	d113      	bne.n	400d2c <udd_ep_ack_out_received+0x48>
		// The only way is to use ptr_job->bank
	} else if (bank0_received) {
		// Must be bank0
		ptr_job->bank = 0;
  400d04:	eb02 0182 	add.w	r1, r2, r2, lsl #2
  400d08:	4c32      	ldr	r4, [pc, #200]	; (400dd4 <udd_ep_ack_out_received+0xf0>)
  400d0a:	eb04 0181 	add.w	r1, r4, r1, lsl #2
  400d0e:	7c4c      	ldrb	r4, [r1, #17]
  400d10:	f36f 0483 	bfc	r4, #2, #2
  400d14:	744c      	strb	r4, [r1, #17]
  400d16:	e009      	b.n	400d2c <udd_ep_ack_out_received+0x48>
	} else {
		// Must be bank1
		ptr_job->bank = 1;
  400d18:	eb02 0182 	add.w	r1, r2, r2, lsl #2
  400d1c:	4c2d      	ldr	r4, [pc, #180]	; (400dd4 <udd_ep_ack_out_received+0xf0>)
  400d1e:	eb04 0181 	add.w	r1, r4, r1, lsl #2
  400d22:	7c4c      	ldrb	r4, [r1, #17]
  400d24:	2501      	movs	r5, #1
  400d26:	f365 0483 	bfi	r4, r5, #2, #2
  400d2a:	744c      	strb	r4, [r1, #17]
	}
	if (ptr_job->bank == 0) {
  400d2c:	eb02 0182 	add.w	r1, r2, r2, lsl #2
  400d30:	4c28      	ldr	r4, [pc, #160]	; (400dd4 <udd_ep_ack_out_received+0xf0>)
  400d32:	eb04 0181 	add.w	r1, r4, r1, lsl #2
  400d36:	7c49      	ldrb	r1, [r1, #17]
  400d38:	f011 0f0c 	tst.w	r1, #12
  400d3c:	d125      	bne.n	400d8a <udd_ep_ack_out_received+0xa6>
		udd_ack_bank0_received(ep);
  400d3e:	6b19      	ldr	r1, [r3, #48]	; 0x30
  400d40:	9100      	str	r1, [sp, #0]
  400d42:	9900      	ldr	r1, [sp, #0]
  400d44:	f041 014f 	orr.w	r1, r1, #79	; 0x4f
  400d48:	9100      	str	r1, [sp, #0]
  400d4a:	9900      	ldr	r1, [sp, #0]
  400d4c:	f021 0102 	bic.w	r1, r1, #2
  400d50:	9100      	str	r1, [sp, #0]
  400d52:	9900      	ldr	r1, [sp, #0]
  400d54:	6319      	str	r1, [r3, #48]	; 0x30
  400d56:	2300      	movs	r3, #0
  400d58:	9301      	str	r3, [sp, #4]
  400d5a:	9b01      	ldr	r3, [sp, #4]
  400d5c:	2b13      	cmp	r3, #19
  400d5e:	d806      	bhi.n	400d6e <udd_ep_ack_out_received+0x8a>

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
  400d60:	bf00      	nop
  400d62:	9b01      	ldr	r3, [sp, #4]
  400d64:	3301      	adds	r3, #1
  400d66:	9301      	str	r3, [sp, #4]
  400d68:	9b01      	ldr	r3, [sp, #4]
  400d6a:	2b13      	cmp	r3, #19
  400d6c:	d9f8      	bls.n	400d60 <udd_ep_ack_out_received+0x7c>
		if (udd_get_endpoint_bank_max_nbr(ep) > 1) {
  400d6e:	b368      	cbz	r0, 400dcc <udd_ep_ack_out_received+0xe8>
  400d70:	2803      	cmp	r0, #3
  400d72:	d02b      	beq.n	400dcc <udd_ep_ack_out_received+0xe8>
			ptr_job->bank = 1;
  400d74:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  400d78:	4b16      	ldr	r3, [pc, #88]	; (400dd4 <udd_ep_ack_out_received+0xf0>)
  400d7a:	eb03 0382 	add.w	r3, r3, r2, lsl #2
  400d7e:	7c5a      	ldrb	r2, [r3, #17]
  400d80:	2101      	movs	r1, #1
  400d82:	f361 0283 	bfi	r2, r1, #2, #2
  400d86:	745a      	strb	r2, [r3, #17]
  400d88:	e020      	b.n	400dcc <udd_ep_ack_out_received+0xe8>
		}
	} else {
		udd_ack_bank1_received(ep);
  400d8a:	6b19      	ldr	r1, [r3, #48]	; 0x30
  400d8c:	9102      	str	r1, [sp, #8]
  400d8e:	9902      	ldr	r1, [sp, #8]
  400d90:	f041 014f 	orr.w	r1, r1, #79	; 0x4f
  400d94:	9102      	str	r1, [sp, #8]
  400d96:	9902      	ldr	r1, [sp, #8]
  400d98:	f021 0140 	bic.w	r1, r1, #64	; 0x40
  400d9c:	9102      	str	r1, [sp, #8]
  400d9e:	9902      	ldr	r1, [sp, #8]
  400da0:	6319      	str	r1, [r3, #48]	; 0x30
  400da2:	2300      	movs	r3, #0
  400da4:	9303      	str	r3, [sp, #12]
  400da6:	9b03      	ldr	r3, [sp, #12]
  400da8:	2b13      	cmp	r3, #19
  400daa:	d806      	bhi.n	400dba <udd_ep_ack_out_received+0xd6>
  400dac:	bf00      	nop
  400dae:	9b03      	ldr	r3, [sp, #12]
  400db0:	3301      	adds	r3, #1
  400db2:	9303      	str	r3, [sp, #12]
  400db4:	9b03      	ldr	r3, [sp, #12]
  400db6:	2b13      	cmp	r3, #19
  400db8:	d9f8      	bls.n	400dac <udd_ep_ack_out_received+0xc8>
		ptr_job->bank = 0;
  400dba:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  400dbe:	4b05      	ldr	r3, [pc, #20]	; (400dd4 <udd_ep_ack_out_received+0xf0>)
  400dc0:	eb03 0282 	add.w	r2, r3, r2, lsl #2
  400dc4:	7c53      	ldrb	r3, [r2, #17]
  400dc6:	f36f 0383 	bfc	r3, #2, #2
  400dca:	7453      	strb	r3, [r2, #17]
	}
}
  400dcc:	b004      	add	sp, #16
  400dce:	bc30      	pop	{r4, r5}
  400dd0:	4770      	bx	lr
  400dd2:	bf00      	nop
  400dd4:	200009a8 	.word	0x200009a8

00400dd8 <udd_ep_in_sent>:
	return is_short_pkt;
}


static bool udd_ep_in_sent(udd_ep_id_t ep, bool b_tx)
{
  400dd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400ddc:	b082      	sub	sp, #8
  400dde:	4688      	mov	r8, r1
	bool b_shortpacket;
	udd_ep_job_t *ptr_job = &udd_ep_job[ep - 1];
  400de0:	4684      	mov	ip, r0
  400de2:	1e46      	subs	r6, r0, #1

	// All banks are full
	if (ptr_job->bank >= udd_get_endpoint_bank_max_nbr(ep)) {
  400de4:	eb06 0286 	add.w	r2, r6, r6, lsl #2
  400de8:	4b69      	ldr	r3, [pc, #420]	; (400f90 <udd_ep_in_sent+0x1b8>)
  400dea:	eb03 0382 	add.w	r3, r3, r2, lsl #2
  400dee:	7c5b      	ldrb	r3, [r3, #17]
  400df0:	f3c3 0381 	ubfx	r3, r3, #2, #2
  400df4:	b120      	cbz	r0, 400e00 <udd_ep_in_sent+0x28>
  400df6:	2803      	cmp	r0, #3
  400df8:	bf0c      	ite	eq
  400dfa:	2201      	moveq	r2, #1
  400dfc:	2202      	movne	r2, #2
  400dfe:	e000      	b.n	400e02 <udd_ep_in_sent+0x2a>
  400e00:	2201      	movs	r2, #1
  400e02:	429a      	cmp	r2, r3
  400e04:	f340 80b9 	ble.w	400f7a <udd_ep_in_sent+0x1a2>
		return true; // Data pending
	}

	// No more data in buffer
	if (ptr_job->buf_cnt >= ptr_job->buf_size && !ptr_job->b_shortpacket) {
  400e08:	eb06 0386 	add.w	r3, r6, r6, lsl #2
  400e0c:	4a60      	ldr	r2, [pc, #384]	; (400f90 <udd_ep_in_sent+0x1b8>)
  400e0e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  400e12:	68da      	ldr	r2, [r3, #12]
  400e14:	689b      	ldr	r3, [r3, #8]
  400e16:	429a      	cmp	r2, r3
  400e18:	d309      	bcc.n	400e2e <udd_ep_in_sent+0x56>
  400e1a:	eb06 0186 	add.w	r1, r6, r6, lsl #2
  400e1e:	4c5c      	ldr	r4, [pc, #368]	; (400f90 <udd_ep_in_sent+0x1b8>)
  400e20:	eb04 0181 	add.w	r1, r4, r1, lsl #2
  400e24:	7c49      	ldrb	r1, [r1, #17]
  400e26:	f011 0f40 	tst.w	r1, #64	; 0x40
  400e2a:	f000 80a8 	beq.w	400f7e <udd_ep_in_sent+0x1a6>


static bool udd_ep_write_fifo(udd_ep_id_t ep)
{
	udd_ep_job_t *ptr_job = &udd_ep_job[ep - 1];
	uint8_t *ptr_src = &ptr_job->buf[ptr_job->buf_cnt];
  400e2e:	eb06 0586 	add.w	r5, r6, r6, lsl #2
  400e32:	4957      	ldr	r1, [pc, #348]	; (400f90 <udd_ep_in_sent+0x1b8>)
  400e34:	eb01 0585 	add.w	r5, r1, r5, lsl #2
  400e38:	686c      	ldr	r4, [r5, #4]
  400e3a:	4414      	add	r4, r2
	uint32_t nb_remain = ptr_job->buf_size - ptr_job->buf_cnt;
  400e3c:	1a99      	subs	r1, r3, r2
	uint32_t pkt_size = ptr_job->size;
  400e3e:	8a2b      	ldrh	r3, [r5, #16]
  400e40:	f3c3 0709 	ubfx	r7, r3, #0, #10
	bool is_short_pkt = false;

	// Packet size
	if (nb_remain < pkt_size) {
  400e44:	42b9      	cmp	r1, r7
		pkt_size = nb_remain;
  400e46:	bf3a      	itte	cc
  400e48:	460f      	movcc	r7, r1
		is_short_pkt = true;
  400e4a:	f04f 0e01 	movcc.w	lr, #1
{
	udd_ep_job_t *ptr_job = &udd_ep_job[ep - 1];
	uint8_t *ptr_src = &ptr_job->buf[ptr_job->buf_cnt];
	uint32_t nb_remain = ptr_job->buf_size - ptr_job->buf_cnt;
	uint32_t pkt_size = ptr_job->size;
	bool is_short_pkt = false;
  400e4e:	f04f 0e00 	movcs.w	lr, #0
		pkt_size = nb_remain;
		is_short_pkt = true;
	}

	// Modify job information
	ptr_job->buf_cnt += pkt_size;
  400e52:	eb06 0386 	add.w	r3, r6, r6, lsl #2
  400e56:	494e      	ldr	r1, [pc, #312]	; (400f90 <udd_ep_in_sent+0x1b8>)
  400e58:	eb01 0383 	add.w	r3, r1, r3, lsl #2
  400e5c:	443a      	add	r2, r7
  400e5e:	60da      	str	r2, [r3, #12]

	// Speed block data transfer to FIFO (DPRAM)
	for (; pkt_size >= 8; pkt_size -= 8) {
  400e60:	2f07      	cmp	r7, #7
  400e62:	d92b      	bls.n	400ebc <udd_ep_in_sent+0xe4>
  400e64:	f104 0308 	add.w	r3, r4, #8
  400e68:	463d      	mov	r5, r7
  400e6a:	0082      	lsls	r2, r0, #2
  400e6c:	f102 2240 	add.w	r2, r2, #1073758208	; 0x40004000
  400e70:	f502 3240 	add.w	r2, r2, #196608	; 0x30000
		udd_endpoint_fifo_write(ep, *ptr_src++);
  400e74:	f813 1c08 	ldrb.w	r1, [r3, #-8]
  400e78:	6511      	str	r1, [r2, #80]	; 0x50
		udd_endpoint_fifo_write(ep, *ptr_src++);
  400e7a:	f813 1c07 	ldrb.w	r1, [r3, #-7]
  400e7e:	6511      	str	r1, [r2, #80]	; 0x50
		udd_endpoint_fifo_write(ep, *ptr_src++);
  400e80:	f813 1c06 	ldrb.w	r1, [r3, #-6]
  400e84:	6511      	str	r1, [r2, #80]	; 0x50
		udd_endpoint_fifo_write(ep, *ptr_src++);
  400e86:	f813 1c05 	ldrb.w	r1, [r3, #-5]
  400e8a:	6511      	str	r1, [r2, #80]	; 0x50
		udd_endpoint_fifo_write(ep, *ptr_src++);
  400e8c:	f813 1c04 	ldrb.w	r1, [r3, #-4]
  400e90:	6511      	str	r1, [r2, #80]	; 0x50
		udd_endpoint_fifo_write(ep, *ptr_src++);
  400e92:	f813 1c03 	ldrb.w	r1, [r3, #-3]
  400e96:	6511      	str	r1, [r2, #80]	; 0x50
		udd_endpoint_fifo_write(ep, *ptr_src++);
  400e98:	f813 1c02 	ldrb.w	r1, [r3, #-2]
  400e9c:	6511      	str	r1, [r2, #80]	; 0x50
		udd_endpoint_fifo_write(ep, *ptr_src++);
  400e9e:	f813 1c01 	ldrb.w	r1, [r3, #-1]
  400ea2:	6511      	str	r1, [r2, #80]	; 0x50

	// Modify job information
	ptr_job->buf_cnt += pkt_size;

	// Speed block data transfer to FIFO (DPRAM)
	for (; pkt_size >= 8; pkt_size -= 8) {
  400ea4:	3d08      	subs	r5, #8
  400ea6:	3308      	adds	r3, #8
  400ea8:	2d07      	cmp	r5, #7
  400eaa:	d8e3      	bhi.n	400e74 <udd_ep_in_sent+0x9c>
  400eac:	f1a7 0308 	sub.w	r3, r7, #8
  400eb0:	f023 0307 	bic.w	r3, r3, #7
  400eb4:	3308      	adds	r3, #8
  400eb6:	441c      	add	r4, r3
  400eb8:	f007 0707 	and.w	r7, r7, #7
		udd_endpoint_fifo_write(ep, *ptr_src++);
		udd_endpoint_fifo_write(ep, *ptr_src++);
		udd_endpoint_fifo_write(ep, *ptr_src++);
	}
	// Normal speed data transfer to FIFO (DPRAM)
	for (; pkt_size; pkt_size--) {
  400ebc:	b14f      	cbz	r7, 400ed2 <udd_ep_in_sent+0xfa>
  400ebe:	19e3      	adds	r3, r4, r7
		udd_endpoint_fifo_write(ep, *ptr_src++);
  400ec0:	4934      	ldr	r1, [pc, #208]	; (400f94 <udd_ep_in_sent+0x1bc>)
  400ec2:	f814 5b01 	ldrb.w	r5, [r4], #1
  400ec6:	f10c 0214 	add.w	r2, ip, #20
  400eca:	f841 5022 	str.w	r5, [r1, r2, lsl #2]
		udd_endpoint_fifo_write(ep, *ptr_src++);
		udd_endpoint_fifo_write(ep, *ptr_src++);
		udd_endpoint_fifo_write(ep, *ptr_src++);
	}
	// Normal speed data transfer to FIFO (DPRAM)
	for (; pkt_size; pkt_size--) {
  400ece:	429c      	cmp	r4, r3
  400ed0:	d1f7      	bne.n	400ec2 <udd_ep_in_sent+0xea>
		udd_endpoint_fifo_write(ep, *ptr_src++);
	}

	// Add to buffered banks
	ptr_job->bank++;
  400ed2:	eb06 0386 	add.w	r3, r6, r6, lsl #2
  400ed6:	4a2e      	ldr	r2, [pc, #184]	; (400f90 <udd_ep_in_sent+0x1b8>)
  400ed8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  400edc:	7c5a      	ldrb	r2, [r3, #17]
  400ede:	f3c2 0181 	ubfx	r1, r2, #2, #2
  400ee2:	3101      	adds	r1, #1
  400ee4:	f361 0283 	bfi	r2, r1, #2, #2
  400ee8:	745a      	strb	r2, [r3, #17]

	// Fill FIFO
	b_shortpacket = udd_ep_write_fifo(ep);

	// Data is ready to send
	if (b_tx) {
  400eea:	f1b8 0f00 	cmp.w	r8, #0
  400eee:	d01c      	beq.n	400f2a <udd_ep_in_sent+0x152>
  400ef0:	0080      	lsls	r0, r0, #2
  400ef2:	f100 2040 	add.w	r0, r0, #1073758208	; 0x40004000
  400ef6:	f500 3040 	add.w	r0, r0, #196608	; 0x30000
		udd_set_transmit_ready(ep);
  400efa:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400efc:	9300      	str	r3, [sp, #0]
  400efe:	9b00      	ldr	r3, [sp, #0]
  400f00:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  400f04:	9300      	str	r3, [sp, #0]
  400f06:	9b00      	ldr	r3, [sp, #0]
  400f08:	f043 0310 	orr.w	r3, r3, #16
  400f0c:	9300      	str	r3, [sp, #0]
  400f0e:	9b00      	ldr	r3, [sp, #0]
  400f10:	6303      	str	r3, [r0, #48]	; 0x30
  400f12:	2300      	movs	r3, #0
  400f14:	9301      	str	r3, [sp, #4]
  400f16:	9b01      	ldr	r3, [sp, #4]
  400f18:	2b13      	cmp	r3, #19
  400f1a:	d806      	bhi.n	400f2a <udd_ep_in_sent+0x152>
  400f1c:	bf00      	nop
  400f1e:	9b01      	ldr	r3, [sp, #4]
  400f20:	3301      	adds	r3, #1
  400f22:	9301      	str	r3, [sp, #4]
  400f24:	9b01      	ldr	r3, [sp, #4]
  400f26:	2b13      	cmp	r3, #19
  400f28:	d9f8      	bls.n	400f1c <udd_ep_in_sent+0x144>
	}
	// Short PKT? no need to send it again.
	if (b_shortpacket) {
  400f2a:	f1be 0f00 	cmp.w	lr, #0
  400f2e:	d008      	beq.n	400f42 <udd_ep_in_sent+0x16a>
		ptr_job->b_shortpacket = false;
  400f30:	eb06 0386 	add.w	r3, r6, r6, lsl #2
  400f34:	4a16      	ldr	r2, [pc, #88]	; (400f90 <udd_ep_in_sent+0x1b8>)
  400f36:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  400f3a:	7c5a      	ldrb	r2, [r3, #17]
  400f3c:	f36f 1286 	bfc	r2, #6, #1
  400f40:	745a      	strb	r2, [r3, #17]
	}
	// All transfer done, including ZLP, Finish Job
	if ((ptr_job->buf_cnt >= ptr_job->buf_size)
  400f42:	eb06 0386 	add.w	r3, r6, r6, lsl #2
  400f46:	4a12      	ldr	r2, [pc, #72]	; (400f90 <udd_ep_in_sent+0x1b8>)
  400f48:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  400f4c:	68da      	ldr	r2, [r3, #12]
  400f4e:	689b      	ldr	r3, [r3, #8]
  400f50:	429a      	cmp	r2, r3
  400f52:	d316      	bcc.n	400f82 <udd_ep_in_sent+0x1aa>
			&& (!ptr_job->b_shortpacket)) {
  400f54:	eb06 0386 	add.w	r3, r6, r6, lsl #2
  400f58:	4a0d      	ldr	r2, [pc, #52]	; (400f90 <udd_ep_in_sent+0x1b8>)
  400f5a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  400f5e:	7c5b      	ldrb	r3, [r3, #17]
  400f60:	f013 0f40 	tst.w	r3, #64	; 0x40
  400f64:	d10f      	bne.n	400f86 <udd_ep_in_sent+0x1ae>
		ptr_job->b_buf_end = true;
  400f66:	eb06 0686 	add.w	r6, r6, r6, lsl #2
  400f6a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
  400f6e:	7c73      	ldrb	r3, [r6, #17]
  400f70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  400f74:	7473      	strb	r3, [r6, #17]
		return false;
  400f76:	2000      	movs	r0, #0
  400f78:	e006      	b.n	400f88 <udd_ep_in_sent+0x1b0>
	bool b_shortpacket;
	udd_ep_job_t *ptr_job = &udd_ep_job[ep - 1];

	// All banks are full
	if (ptr_job->bank >= udd_get_endpoint_bank_max_nbr(ep)) {
		return true; // Data pending
  400f7a:	2001      	movs	r0, #1
  400f7c:	e004      	b.n	400f88 <udd_ep_in_sent+0x1b0>
	}

	// No more data in buffer
	if (ptr_job->buf_cnt >= ptr_job->buf_size && !ptr_job->b_shortpacket) {
		return false;
  400f7e:	2000      	movs	r0, #0
  400f80:	e002      	b.n	400f88 <udd_ep_in_sent+0x1b0>
	if ((ptr_job->buf_cnt >= ptr_job->buf_size)
			&& (!ptr_job->b_shortpacket)) {
		ptr_job->b_buf_end = true;
		return false;
	}
	return true; // Pending
  400f82:	2001      	movs	r0, #1
  400f84:	e000      	b.n	400f88 <udd_ep_in_sent+0x1b0>
  400f86:	2001      	movs	r0, #1
}
  400f88:	b002      	add	sp, #8
  400f8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400f8e:	bf00      	nop
  400f90:	200009a8 	.word	0x200009a8
  400f94:	40034000 	.word	0x40034000

00400f98 <udd_sleep_mode>:
/*! \brief Authorize or not the CPU powerdown mode
 *
 * \param b_enable   true to authorize idle mode
 */
static void udd_sleep_mode(bool b_idle)
{
  400f98:	b410      	push	{r4}
	if (!b_idle && udd_b_idle) {
  400f9a:	4604      	mov	r4, r0
  400f9c:	2800      	cmp	r0, #0
  400f9e:	d135      	bne.n	40100c <udd_sleep_mode+0x74>
  400fa0:	4b1e      	ldr	r3, [pc, #120]	; (40101c <udd_sleep_mode+0x84>)
  400fa2:	781b      	ldrb	r3, [r3, #0]
  400fa4:	b37b      	cbz	r3, 401006 <udd_sleep_mode+0x6e>
static inline void sleepmgr_unlock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] == 0) {
  400fa6:	4b1e      	ldr	r3, [pc, #120]	; (401020 <udd_sleep_mode+0x88>)
  400fa8:	789b      	ldrb	r3, [r3, #2]
  400faa:	b903      	cbnz	r3, 400fae <udd_sleep_mode+0x16>
  400fac:	e7fe      	b.n	400fac <udd_sleep_mode+0x14>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  400fae:	f3ef 8310 	mrs	r3, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
  400fb2:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  400fb4:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
  400fb8:	2100      	movs	r1, #0
  400fba:	4a1a      	ldr	r2, [pc, #104]	; (401024 <udd_sleep_mode+0x8c>)
  400fbc:	7011      	strb	r1, [r2, #0]
	}

	// Enter a critical section
	flags = cpu_irq_save();

	--sleepmgr_locks[mode];
  400fbe:	4918      	ldr	r1, [pc, #96]	; (401020 <udd_sleep_mode+0x88>)
  400fc0:	788a      	ldrb	r2, [r1, #2]
  400fc2:	3a01      	subs	r2, #1
  400fc4:	708a      	strb	r2, [r1, #2]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  400fc6:	b9f3      	cbnz	r3, 401006 <udd_sleep_mode+0x6e>
		cpu_irq_enable();
  400fc8:	2201      	movs	r2, #1
  400fca:	4b16      	ldr	r3, [pc, #88]	; (401024 <udd_sleep_mode+0x8c>)
  400fcc:	701a      	strb	r2, [r3, #0]
  400fce:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
  400fd2:	b662      	cpsie	i
  400fd4:	e017      	b.n	401006 <udd_sleep_mode+0x6e>
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
  400fd6:	4b12      	ldr	r3, [pc, #72]	; (401020 <udd_sleep_mode+0x88>)
  400fd8:	789b      	ldrb	r3, [r3, #2]
  400fda:	2bff      	cmp	r3, #255	; 0xff
  400fdc:	d100      	bne.n	400fe0 <udd_sleep_mode+0x48>
  400fde:	e7fe      	b.n	400fde <udd_sleep_mode+0x46>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  400fe0:	f3ef 8310 	mrs	r3, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
  400fe4:	b672      	cpsid	i
  400fe6:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
  400fea:	2100      	movs	r1, #0
  400fec:	4a0d      	ldr	r2, [pc, #52]	; (401024 <udd_sleep_mode+0x8c>)
  400fee:	7011      	strb	r1, [r2, #0]
	}

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
  400ff0:	490b      	ldr	r1, [pc, #44]	; (401020 <udd_sleep_mode+0x88>)
  400ff2:	788a      	ldrb	r2, [r1, #2]
  400ff4:	3201      	adds	r2, #1
  400ff6:	708a      	strb	r2, [r1, #2]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  400ff8:	b92b      	cbnz	r3, 401006 <udd_sleep_mode+0x6e>
		cpu_irq_enable();
  400ffa:	2201      	movs	r2, #1
  400ffc:	4b09      	ldr	r3, [pc, #36]	; (401024 <udd_sleep_mode+0x8c>)
  400ffe:	701a      	strb	r2, [r3, #0]
  401000:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
  401004:	b662      	cpsie	i
		sleepmgr_unlock_mode(UDP_SLEEP_MODE_USB_IDLE);
	}
	if (b_idle && !udd_b_idle) {
		sleepmgr_lock_mode(UDP_SLEEP_MODE_USB_IDLE);
	}
	udd_b_idle = b_idle;
  401006:	4b05      	ldr	r3, [pc, #20]	; (40101c <udd_sleep_mode+0x84>)
  401008:	701c      	strb	r4, [r3, #0]
  40100a:	e004      	b.n	401016 <udd_sleep_mode+0x7e>
static void udd_sleep_mode(bool b_idle)
{
	if (!b_idle && udd_b_idle) {
		sleepmgr_unlock_mode(UDP_SLEEP_MODE_USB_IDLE);
	}
	if (b_idle && !udd_b_idle) {
  40100c:	4b03      	ldr	r3, [pc, #12]	; (40101c <udd_sleep_mode+0x84>)
  40100e:	781b      	ldrb	r3, [r3, #0]
  401010:	2b00      	cmp	r3, #0
  401012:	d1f8      	bne.n	401006 <udd_sleep_mode+0x6e>
  401014:	e7df      	b.n	400fd6 <udd_sleep_mode+0x3e>
		sleepmgr_lock_mode(UDP_SLEEP_MODE_USB_IDLE);
	}
	udd_b_idle = b_idle;
}
  401016:	f85d 4b04 	ldr.w	r4, [sp], #4
  40101a:	4770      	bx	lr
  40101c:	20000a20 	.word	0x20000a20
  401020:	20000a78 	.word	0x20000a78
  401024:	200000ac 	.word	0x200000ac

00401028 <UDP_Handler>:
 * - control endpoint events (setup reception, end of data transfer, underflow, overflow, stall)
 * - bulk/interrupt/isochronous endpoints events (end of data transfer)
 *
 */
ISR(UDD_USB_INT_FUN)
{
  401028:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40102c:	b0b1      	sub	sp, #196	; 0xc4
	/* For fast wakeup clocks restore
	 * In WAIT mode, clocks are switched to FASTRC.
	 * After wakeup clocks should be restored, before that ISR should not
	 * be served.
	 */
	if (!pmc_is_wakeup_clocks_restored() && !Is_udd_suspend()) {
  40102e:	4b95      	ldr	r3, [pc, #596]	; (401284 <UDP_Handler+0x25c>)
  401030:	4798      	blx	r3
  401032:	b960      	cbnz	r0, 40104e <UDP_Handler+0x26>
  401034:	4b94      	ldr	r3, [pc, #592]	; (401288 <UDP_Handler+0x260>)
  401036:	69db      	ldr	r3, [r3, #28]
  401038:	f413 7f80 	tst.w	r3, #256	; 0x100
  40103c:	d107      	bne.n	40104e <UDP_Handler+0x26>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
  40103e:	b672      	cpsid	i
  401040:	f3bf 8f5f 	dmb	sy
		cpu_irq_disable();
  401044:	2200      	movs	r2, #0
  401046:	4b91      	ldr	r3, [pc, #580]	; (40128c <UDP_Handler+0x264>)
  401048:	701a      	strb	r2, [r3, #0]
		return;
  40104a:	f000 bd52 	b.w	401af2 <UDP_Handler+0xaca>
	}

	/* The UDP peripheral clock in the Power Management Controller (PMC)
	   must be enabled before any read/write operations to the UDP registers
	   including the UDP_TXVC register. */
	udd_enable_periph_ck();
  40104e:	2022      	movs	r0, #34	; 0x22
  401050:	4b8f      	ldr	r3, [pc, #572]	; (401290 <UDP_Handler+0x268>)
  401052:	4798      	blx	r3

	if (Is_udd_sof_interrupt_enabled() && Is_udd_sof()) {
  401054:	4b8c      	ldr	r3, [pc, #560]	; (401288 <UDP_Handler+0x260>)
  401056:	699b      	ldr	r3, [r3, #24]
  401058:	f413 6f00 	tst.w	r3, #2048	; 0x800
  40105c:	d00c      	beq.n	401078 <UDP_Handler+0x50>
  40105e:	4b8a      	ldr	r3, [pc, #552]	; (401288 <UDP_Handler+0x260>)
  401060:	69db      	ldr	r3, [r3, #28]
  401062:	f413 6f00 	tst.w	r3, #2048	; 0x800
  401066:	d007      	beq.n	401078 <UDP_Handler+0x50>
		udd_ack_sof();
  401068:	f44f 6200 	mov.w	r2, #2048	; 0x800
  40106c:	4b86      	ldr	r3, [pc, #536]	; (401288 <UDP_Handler+0x260>)
  40106e:	621a      	str	r2, [r3, #32]
		udc_sof_notify();
  401070:	4b88      	ldr	r3, [pc, #544]	; (401294 <UDP_Handler+0x26c>)
  401072:	4798      	blx	r3
#ifdef UDC_SOF_EVENT
		UDC_SOF_EVENT();
#endif
		goto udd_interrupt_sof_end;
  401074:	f000 bd3d 	b.w	401af2 <UDP_Handler+0xaca>
}


static bool udd_ctrl_interrupt(void)
{
	if (!Is_udd_endpoint_interrupt(0))
  401078:	4b83      	ldr	r3, [pc, #524]	; (401288 <UDP_Handler+0x260>)
  40107a:	69db      	ldr	r3, [r3, #28]
  40107c:	f013 0f01 	tst.w	r3, #1
  401080:	f000 81ef 	beq.w	401462 <UDP_Handler+0x43a>
		return false; // No interrupt events on control endpoint

	// Search event on control endpoint
	if (Is_udd_setup_received(0)) {
  401084:	4b80      	ldr	r3, [pc, #512]	; (401288 <UDP_Handler+0x260>)
  401086:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401088:	f013 0f04 	tst.w	r3, #4
  40108c:	f000 80c0 	beq.w	401210 <UDP_Handler+0x1e8>

static void udd_ctrl_setup_received(void)
{
	uint8_t i;

	if (UDD_EPCTRL_SETUP != udd_ep_control_state) {
  401090:	4b81      	ldr	r3, [pc, #516]	; (401298 <UDP_Handler+0x270>)
  401092:	781b      	ldrb	r3, [r3, #0]
  401094:	b11b      	cbz	r3, 40109e <UDP_Handler+0x76>
		// May be a hidden DATA or ZLP phase
		// or protocol abort
		udd_ctrl_endofrequest();
  401096:	4b81      	ldr	r3, [pc, #516]	; (40129c <UDP_Handler+0x274>)
  401098:	4798      	blx	r3

		// Reinitializes control endpoint management
		udd_ctrl_init();
  40109a:	4b81      	ldr	r3, [pc, #516]	; (4012a0 <UDP_Handler+0x278>)
  40109c:	4798      	blx	r3
	}
	// Fill setup request structure
	if (8 != udd_byte_count(0)) {
  40109e:	4b7a      	ldr	r3, [pc, #488]	; (401288 <UDP_Handler+0x260>)
  4010a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4010a2:	f3c3 430a 	ubfx	r3, r3, #16, #11
  4010a6:	2b08      	cmp	r3, #8
  4010a8:	d01c      	beq.n	4010e4 <UDP_Handler+0xbc>
		udd_ack_setup_received(0);
  4010aa:	4a77      	ldr	r2, [pc, #476]	; (401288 <UDP_Handler+0x260>)
  4010ac:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4010ae:	9302      	str	r3, [sp, #8]
  4010b0:	9b02      	ldr	r3, [sp, #8]
  4010b2:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  4010b6:	9302      	str	r3, [sp, #8]
  4010b8:	9b02      	ldr	r3, [sp, #8]
  4010ba:	f023 0304 	bic.w	r3, r3, #4
  4010be:	9302      	str	r3, [sp, #8]
  4010c0:	9b02      	ldr	r3, [sp, #8]
  4010c2:	6313      	str	r3, [r2, #48]	; 0x30
  4010c4:	2300      	movs	r3, #0
  4010c6:	9303      	str	r3, [sp, #12]
  4010c8:	9b03      	ldr	r3, [sp, #12]
  4010ca:	2b13      	cmp	r3, #19
  4010cc:	d806      	bhi.n	4010dc <UDP_Handler+0xb4>

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
  4010ce:	bf00      	nop
  4010d0:	9b03      	ldr	r3, [sp, #12]
  4010d2:	3301      	adds	r3, #1
  4010d4:	9303      	str	r3, [sp, #12]
  4010d6:	9b03      	ldr	r3, [sp, #12]
  4010d8:	2b13      	cmp	r3, #19
  4010da:	d9f8      	bls.n	4010ce <UDP_Handler+0xa6>
		udd_ctrl_stall_data();
  4010dc:	4b71      	ldr	r3, [pc, #452]	; (4012a4 <UDP_Handler+0x27c>)
  4010de:	4798      	blx	r3
  4010e0:	f000 bd07 	b.w	401af2 <UDP_Handler+0xaca>
  4010e4:	4b70      	ldr	r3, [pc, #448]	; (4012a8 <UDP_Handler+0x280>)
  4010e6:	f103 0008 	add.w	r0, r3, #8
		return; // Error data number doesn't correspond to SETUP packet
	}
	for (i = 0; i < 8; i++) {
		((uint8_t *) & udd_g_ctrlreq.req)[i] =
			udd_endpoint_fifo_read(0);
  4010ea:	4967      	ldr	r1, [pc, #412]	; (401288 <UDP_Handler+0x260>)
  4010ec:	6d0a      	ldr	r2, [r1, #80]	; 0x50
		udd_ack_setup_received(0);
		udd_ctrl_stall_data();
		return; // Error data number doesn't correspond to SETUP packet
	}
	for (i = 0; i < 8; i++) {
		((uint8_t *) & udd_g_ctrlreq.req)[i] =
  4010ee:	f803 2f01 	strb.w	r2, [r3, #1]!
	if (8 != udd_byte_count(0)) {
		udd_ack_setup_received(0);
		udd_ctrl_stall_data();
		return; // Error data number doesn't correspond to SETUP packet
	}
	for (i = 0; i < 8; i++) {
  4010f2:	4283      	cmp	r3, r0
  4010f4:	d1fa      	bne.n	4010ec <UDP_Handler+0xc4>
	udd_g_ctrlreq.req.wValue = le16_to_cpu(udd_g_ctrlreq.req.wValue);
	udd_g_ctrlreq.req.wIndex = le16_to_cpu(udd_g_ctrlreq.req.wIndex);
	udd_g_ctrlreq.req.wLength = le16_to_cpu(udd_g_ctrlreq.req.wLength);

	// Decode setup request
	if (udc_process_setup() == false) {
  4010f6:	4b6d      	ldr	r3, [pc, #436]	; (4012ac <UDP_Handler+0x284>)
  4010f8:	4798      	blx	r3
  4010fa:	b9e0      	cbnz	r0, 401136 <UDP_Handler+0x10e>
		// Setup request unknown then stall it
		udd_ack_setup_received(0);
  4010fc:	4a62      	ldr	r2, [pc, #392]	; (401288 <UDP_Handler+0x260>)
  4010fe:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401100:	9304      	str	r3, [sp, #16]
  401102:	9b04      	ldr	r3, [sp, #16]
  401104:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  401108:	9304      	str	r3, [sp, #16]
  40110a:	9b04      	ldr	r3, [sp, #16]
  40110c:	f023 0304 	bic.w	r3, r3, #4
  401110:	9304      	str	r3, [sp, #16]
  401112:	9b04      	ldr	r3, [sp, #16]
  401114:	6313      	str	r3, [r2, #48]	; 0x30
  401116:	2300      	movs	r3, #0
  401118:	9305      	str	r3, [sp, #20]
  40111a:	9b05      	ldr	r3, [sp, #20]
  40111c:	2b13      	cmp	r3, #19
  40111e:	d806      	bhi.n	40112e <UDP_Handler+0x106>
  401120:	bf00      	nop
  401122:	9b05      	ldr	r3, [sp, #20]
  401124:	3301      	adds	r3, #1
  401126:	9305      	str	r3, [sp, #20]
  401128:	9b05      	ldr	r3, [sp, #20]
  40112a:	2b13      	cmp	r3, #19
  40112c:	d9f8      	bls.n	401120 <UDP_Handler+0xf8>
		udd_ctrl_stall_data();
  40112e:	4b5d      	ldr	r3, [pc, #372]	; (4012a4 <UDP_Handler+0x27c>)
  401130:	4798      	blx	r3
  401132:	f000 bcde 	b.w	401af2 <UDP_Handler+0xaca>
		return;
	}

	if (Udd_setup_is_in()) {
  401136:	4b5e      	ldr	r3, [pc, #376]	; (4012b0 <UDP_Handler+0x288>)
  401138:	f993 3000 	ldrsb.w	r3, [r3]
  40113c:	2b00      	cmp	r3, #0
  40113e:	da3d      	bge.n	4011bc <UDP_Handler+0x194>
		// Set DIR
		udd_set_endpoint_direction_in(0);
  401140:	4a51      	ldr	r2, [pc, #324]	; (401288 <UDP_Handler+0x260>)
  401142:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401144:	9306      	str	r3, [sp, #24]
  401146:	9b06      	ldr	r3, [sp, #24]
  401148:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  40114c:	9306      	str	r3, [sp, #24]
  40114e:	9b06      	ldr	r3, [sp, #24]
  401150:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  401154:	9306      	str	r3, [sp, #24]
  401156:	9b06      	ldr	r3, [sp, #24]
  401158:	6313      	str	r3, [r2, #48]	; 0x30
  40115a:	2300      	movs	r3, #0
  40115c:	9307      	str	r3, [sp, #28]
  40115e:	9b07      	ldr	r3, [sp, #28]
  401160:	2b13      	cmp	r3, #19
  401162:	d806      	bhi.n	401172 <UDP_Handler+0x14a>
  401164:	bf00      	nop
  401166:	9b07      	ldr	r3, [sp, #28]
  401168:	3301      	adds	r3, #1
  40116a:	9307      	str	r3, [sp, #28]
  40116c:	9b07      	ldr	r3, [sp, #28]
  40116e:	2b13      	cmp	r3, #19
  401170:	d9f8      	bls.n	401164 <UDP_Handler+0x13c>
		udd_ack_setup_received(0);
  401172:	4a45      	ldr	r2, [pc, #276]	; (401288 <UDP_Handler+0x260>)
  401174:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401176:	9308      	str	r3, [sp, #32]
  401178:	9b08      	ldr	r3, [sp, #32]
  40117a:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  40117e:	9308      	str	r3, [sp, #32]
  401180:	9b08      	ldr	r3, [sp, #32]
  401182:	f023 0304 	bic.w	r3, r3, #4
  401186:	9308      	str	r3, [sp, #32]
  401188:	9b08      	ldr	r3, [sp, #32]
  40118a:	6313      	str	r3, [r2, #48]	; 0x30
  40118c:	2300      	movs	r3, #0
  40118e:	9309      	str	r3, [sp, #36]	; 0x24
  401190:	9b09      	ldr	r3, [sp, #36]	; 0x24
  401192:	2b13      	cmp	r3, #19
  401194:	d806      	bhi.n	4011a4 <UDP_Handler+0x17c>
  401196:	bf00      	nop
  401198:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40119a:	3301      	adds	r3, #1
  40119c:	9309      	str	r3, [sp, #36]	; 0x24
  40119e:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4011a0:	2b13      	cmp	r3, #19
  4011a2:	d9f8      	bls.n	401196 <UDP_Handler+0x16e>
		// IN data phase requested
		udd_ctrl_prev_payload_nb_trans = 0;
  4011a4:	2300      	movs	r3, #0
  4011a6:	4a43      	ldr	r2, [pc, #268]	; (4012b4 <UDP_Handler+0x28c>)
  4011a8:	8013      	strh	r3, [r2, #0]
		udd_ctrl_payload_nb_trans = 0;
  4011aa:	4a43      	ldr	r2, [pc, #268]	; (4012b8 <UDP_Handler+0x290>)
  4011ac:	8013      	strh	r3, [r2, #0]
		udd_ep_control_state = UDD_EPCTRL_DATA_IN;
  4011ae:	2202      	movs	r2, #2
  4011b0:	4b39      	ldr	r3, [pc, #228]	; (401298 <UDP_Handler+0x270>)
  4011b2:	701a      	strb	r2, [r3, #0]
		udd_ctrl_in_sent(); // Send first data transfer
  4011b4:	4b41      	ldr	r3, [pc, #260]	; (4012bc <UDP_Handler+0x294>)
  4011b6:	4798      	blx	r3
  4011b8:	f000 bc9b 	b.w	401af2 <UDP_Handler+0xaca>
	} else {
		udd_ack_setup_received(0);
  4011bc:	4a32      	ldr	r2, [pc, #200]	; (401288 <UDP_Handler+0x260>)
  4011be:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4011c0:	930a      	str	r3, [sp, #40]	; 0x28
  4011c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4011c4:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  4011c8:	930a      	str	r3, [sp, #40]	; 0x28
  4011ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4011cc:	f023 0304 	bic.w	r3, r3, #4
  4011d0:	930a      	str	r3, [sp, #40]	; 0x28
  4011d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4011d4:	6313      	str	r3, [r2, #48]	; 0x30
  4011d6:	2300      	movs	r3, #0
  4011d8:	930b      	str	r3, [sp, #44]	; 0x2c
  4011da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  4011dc:	2b13      	cmp	r3, #19
  4011de:	d806      	bhi.n	4011ee <UDP_Handler+0x1c6>
  4011e0:	bf00      	nop
  4011e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  4011e4:	3301      	adds	r3, #1
  4011e6:	930b      	str	r3, [sp, #44]	; 0x2c
  4011e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  4011ea:	2b13      	cmp	r3, #19
  4011ec:	d9f8      	bls.n	4011e0 <UDP_Handler+0x1b8>
		if (0 == udd_g_ctrlreq.req.wLength) {
  4011ee:	4b30      	ldr	r3, [pc, #192]	; (4012b0 <UDP_Handler+0x288>)
  4011f0:	88db      	ldrh	r3, [r3, #6]
  4011f2:	b91b      	cbnz	r3, 4011fc <UDP_Handler+0x1d4>
			// No data phase requested
			// Send IN ZLP to ACK setup request
			udd_ctrl_send_zlp_in();
  4011f4:	4b32      	ldr	r3, [pc, #200]	; (4012c0 <UDP_Handler+0x298>)
  4011f6:	4798      	blx	r3
  4011f8:	f000 bc7b 	b.w	401af2 <UDP_Handler+0xaca>
			return;
		}
		// OUT data phase requested
		udd_ctrl_prev_payload_nb_trans = 0;
  4011fc:	2300      	movs	r3, #0
  4011fe:	4a2d      	ldr	r2, [pc, #180]	; (4012b4 <UDP_Handler+0x28c>)
  401200:	8013      	strh	r3, [r2, #0]
		udd_ctrl_payload_nb_trans = 0;
  401202:	4a2d      	ldr	r2, [pc, #180]	; (4012b8 <UDP_Handler+0x290>)
  401204:	8013      	strh	r3, [r2, #0]
		udd_ep_control_state = UDD_EPCTRL_DATA_OUT;
  401206:	2201      	movs	r2, #1
  401208:	4b23      	ldr	r3, [pc, #140]	; (401298 <UDP_Handler+0x270>)
  40120a:	701a      	strb	r2, [r3, #0]
  40120c:	f000 bc71 	b.w	401af2 <UDP_Handler+0xaca>
	if (Is_udd_setup_received(0)) {
		// SETUP packet received
		udd_ctrl_setup_received();
		return true;
	}
	if (Is_udd_in_sent(0)) {
  401210:	4b1d      	ldr	r3, [pc, #116]	; (401288 <UDP_Handler+0x260>)
  401212:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401214:	f013 0f01 	tst.w	r3, #1
  401218:	d003      	beq.n	401222 <UDP_Handler+0x1fa>
		// IN packet sent
		udd_ctrl_in_sent();
  40121a:	4b28      	ldr	r3, [pc, #160]	; (4012bc <UDP_Handler+0x294>)
  40121c:	4798      	blx	r3
  40121e:	f000 bc68 	b.w	401af2 <UDP_Handler+0xaca>
		return true;
	}
	if (Is_udd_bank0_received(0)) {
  401222:	4b19      	ldr	r3, [pc, #100]	; (401288 <UDP_Handler+0x260>)
  401224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401226:	f013 0f02 	tst.w	r3, #2
  40122a:	f000 8115 	beq.w	401458 <UDP_Handler+0x430>
static void udd_ctrl_out_received(void)
{
	uint8_t i;
	uint16_t nb_data;

	if (UDD_EPCTRL_DATA_OUT != udd_ep_control_state) {
  40122e:	4b1a      	ldr	r3, [pc, #104]	; (401298 <UDP_Handler+0x270>)
  401230:	781b      	ldrb	r3, [r3, #0]
  401232:	2b01      	cmp	r3, #1
  401234:	d046      	beq.n	4012c4 <UDP_Handler+0x29c>
		if ((UDD_EPCTRL_DATA_IN == udd_ep_control_state)
  401236:	2b02      	cmp	r3, #2
  401238:	d001      	beq.n	40123e <UDP_Handler+0x216>
				|| (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP ==
  40123a:	2b04      	cmp	r3, #4
  40123c:	d102      	bne.n	401244 <UDP_Handler+0x21c>
				udd_ep_control_state)) {
			// End of SETUP request:
			// - Data IN Phase aborted,
			// - or last Data IN Phase hidden by ZLP OUT sending quickly,
			// - or ZLP OUT received normally.
			udd_ctrl_endofrequest();
  40123e:	4b17      	ldr	r3, [pc, #92]	; (40129c <UDP_Handler+0x274>)
  401240:	4798      	blx	r3
  401242:	e001      	b.n	401248 <UDP_Handler+0x220>
		} else {
			// Protocol error during SETUP request
			udd_ctrl_stall_data();
  401244:	4b17      	ldr	r3, [pc, #92]	; (4012a4 <UDP_Handler+0x27c>)
  401246:	4798      	blx	r3
		}
		udd_ack_bank0_received(0);
  401248:	4a0f      	ldr	r2, [pc, #60]	; (401288 <UDP_Handler+0x260>)
  40124a:	6b13      	ldr	r3, [r2, #48]	; 0x30
  40124c:	930c      	str	r3, [sp, #48]	; 0x30
  40124e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  401250:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  401254:	930c      	str	r3, [sp, #48]	; 0x30
  401256:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  401258:	f023 0302 	bic.w	r3, r3, #2
  40125c:	930c      	str	r3, [sp, #48]	; 0x30
  40125e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  401260:	6313      	str	r3, [r2, #48]	; 0x30
  401262:	2300      	movs	r3, #0
  401264:	930d      	str	r3, [sp, #52]	; 0x34
  401266:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  401268:	2b13      	cmp	r3, #19
  40126a:	d806      	bhi.n	40127a <UDP_Handler+0x252>
  40126c:	bf00      	nop
  40126e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  401270:	3301      	adds	r3, #1
  401272:	930d      	str	r3, [sp, #52]	; 0x34
  401274:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  401276:	2b13      	cmp	r3, #19
  401278:	d9f8      	bls.n	40126c <UDP_Handler+0x244>
		// Reinitializes control endpoint management
		udd_ctrl_init();
  40127a:	4b09      	ldr	r3, [pc, #36]	; (4012a0 <UDP_Handler+0x278>)
  40127c:	4798      	blx	r3
  40127e:	f000 bc38 	b.w	401af2 <UDP_Handler+0xaca>
  401282:	bf00      	nop
  401284:	00402b5d 	.word	0x00402b5d
  401288:	40034000 	.word	0x40034000
  40128c:	200000ac 	.word	0x200000ac
  401290:	0040278d 	.word	0x0040278d
  401294:	0040039d 	.word	0x0040039d
  401298:	20000a25 	.word	0x20000a25
  40129c:	00400a95 	.word	0x00400a95
  4012a0:	004009ed 	.word	0x004009ed
  4012a4:	00400a05 	.word	0x00400a05
  4012a8:	20000a7f 	.word	0x20000a7f
  4012ac:	004003d9 	.word	0x004003d9
  4012b0:	20000a80 	.word	0x20000a80
  4012b4:	200009a4 	.word	0x200009a4
  4012b8:	20000a22 	.word	0x20000a22
  4012bc:	00400aa5 	.word	0x00400aa5
  4012c0:	00400a4d 	.word	0x00400a4d
		return;
	}
	// Read data received during OUT phase
	nb_data = udd_byte_count(0);
  4012c4:	4b91      	ldr	r3, [pc, #580]	; (40150c <UDP_Handler+0x4e4>)
  4012c6:	6b19      	ldr	r1, [r3, #48]	; 0x30
  4012c8:	f3c1 410a 	ubfx	r1, r1, #16, #11
	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_nb_trans + nb_data)) {
  4012cc:	4b90      	ldr	r3, [pc, #576]	; (401510 <UDP_Handler+0x4e8>)
  4012ce:	899b      	ldrh	r3, [r3, #12]
  4012d0:	4a90      	ldr	r2, [pc, #576]	; (401514 <UDP_Handler+0x4ec>)
  4012d2:	8815      	ldrh	r5, [r2, #0]
  4012d4:	186a      	adds	r2, r5, r1
  4012d6:	4293      	cmp	r3, r2
		// Reinitializes control endpoint management
		udd_ctrl_init();
		return;
	}
	// Read data received during OUT phase
	nb_data = udd_byte_count(0);
  4012d8:	bfae      	itee	ge
  4012da:	b289      	uxthge	r1, r1
	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_nb_trans + nb_data)) {
		// Payload buffer too small
		nb_data = udd_g_ctrlreq.payload_size -
  4012dc:	1b5b      	sublt	r3, r3, r5
  4012de:	b299      	uxthlt	r1, r3
				udd_ctrl_payload_nb_trans;
	}
	uint8_t *ptr_dest = udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans;
  4012e0:	4b8b      	ldr	r3, [pc, #556]	; (401510 <UDP_Handler+0x4e8>)
  4012e2:	6898      	ldr	r0, [r3, #8]
  4012e4:	4428      	add	r0, r5
	for (i = 0; i < nb_data; i++) {
  4012e6:	b1a9      	cbz	r1, 401314 <UDP_Handler+0x2ec>
  4012e8:	4602      	mov	r2, r0
		*ptr_dest++ = udd_endpoint_fifo_read(0);
  4012ea:	4c88      	ldr	r4, [pc, #544]	; (40150c <UDP_Handler+0x4e4>)
  4012ec:	6d23      	ldr	r3, [r4, #80]	; 0x50
  4012ee:	f802 3b01 	strb.w	r3, [r2], #1
  4012f2:	1a13      	subs	r3, r2, r0
		// Payload buffer too small
		nb_data = udd_g_ctrlreq.payload_size -
				udd_ctrl_payload_nb_trans;
	}
	uint8_t *ptr_dest = udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans;
	for (i = 0; i < nb_data; i++) {
  4012f4:	b2db      	uxtb	r3, r3
  4012f6:	428b      	cmp	r3, r1
  4012f8:	d3f8      	bcc.n	4012ec <UDP_Handler+0x2c4>
		*ptr_dest++ = udd_endpoint_fifo_read(0);
	}
	udd_ctrl_payload_nb_trans += nb_data;
  4012fa:	440d      	add	r5, r1
  4012fc:	b2ad      	uxth	r5, r5
  4012fe:	4b85      	ldr	r3, [pc, #532]	; (401514 <UDP_Handler+0x4ec>)
  401300:	801d      	strh	r5, [r3, #0]

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data)
  401302:	2940      	cmp	r1, #64	; 0x40
  401304:	d106      	bne.n	401314 <UDP_Handler+0x2ec>
			|| (udd_g_ctrlreq.req.wLength <=
  401306:	4b82      	ldr	r3, [pc, #520]	; (401510 <UDP_Handler+0x4e8>)
  401308:	88da      	ldrh	r2, [r3, #6]
			(udd_ctrl_prev_payload_nb_trans +
  40130a:	4b83      	ldr	r3, [pc, #524]	; (401518 <UDP_Handler+0x4f0>)
  40130c:	881b      	ldrh	r3, [r3, #0]
  40130e:	442b      	add	r3, r5
		*ptr_dest++ = udd_endpoint_fifo_read(0);
	}
	udd_ctrl_payload_nb_trans += nb_data;

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data)
			|| (udd_g_ctrlreq.req.wLength <=
  401310:	429a      	cmp	r2, r3
  401312:	dc3e      	bgt.n	401392 <UDP_Handler+0x36a>
			(udd_ctrl_prev_payload_nb_trans +
			udd_ctrl_payload_nb_trans))) {
		// End of reception because it is a short packet
		// Before send ZLP, call intermediate callback
		// in case of data receive generate a stall
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_nb_trans;
  401314:	4b7e      	ldr	r3, [pc, #504]	; (401510 <UDP_Handler+0x4e8>)
  401316:	819d      	strh	r5, [r3, #12]
		if (NULL != udd_g_ctrlreq.over_under_run) {
  401318:	695b      	ldr	r3, [r3, #20]
  40131a:	b1f3      	cbz	r3, 40135a <UDP_Handler+0x332>
			if (!udd_g_ctrlreq.over_under_run()) {
  40131c:	4798      	blx	r3
  40131e:	b9e0      	cbnz	r0, 40135a <UDP_Handler+0x332>
				// Stall ZLP
				udd_ctrl_stall_data();
  401320:	4b7e      	ldr	r3, [pc, #504]	; (40151c <UDP_Handler+0x4f4>)
  401322:	4798      	blx	r3
				// Ack reception of OUT to replace NAK by a STALL
				udd_ack_bank0_received(0);
  401324:	4a79      	ldr	r2, [pc, #484]	; (40150c <UDP_Handler+0x4e4>)
  401326:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401328:	930e      	str	r3, [sp, #56]	; 0x38
  40132a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40132c:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  401330:	930e      	str	r3, [sp, #56]	; 0x38
  401332:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  401334:	f023 0302 	bic.w	r3, r3, #2
  401338:	930e      	str	r3, [sp, #56]	; 0x38
  40133a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40133c:	6313      	str	r3, [r2, #48]	; 0x30
  40133e:	2300      	movs	r3, #0
  401340:	930f      	str	r3, [sp, #60]	; 0x3c
  401342:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  401344:	2b13      	cmp	r3, #19
  401346:	f200 83d4 	bhi.w	401af2 <UDP_Handler+0xaca>
  40134a:	bf00      	nop
  40134c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  40134e:	3301      	adds	r3, #1
  401350:	930f      	str	r3, [sp, #60]	; 0x3c
  401352:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  401354:	2b13      	cmp	r3, #19
  401356:	d9f8      	bls.n	40134a <UDP_Handler+0x322>
  401358:	e3cb      	b.n	401af2 <UDP_Handler+0xaca>
				return;
			}
		}
		// Send IN ZLP to ACK setup request
		udd_ack_bank0_received(0);
  40135a:	4a6c      	ldr	r2, [pc, #432]	; (40150c <UDP_Handler+0x4e4>)
  40135c:	6b13      	ldr	r3, [r2, #48]	; 0x30
  40135e:	9310      	str	r3, [sp, #64]	; 0x40
  401360:	9b10      	ldr	r3, [sp, #64]	; 0x40
  401362:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  401366:	9310      	str	r3, [sp, #64]	; 0x40
  401368:	9b10      	ldr	r3, [sp, #64]	; 0x40
  40136a:	f023 0302 	bic.w	r3, r3, #2
  40136e:	9310      	str	r3, [sp, #64]	; 0x40
  401370:	9b10      	ldr	r3, [sp, #64]	; 0x40
  401372:	6313      	str	r3, [r2, #48]	; 0x30
  401374:	2300      	movs	r3, #0
  401376:	9311      	str	r3, [sp, #68]	; 0x44
  401378:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40137a:	2b13      	cmp	r3, #19
  40137c:	d806      	bhi.n	40138c <UDP_Handler+0x364>
  40137e:	bf00      	nop
  401380:	9b11      	ldr	r3, [sp, #68]	; 0x44
  401382:	3301      	adds	r3, #1
  401384:	9311      	str	r3, [sp, #68]	; 0x44
  401386:	9b11      	ldr	r3, [sp, #68]	; 0x44
  401388:	2b13      	cmp	r3, #19
  40138a:	d9f8      	bls.n	40137e <UDP_Handler+0x356>
		udd_ctrl_send_zlp_in();
  40138c:	4b64      	ldr	r3, [pc, #400]	; (401520 <UDP_Handler+0x4f8>)
  40138e:	4798      	blx	r3
  401390:	e3af      	b.n	401af2 <UDP_Handler+0xaca>
		return;
	}

	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_nb_trans) {
  401392:	4b5f      	ldr	r3, [pc, #380]	; (401510 <UDP_Handler+0x4e8>)
  401394:	899b      	ldrh	r3, [r3, #12]
  401396:	42ab      	cmp	r3, r5
  401398:	d143      	bne.n	401422 <UDP_Handler+0x3fa>
		// Overrun then request a new payload buffer
		if (!udd_g_ctrlreq.over_under_run) {
  40139a:	4b5d      	ldr	r3, [pc, #372]	; (401510 <UDP_Handler+0x4e8>)
  40139c:	695b      	ldr	r3, [r3, #20]
  40139e:	b9cb      	cbnz	r3, 4013d4 <UDP_Handler+0x3ac>
			// No callback available to request a new payload buffer
			udd_ctrl_stall_data();
  4013a0:	4b5e      	ldr	r3, [pc, #376]	; (40151c <UDP_Handler+0x4f4>)
  4013a2:	4798      	blx	r3
			// Ack reception of OUT to replace NAK by a STALL
			udd_ack_bank0_received(0);
  4013a4:	4a59      	ldr	r2, [pc, #356]	; (40150c <UDP_Handler+0x4e4>)
  4013a6:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4013a8:	9312      	str	r3, [sp, #72]	; 0x48
  4013aa:	9b12      	ldr	r3, [sp, #72]	; 0x48
  4013ac:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  4013b0:	9312      	str	r3, [sp, #72]	; 0x48
  4013b2:	9b12      	ldr	r3, [sp, #72]	; 0x48
  4013b4:	f023 0302 	bic.w	r3, r3, #2
  4013b8:	9312      	str	r3, [sp, #72]	; 0x48
  4013ba:	9b12      	ldr	r3, [sp, #72]	; 0x48
  4013bc:	6313      	str	r3, [r2, #48]	; 0x30
  4013be:	2300      	movs	r3, #0
  4013c0:	9313      	str	r3, [sp, #76]	; 0x4c
  4013c2:	e003      	b.n	4013cc <UDP_Handler+0x3a4>
  4013c4:	bf00      	nop
  4013c6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  4013c8:	3301      	adds	r3, #1
  4013ca:	9313      	str	r3, [sp, #76]	; 0x4c
  4013cc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  4013ce:	2b13      	cmp	r3, #19
  4013d0:	d9f8      	bls.n	4013c4 <UDP_Handler+0x39c>
  4013d2:	e38e      	b.n	401af2 <UDP_Handler+0xaca>
			return;
		}
		if (!udd_g_ctrlreq.over_under_run()) {
  4013d4:	4798      	blx	r3
  4013d6:	b9e0      	cbnz	r0, 401412 <UDP_Handler+0x3ea>
			// No new payload buffer delivered
			udd_ctrl_stall_data();
  4013d8:	4b50      	ldr	r3, [pc, #320]	; (40151c <UDP_Handler+0x4f4>)
  4013da:	4798      	blx	r3
			// Ack reception of OUT to replace NAK by a STALL
			udd_ack_bank0_received(0);
  4013dc:	4a4b      	ldr	r2, [pc, #300]	; (40150c <UDP_Handler+0x4e4>)
  4013de:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4013e0:	9314      	str	r3, [sp, #80]	; 0x50
  4013e2:	9b14      	ldr	r3, [sp, #80]	; 0x50
  4013e4:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  4013e8:	9314      	str	r3, [sp, #80]	; 0x50
  4013ea:	9b14      	ldr	r3, [sp, #80]	; 0x50
  4013ec:	f023 0302 	bic.w	r3, r3, #2
  4013f0:	9314      	str	r3, [sp, #80]	; 0x50
  4013f2:	9b14      	ldr	r3, [sp, #80]	; 0x50
  4013f4:	6313      	str	r3, [r2, #48]	; 0x30
  4013f6:	2300      	movs	r3, #0
  4013f8:	9315      	str	r3, [sp, #84]	; 0x54
  4013fa:	9b15      	ldr	r3, [sp, #84]	; 0x54
  4013fc:	2b13      	cmp	r3, #19
  4013fe:	f200 8378 	bhi.w	401af2 <UDP_Handler+0xaca>
  401402:	bf00      	nop
  401404:	9b15      	ldr	r3, [sp, #84]	; 0x54
  401406:	3301      	adds	r3, #1
  401408:	9315      	str	r3, [sp, #84]	; 0x54
  40140a:	9b15      	ldr	r3, [sp, #84]	; 0x54
  40140c:	2b13      	cmp	r3, #19
  40140e:	d9f8      	bls.n	401402 <UDP_Handler+0x3da>
  401410:	e36f      	b.n	401af2 <UDP_Handler+0xaca>
			return;
		}
		// New payload buffer available
		// Update number of total data received
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
  401412:	4941      	ldr	r1, [pc, #260]	; (401518 <UDP_Handler+0x4f0>)
  401414:	4a3f      	ldr	r2, [pc, #252]	; (401514 <UDP_Handler+0x4ec>)
  401416:	8810      	ldrh	r0, [r2, #0]
  401418:	880b      	ldrh	r3, [r1, #0]
  40141a:	4403      	add	r3, r0
  40141c:	800b      	strh	r3, [r1, #0]
		// Reinit reception on payload buffer
		udd_ctrl_payload_nb_trans = 0;
  40141e:	2300      	movs	r3, #0
  401420:	8013      	strh	r3, [r2, #0]
	}
	// Free buffer of control endpoint to authorize next reception
	udd_ack_bank0_received(0);
  401422:	4a3a      	ldr	r2, [pc, #232]	; (40150c <UDP_Handler+0x4e4>)
  401424:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401426:	9316      	str	r3, [sp, #88]	; 0x58
  401428:	9b16      	ldr	r3, [sp, #88]	; 0x58
  40142a:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  40142e:	9316      	str	r3, [sp, #88]	; 0x58
  401430:	9b16      	ldr	r3, [sp, #88]	; 0x58
  401432:	f023 0302 	bic.w	r3, r3, #2
  401436:	9316      	str	r3, [sp, #88]	; 0x58
  401438:	9b16      	ldr	r3, [sp, #88]	; 0x58
  40143a:	6313      	str	r3, [r2, #48]	; 0x30
  40143c:	2300      	movs	r3, #0
  40143e:	9317      	str	r3, [sp, #92]	; 0x5c
  401440:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  401442:	2b13      	cmp	r3, #19
  401444:	f200 8355 	bhi.w	401af2 <UDP_Handler+0xaca>
  401448:	bf00      	nop
  40144a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  40144c:	3301      	adds	r3, #1
  40144e:	9317      	str	r3, [sp, #92]	; 0x5c
  401450:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  401452:	2b13      	cmp	r3, #19
  401454:	d9f8      	bls.n	401448 <UDP_Handler+0x420>
  401456:	e34c      	b.n	401af2 <UDP_Handler+0xaca>
	if (Is_udd_bank0_received(0)) {
		// OUT packet received
		udd_ctrl_out_received();
		return true;
	}
	if (Is_udd_stall(0)) {
  401458:	4b2c      	ldr	r3, [pc, #176]	; (40150c <UDP_Handler+0x4e4>)
  40145a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40145c:	f013 0f08 	tst.w	r3, #8
  401460:	d106      	bne.n	401470 <UDP_Handler+0x448>
  401462:	4f30      	ldr	r7, [pc, #192]	; (401524 <UDP_Handler+0x4fc>)
		// Payload buffer too small
		nb_data = udd_g_ctrlreq.payload_size -
				udd_ctrl_payload_nb_trans;
	}
	uint8_t *ptr_dest = udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans;
	for (i = 0; i < nb_data; i++) {
  401464:	4639      	mov	r1, r7
  401466:	2301      	movs	r3, #1
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
		// Check RXRDY and TXEMPTY event for none DMA endpoints
		if (!Is_udd_endpoint_interrupt_enabled(ep)) {
  401468:	f8df e0a0 	ldr.w	lr, [pc, #160]	; 40150c <UDP_Handler+0x4e4>
  40146c:	4618      	mov	r0, r3
  40146e:	e01a      	b.n	4014a6 <UDP_Handler+0x47e>
		udd_ctrl_out_received();
		return true;
	}
	if (Is_udd_stall(0)) {
		// STALLed
		udd_ack_stall(0);
  401470:	4a26      	ldr	r2, [pc, #152]	; (40150c <UDP_Handler+0x4e4>)
  401472:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401474:	9300      	str	r3, [sp, #0]
  401476:	9b00      	ldr	r3, [sp, #0]
  401478:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  40147c:	9300      	str	r3, [sp, #0]
  40147e:	9b00      	ldr	r3, [sp, #0]
  401480:	f023 0308 	bic.w	r3, r3, #8
  401484:	9300      	str	r3, [sp, #0]
  401486:	9b00      	ldr	r3, [sp, #0]
  401488:	6313      	str	r3, [r2, #48]	; 0x30
  40148a:	2300      	movs	r3, #0
  40148c:	9301      	str	r3, [sp, #4]
  40148e:	9b01      	ldr	r3, [sp, #4]
  401490:	2b13      	cmp	r3, #19
  401492:	f200 832e 	bhi.w	401af2 <UDP_Handler+0xaca>
  401496:	bf00      	nop
  401498:	9b01      	ldr	r3, [sp, #4]
  40149a:	3301      	adds	r3, #1
  40149c:	9301      	str	r3, [sp, #4]
  40149e:	9b01      	ldr	r3, [sp, #4]
  4014a0:	2b13      	cmp	r3, #19
  4014a2:	d9f8      	bls.n	401496 <UDP_Handler+0x46e>
  4014a4:	e325      	b.n	401af2 <UDP_Handler+0xaca>
  4014a6:	b2de      	uxtb	r6, r3
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
		// Check RXRDY and TXEMPTY event for none DMA endpoints
		if (!Is_udd_endpoint_interrupt_enabled(ep)) {
  4014a8:	f8de 2018 	ldr.w	r2, [lr, #24]
  4014ac:	461d      	mov	r5, r3
  4014ae:	fa00 f403 	lsl.w	r4, r0, r3
  4014b2:	4214      	tst	r4, r2
  4014b4:	f000 8221 	beq.w	4018fa <UDP_Handler+0x8d2>
  4014b8:	f103 38ff 	add.w	r8, r3, #4294967295
			continue;
		}

		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];
  4014bc:	4689      	mov	r9, r1
  4014be:	009a      	lsls	r2, r3, #2
  4014c0:	f102 2240 	add.w	r2, r2, #1073758208	; 0x40004000
  4014c4:	f502 3240 	add.w	r2, r2, #196608	; 0x30000

		// RXOUT: Full packet received
		if (Is_udd_any_bank_received(ep)) {
  4014c8:	f8d2 c030 	ldr.w	ip, [r2, #48]	; 0x30
  4014cc:	f01c 0f42 	tst.w	ip, #66	; 0x42
  4014d0:	d053      	beq.n	40157a <UDP_Handler+0x552>

static void udd_ep_out_received(udd_ep_id_t ep)
{
	udd_ep_job_t *ptr_job = &udd_ep_job[ep - 1];
	uint32_t nb_data = 0, i;
	uint32_t nb_remain = ptr_job->buf_size - ptr_job->buf_cnt;
  4014d2:	eb08 0388 	add.w	r3, r8, r8, lsl #2
  4014d6:	4a13      	ldr	r2, [pc, #76]	; (401524 <UDP_Handler+0x4fc>)
  4014d8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  4014dc:	689a      	ldr	r2, [r3, #8]
  4014de:	68d9      	ldr	r1, [r3, #12]
	uint32_t pkt_size = ptr_job->size;
  4014e0:	f8b3 a010 	ldrh.w	sl, [r3, #16]
  4014e4:	f3ca 0a09 	ubfx	sl, sl, #0, #10
	uint8_t *ptr_dst = &ptr_job->buf[ptr_job->buf_cnt];
  4014e8:	685b      	ldr	r3, [r3, #4]
  4014ea:	00ad      	lsls	r5, r5, #2
  4014ec:	f105 2540 	add.w	r5, r5, #1073758208	; 0x40004000
  4014f0:	f505 3540 	add.w	r5, r5, #196608	; 0x30000
	bool b_full = false, b_short;

	// Read byte count
	nb_data = udd_byte_count(ep);
  4014f4:	6b2f      	ldr	r7, [r5, #48]	; 0x30
  4014f6:	f3c7 470a 	ubfx	r7, r7, #16, #11
	b_short = (nb_data < pkt_size);

	// Copy data if there is
	if (nb_data > 0) {
  4014fa:	2f00      	cmp	r7, #0
  4014fc:	f000 82ee 	beq.w	401adc <UDP_Handler+0xab4>

static void udd_ep_out_received(udd_ep_id_t ep)
{
	udd_ep_job_t *ptr_job = &udd_ep_job[ep - 1];
	uint32_t nb_data = 0, i;
	uint32_t nb_remain = ptr_job->buf_size - ptr_job->buf_cnt;
  401500:	1a50      	subs	r0, r2, r1
	nb_data = udd_byte_count(ep);
	b_short = (nb_data < pkt_size);

	// Copy data if there is
	if (nb_data > 0) {
		if (nb_data >= nb_remain) {
  401502:	42b8      	cmp	r0, r7
  401504:	f240 82de 	bls.w	401ac4 <UDP_Handler+0xa9c>
  401508:	e2cd      	b.n	401aa6 <UDP_Handler+0xa7e>
  40150a:	bf00      	nop
  40150c:	40034000 	.word	0x40034000
  401510:	20000a80 	.word	0x20000a80
  401514:	20000a22 	.word	0x20000a22
  401518:	200009a4 	.word	0x200009a4
  40151c:	00400a05 	.word	0x00400a05
  401520:	00400a4d 	.word	0x00400a4d
  401524:	200009a8 	.word	0x200009a8
			nb_data = nb_remain;
			b_full = true;
  401528:	f04f 0b01 	mov.w	fp, #1
{
	udd_ep_job_t *ptr_job = &udd_ep_job[ep - 1];
	uint32_t nb_data = 0, i;
	uint32_t nb_remain = ptr_job->buf_size - ptr_job->buf_cnt;
	uint32_t pkt_size = ptr_job->size;
	uint8_t *ptr_dst = &ptr_job->buf[ptr_job->buf_cnt];
  40152c:	4419      	add	r1, r3
  40152e:	460b      	mov	r3, r1
		// Modify job information
		ptr_job->buf_cnt += nb_data;

		// Copy FIFO (DPRAM) to buffer
		for (i = 0; i < nb_data; i++) {
			*ptr_dst++ = udd_endpoint_fifo_read(ep);
  401530:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  401532:	f803 2b01 	strb.w	r2, [r3], #1
  401536:	1a5a      	subs	r2, r3, r1
		}
		// Modify job information
		ptr_job->buf_cnt += nb_data;

		// Copy FIFO (DPRAM) to buffer
		for (i = 0; i < nb_data; i++) {
  401538:	4290      	cmp	r0, r2
  40153a:	d8f9      	bhi.n	401530 <UDP_Handler+0x508>
			*ptr_dst++ = udd_endpoint_fifo_read(ep);
		}
	}
	// Clear FIFO Status
	udd_ep_ack_out_received(ep);
  40153c:	4630      	mov	r0, r6
  40153e:	4ba5      	ldr	r3, [pc, #660]	; (4017d4 <UDP_Handler+0x7ac>)
  401540:	4798      	blx	r3
	// Finish job on error or short packet
	if ((b_full || b_short) &&
  401542:	f1bb 0f00 	cmp.w	fp, #0
  401546:	d102      	bne.n	40154e <UDP_Handler+0x526>
  401548:	45ba      	cmp	sl, r7
  40154a:	f240 82d2 	bls.w	401af2 <UDP_Handler+0xaca>
			!Is_udd_endpoint_stall_requested(ep)) {
  40154e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
		}
	}
	// Clear FIFO Status
	udd_ep_ack_out_received(ep);
	// Finish job on error or short packet
	if ((b_full || b_short) &&
  401550:	f013 0f20 	tst.w	r3, #32
  401554:	f040 82cd 	bne.w	401af2 <UDP_Handler+0xaca>
			!Is_udd_endpoint_stall_requested(ep)) {
		udd_disable_endpoint_interrupt(ep);
  401558:	4b9f      	ldr	r3, [pc, #636]	; (4017d8 <UDP_Handler+0x7b0>)
  40155a:	615c      	str	r4, [r3, #20]
		ptr_job->buf_size = ptr_job->buf_cnt; // buf_size is passed to callback as XFR count
  40155c:	4b9f      	ldr	r3, [pc, #636]	; (4017dc <UDP_Handler+0x7b4>)
  40155e:	ea4f 0288 	mov.w	r2, r8, lsl #2
  401562:	eb02 0108 	add.w	r1, r2, r8
  401566:	eb03 0181 	add.w	r1, r3, r1, lsl #2
  40156a:	68cb      	ldr	r3, [r1, #12]
  40156c:	608b      	str	r3, [r1, #8]
		udd_ep_finish_job(ptr_job, UDD_EP_TRANSFER_OK, ep);
  40156e:	4648      	mov	r0, r9
  401570:	2100      	movs	r1, #0
  401572:	4632      	mov	r2, r6
  401574:	4b9a      	ldr	r3, [pc, #616]	; (4017e0 <UDP_Handler+0x7b8>)
  401576:	4798      	blx	r3
  401578:	e2bb      	b.n	401af2 <UDP_Handler+0xaca>
		if (Is_udd_any_bank_received(ep)) {
			udd_ep_out_received(ep);
			return true;
		}
		// TXIN: packet sent
		if (Is_udd_in_sent(ep)) {
  40157a:	f8d2 c030 	ldr.w	ip, [r2, #48]	; 0x30
  40157e:	f01c 0f01 	tst.w	ip, #1
  401582:	f000 8190 	beq.w	4018a6 <UDP_Handler+0x87e>

			ptr_job->bank--;
  401586:	eb08 0288 	add.w	r2, r8, r8, lsl #2
  40158a:	4b94      	ldr	r3, [pc, #592]	; (4017dc <UDP_Handler+0x7b4>)
  40158c:	eb03 0282 	add.w	r2, r3, r2, lsl #2
  401590:	7c53      	ldrb	r3, [r2, #17]
  401592:	f3c3 0181 	ubfx	r1, r3, #2, #2
  401596:	3103      	adds	r1, #3
  401598:	f361 0383 	bfi	r3, r1, #2, #2
  40159c:	7453      	strb	r3, [r2, #17]
			// Stall when all banks free
			if (ptr_job->b_stall_requested) {
  40159e:	7c53      	ldrb	r3, [r2, #17]
  4015a0:	f013 0f20 	tst.w	r3, #32
  4015a4:	d078      	beq.n	401698 <UDP_Handler+0x670>
				if (ptr_job->bank) {
  4015a6:	f013 0f0c 	tst.w	r3, #12
  4015aa:	d036      	beq.n	40161a <UDP_Handler+0x5f2>
  4015ac:	00aa      	lsls	r2, r5, #2
  4015ae:	f102 2240 	add.w	r2, r2, #1073758208	; 0x40004000
  4015b2:	f502 3240 	add.w	r2, r2, #196608	; 0x30000
					// Send remaining
					udd_set_transmit_ready(ep);
  4015b6:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4015b8:	9318      	str	r3, [sp, #96]	; 0x60
  4015ba:	9b18      	ldr	r3, [sp, #96]	; 0x60
  4015bc:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  4015c0:	9318      	str	r3, [sp, #96]	; 0x60
  4015c2:	9b18      	ldr	r3, [sp, #96]	; 0x60
  4015c4:	f043 0310 	orr.w	r3, r3, #16
  4015c8:	9318      	str	r3, [sp, #96]	; 0x60
  4015ca:	9b18      	ldr	r3, [sp, #96]	; 0x60
  4015cc:	6313      	str	r3, [r2, #48]	; 0x30
  4015ce:	2300      	movs	r3, #0
  4015d0:	9319      	str	r3, [sp, #100]	; 0x64
  4015d2:	9b19      	ldr	r3, [sp, #100]	; 0x64
  4015d4:	2b13      	cmp	r3, #19
  4015d6:	d806      	bhi.n	4015e6 <UDP_Handler+0x5be>
  4015d8:	bf00      	nop
  4015da:	9b19      	ldr	r3, [sp, #100]	; 0x64
  4015dc:	3301      	adds	r3, #1
  4015de:	9319      	str	r3, [sp, #100]	; 0x64
  4015e0:	9b19      	ldr	r3, [sp, #100]	; 0x64
  4015e2:	2b13      	cmp	r3, #19
  4015e4:	d9f8      	bls.n	4015d8 <UDP_Handler+0x5b0>
					udd_ack_in_sent(ep);
  4015e6:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4015e8:	931a      	str	r3, [sp, #104]	; 0x68
  4015ea:	9b1a      	ldr	r3, [sp, #104]	; 0x68
  4015ec:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  4015f0:	931a      	str	r3, [sp, #104]	; 0x68
  4015f2:	9b1a      	ldr	r3, [sp, #104]	; 0x68
  4015f4:	f023 0301 	bic.w	r3, r3, #1
  4015f8:	931a      	str	r3, [sp, #104]	; 0x68
  4015fa:	9b1a      	ldr	r3, [sp, #104]	; 0x68
  4015fc:	6313      	str	r3, [r2, #48]	; 0x30
  4015fe:	2300      	movs	r3, #0
  401600:	931b      	str	r3, [sp, #108]	; 0x6c
  401602:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
  401604:	2b13      	cmp	r3, #19
  401606:	f200 8274 	bhi.w	401af2 <UDP_Handler+0xaca>
  40160a:	bf00      	nop
  40160c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
  40160e:	3301      	adds	r3, #1
  401610:	931b      	str	r3, [sp, #108]	; 0x6c
  401612:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
  401614:	2b13      	cmp	r3, #19
  401616:	d9f8      	bls.n	40160a <UDP_Handler+0x5e2>
  401618:	e26b      	b.n	401af2 <UDP_Handler+0xaca>
  40161a:	00aa      	lsls	r2, r5, #2
  40161c:	f102 2240 	add.w	r2, r2, #1073758208	; 0x40004000
  401620:	f502 3240 	add.w	r2, r2, #196608	; 0x30000
				} else {
					// Ack last packet
					udd_ack_in_sent(ep);
  401624:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401626:	931c      	str	r3, [sp, #112]	; 0x70
  401628:	9b1c      	ldr	r3, [sp, #112]	; 0x70
  40162a:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  40162e:	931c      	str	r3, [sp, #112]	; 0x70
  401630:	9b1c      	ldr	r3, [sp, #112]	; 0x70
  401632:	f023 0301 	bic.w	r3, r3, #1
  401636:	931c      	str	r3, [sp, #112]	; 0x70
  401638:	9b1c      	ldr	r3, [sp, #112]	; 0x70
  40163a:	6313      	str	r3, [r2, #48]	; 0x30
  40163c:	2300      	movs	r3, #0
  40163e:	931d      	str	r3, [sp, #116]	; 0x74
  401640:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  401642:	2b13      	cmp	r3, #19
  401644:	d806      	bhi.n	401654 <UDP_Handler+0x62c>
  401646:	bf00      	nop
  401648:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  40164a:	3301      	adds	r3, #1
  40164c:	931d      	str	r3, [sp, #116]	; 0x74
  40164e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  401650:	2b13      	cmp	r3, #19
  401652:	d9f8      	bls.n	401646 <UDP_Handler+0x61e>
					// Enable stall
					udd_enable_stall_handshake(ep);
  401654:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401656:	931e      	str	r3, [sp, #120]	; 0x78
  401658:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  40165a:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  40165e:	931e      	str	r3, [sp, #120]	; 0x78
  401660:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  401662:	f043 0320 	orr.w	r3, r3, #32
  401666:	931e      	str	r3, [sp, #120]	; 0x78
  401668:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  40166a:	6313      	str	r3, [r2, #48]	; 0x30
  40166c:	2300      	movs	r3, #0
  40166e:	931f      	str	r3, [sp, #124]	; 0x7c
  401670:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  401672:	2b13      	cmp	r3, #19
  401674:	d806      	bhi.n	401684 <UDP_Handler+0x65c>
  401676:	bf00      	nop
  401678:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  40167a:	3301      	adds	r3, #1
  40167c:	931f      	str	r3, [sp, #124]	; 0x7c
  40167e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  401680:	2b13      	cmp	r3, #19
  401682:	d9f8      	bls.n	401676 <UDP_Handler+0x64e>
					// Halt executed
					ptr_job->b_stall_requested = false;
  401684:	eb08 0888 	add.w	r8, r8, r8, lsl #2
  401688:	4b54      	ldr	r3, [pc, #336]	; (4017dc <UDP_Handler+0x7b4>)
  40168a:	eb03 0388 	add.w	r3, r3, r8, lsl #2
  40168e:	7c5a      	ldrb	r2, [r3, #17]
  401690:	f36f 1245 	bfc	r2, #5, #1
  401694:	745a      	strb	r2, [r3, #17]
  401696:	e22c      	b.n	401af2 <UDP_Handler+0xaca>
				}
				return true;
			}
			// Finish Job when buffer end
			if (ptr_job->b_buf_end) {
  401698:	f013 0f80 	tst.w	r3, #128	; 0x80
  40169c:	d00f      	beq.n	4016be <UDP_Handler+0x696>
				ptr_job->b_buf_end = false;
  40169e:	eb08 0288 	add.w	r2, r8, r8, lsl #2
  4016a2:	4b4e      	ldr	r3, [pc, #312]	; (4017dc <UDP_Handler+0x7b4>)
  4016a4:	eb03 0382 	add.w	r3, r3, r2, lsl #2
  4016a8:	7c59      	ldrb	r1, [r3, #17]
  4016aa:	f36f 11c7 	bfc	r1, #7, #1
  4016ae:	7459      	strb	r1, [r3, #17]
				ptr_job->buf_size = ptr_job->buf_cnt; // buf_size is passed to callback as XFR count
  4016b0:	68da      	ldr	r2, [r3, #12]
  4016b2:	609a      	str	r2, [r3, #8]
				udd_ep_finish_job(ptr_job, UDD_EP_TRANSFER_OK, ep);
  4016b4:	4648      	mov	r0, r9
  4016b6:	2100      	movs	r1, #0
  4016b8:	4632      	mov	r2, r6
  4016ba:	4b49      	ldr	r3, [pc, #292]	; (4017e0 <UDP_Handler+0x7b8>)
  4016bc:	4798      	blx	r3
			}
			if (ptr_job->buf_cnt >= ptr_job->buf_size &&
  4016be:	eb08 0388 	add.w	r3, r8, r8, lsl #2
  4016c2:	4a46      	ldr	r2, [pc, #280]	; (4017dc <UDP_Handler+0x7b4>)
  4016c4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  4016c8:	68da      	ldr	r2, [r3, #12]
  4016ca:	689b      	ldr	r3, [r3, #8]
  4016cc:	429a      	cmp	r2, r3
  4016ce:	d338      	bcc.n	401742 <UDP_Handler+0x71a>
					!ptr_job->b_shortpacket &&
  4016d0:	eb08 0388 	add.w	r3, r8, r8, lsl #2
  4016d4:	4a41      	ldr	r2, [pc, #260]	; (4017dc <UDP_Handler+0x7b4>)
  4016d6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  4016da:	7c5b      	ldrb	r3, [r3, #17]
  4016dc:	f013 0f4c 	tst.w	r3, #76	; 0x4c
  4016e0:	d12f      	bne.n	401742 <UDP_Handler+0x71a>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  4016e2:	f3ef 8310 	mrs	r3, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
  4016e6:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  4016e8:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
  4016ec:	2100      	movs	r1, #0
  4016ee:	4a3d      	ldr	r2, [pc, #244]	; (4017e4 <UDP_Handler+0x7bc>)
  4016f0:	7011      	strb	r1, [r2, #0]
					ptr_job->bank == 0) {
				// All transfer done, including ZLP
				irqflags_t flags = cpu_irq_save();
				udd_disable_endpoint_interrupt(ep);
  4016f2:	4a39      	ldr	r2, [pc, #228]	; (4017d8 <UDP_Handler+0x7b0>)
  4016f4:	6154      	str	r4, [r2, #20]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  4016f6:	b92b      	cbnz	r3, 401704 <UDP_Handler+0x6dc>
		cpu_irq_enable();
  4016f8:	2201      	movs	r2, #1
  4016fa:	4b3a      	ldr	r3, [pc, #232]	; (4017e4 <UDP_Handler+0x7bc>)
  4016fc:	701a      	strb	r2, [r3, #0]
  4016fe:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
  401702:	b662      	cpsie	i
  401704:	00ab      	lsls	r3, r5, #2
  401706:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
  40170a:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
				cpu_irq_restore(flags);
				// Ack last packet
				udd_ack_in_sent(ep);
  40170e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  401710:	9220      	str	r2, [sp, #128]	; 0x80
  401712:	9a20      	ldr	r2, [sp, #128]	; 0x80
  401714:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  401718:	9220      	str	r2, [sp, #128]	; 0x80
  40171a:	9a20      	ldr	r2, [sp, #128]	; 0x80
  40171c:	f022 0201 	bic.w	r2, r2, #1
  401720:	9220      	str	r2, [sp, #128]	; 0x80
  401722:	9a20      	ldr	r2, [sp, #128]	; 0x80
  401724:	631a      	str	r2, [r3, #48]	; 0x30
  401726:	2300      	movs	r3, #0
  401728:	9321      	str	r3, [sp, #132]	; 0x84
  40172a:	9b21      	ldr	r3, [sp, #132]	; 0x84
  40172c:	2b13      	cmp	r3, #19
  40172e:	f200 81e0 	bhi.w	401af2 <UDP_Handler+0xaca>

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
  401732:	bf00      	nop
  401734:	9b21      	ldr	r3, [sp, #132]	; 0x84
  401736:	3301      	adds	r3, #1
  401738:	9321      	str	r3, [sp, #132]	; 0x84
  40173a:	9b21      	ldr	r3, [sp, #132]	; 0x84
  40173c:	2b13      	cmp	r3, #19
  40173e:	d9f8      	bls.n	401732 <UDP_Handler+0x70a>
  401740:	e1d7      	b.n	401af2 <UDP_Handler+0xaca>
				return true;
			} else if (udd_get_endpoint_bank_max_nbr(ep) > 1
  401742:	2e00      	cmp	r6, #0
  401744:	f000 808c 	beq.w	401860 <UDP_Handler+0x838>
  401748:	2e03      	cmp	r6, #3
  40174a:	f000 8089 	beq.w	401860 <UDP_Handler+0x838>
					&& ptr_job->bank > 0) {
  40174e:	eb08 0288 	add.w	r2, r8, r8, lsl #2
  401752:	4b22      	ldr	r3, [pc, #136]	; (4017dc <UDP_Handler+0x7b4>)
  401754:	eb03 0382 	add.w	r3, r3, r2, lsl #2
  401758:	7c5b      	ldrb	r3, [r3, #17]
  40175a:	f013 0f0c 	tst.w	r3, #12
  40175e:	d045      	beq.n	4017ec <UDP_Handler+0x7c4>
  401760:	00aa      	lsls	r2, r5, #2
  401762:	f102 2240 	add.w	r2, r2, #1073758208	; 0x40004000
  401766:	f502 3240 	add.w	r2, r2, #196608	; 0x30000
				// Already banks buffered, transmit while loading
				udd_set_transmit_ready(ep);
  40176a:	6b13      	ldr	r3, [r2, #48]	; 0x30
  40176c:	9322      	str	r3, [sp, #136]	; 0x88
  40176e:	9b22      	ldr	r3, [sp, #136]	; 0x88
  401770:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  401774:	9322      	str	r3, [sp, #136]	; 0x88
  401776:	9b22      	ldr	r3, [sp, #136]	; 0x88
  401778:	f043 0310 	orr.w	r3, r3, #16
  40177c:	9322      	str	r3, [sp, #136]	; 0x88
  40177e:	9b22      	ldr	r3, [sp, #136]	; 0x88
  401780:	6313      	str	r3, [r2, #48]	; 0x30
  401782:	2300      	movs	r3, #0
  401784:	9323      	str	r3, [sp, #140]	; 0x8c
  401786:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  401788:	2b13      	cmp	r3, #19
  40178a:	d806      	bhi.n	40179a <UDP_Handler+0x772>
  40178c:	bf00      	nop
  40178e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  401790:	3301      	adds	r3, #1
  401792:	9323      	str	r3, [sp, #140]	; 0x8c
  401794:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  401796:	2b13      	cmp	r3, #19
  401798:	d9f8      	bls.n	40178c <UDP_Handler+0x764>
				udd_ack_in_sent(ep);
  40179a:	6b13      	ldr	r3, [r2, #48]	; 0x30
  40179c:	9324      	str	r3, [sp, #144]	; 0x90
  40179e:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4017a0:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  4017a4:	9324      	str	r3, [sp, #144]	; 0x90
  4017a6:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4017a8:	f023 0301 	bic.w	r3, r3, #1
  4017ac:	9324      	str	r3, [sp, #144]	; 0x90
  4017ae:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4017b0:	6313      	str	r3, [r2, #48]	; 0x30
  4017b2:	2300      	movs	r3, #0
  4017b4:	9325      	str	r3, [sp, #148]	; 0x94
  4017b6:	9b25      	ldr	r3, [sp, #148]	; 0x94
  4017b8:	2b13      	cmp	r3, #19
  4017ba:	d806      	bhi.n	4017ca <UDP_Handler+0x7a2>
  4017bc:	bf00      	nop
  4017be:	9b25      	ldr	r3, [sp, #148]	; 0x94
  4017c0:	3301      	adds	r3, #1
  4017c2:	9325      	str	r3, [sp, #148]	; 0x94
  4017c4:	9b25      	ldr	r3, [sp, #148]	; 0x94
  4017c6:	2b13      	cmp	r3, #19
  4017c8:	d9f8      	bls.n	4017bc <UDP_Handler+0x794>
				udd_ep_in_sent(ep, false);
  4017ca:	4630      	mov	r0, r6
  4017cc:	2100      	movs	r1, #0
  4017ce:	4b06      	ldr	r3, [pc, #24]	; (4017e8 <UDP_Handler+0x7c0>)
  4017d0:	4798      	blx	r3
  4017d2:	e18e      	b.n	401af2 <UDP_Handler+0xaca>
  4017d4:	00400ce5 	.word	0x00400ce5
  4017d8:	40034000 	.word	0x40034000
  4017dc:	200009a8 	.word	0x200009a8
  4017e0:	00400ca5 	.word	0x00400ca5
  4017e4:	200000ac 	.word	0x200000ac
  4017e8:	00400dd9 	.word	0x00400dd9
			} else if (udd_get_endpoint_bank_max_nbr(ep) > 1) {
				// Still bank free, load and transmit
				if (!udd_ep_in_sent(ep, true)) {
  4017ec:	4630      	mov	r0, r6
  4017ee:	2101      	movs	r1, #1
  4017f0:	4b69      	ldr	r3, [pc, #420]	; (401998 <UDP_Handler+0x970>)
  4017f2:	4798      	blx	r3
  4017f4:	b990      	cbnz	r0, 40181c <UDP_Handler+0x7f4>
					ptr_job->b_buf_end = false;
  4017f6:	2314      	movs	r3, #20
  4017f8:	4a68      	ldr	r2, [pc, #416]	; (40199c <UDP_Handler+0x974>)
  4017fa:	fb03 2808 	mla	r8, r3, r8, r2
  4017fe:	f898 2011 	ldrb.w	r2, [r8, #17]
  401802:	f36f 12c7 	bfc	r2, #7, #1
  401806:	f888 2011 	strb.w	r2, [r8, #17]
					ptr_job->buf_size = ptr_job->buf_cnt; // buf_size is passed to callback as XFR count
  40180a:	f8d8 300c 	ldr.w	r3, [r8, #12]
  40180e:	f8c8 3008 	str.w	r3, [r8, #8]
					udd_ep_finish_job(ptr_job, UDD_EP_TRANSFER_OK, ep);
  401812:	4648      	mov	r0, r9
  401814:	2100      	movs	r1, #0
  401816:	4632      	mov	r2, r6
  401818:	4b61      	ldr	r3, [pc, #388]	; (4019a0 <UDP_Handler+0x978>)
  40181a:	4798      	blx	r3
  40181c:	00ab      	lsls	r3, r5, #2
  40181e:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
  401822:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
				}
				udd_ack_in_sent(ep);
  401826:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  401828:	9226      	str	r2, [sp, #152]	; 0x98
  40182a:	9a26      	ldr	r2, [sp, #152]	; 0x98
  40182c:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  401830:	9226      	str	r2, [sp, #152]	; 0x98
  401832:	9a26      	ldr	r2, [sp, #152]	; 0x98
  401834:	f022 0201 	bic.w	r2, r2, #1
  401838:	9226      	str	r2, [sp, #152]	; 0x98
  40183a:	9a26      	ldr	r2, [sp, #152]	; 0x98
  40183c:	631a      	str	r2, [r3, #48]	; 0x30
  40183e:	2300      	movs	r3, #0
  401840:	9327      	str	r3, [sp, #156]	; 0x9c
  401842:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  401844:	2b13      	cmp	r3, #19
  401846:	d806      	bhi.n	401856 <UDP_Handler+0x82e>
  401848:	bf00      	nop
  40184a:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  40184c:	3301      	adds	r3, #1
  40184e:	9327      	str	r3, [sp, #156]	; 0x9c
  401850:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  401852:	2b13      	cmp	r3, #19
  401854:	d9f8      	bls.n	401848 <UDP_Handler+0x820>
				udd_ep_in_sent(ep, false);
  401856:	4630      	mov	r0, r6
  401858:	2100      	movs	r1, #0
  40185a:	4b4f      	ldr	r3, [pc, #316]	; (401998 <UDP_Handler+0x970>)
  40185c:	4798      	blx	r3
  40185e:	e148      	b.n	401af2 <UDP_Handler+0xaca>
			} else {
				// Single bank transfer, ack when ready
				udd_ep_in_sent(ep, true);
  401860:	4630      	mov	r0, r6
  401862:	2101      	movs	r1, #1
  401864:	4b4c      	ldr	r3, [pc, #304]	; (401998 <UDP_Handler+0x970>)
  401866:	4798      	blx	r3
  401868:	00ab      	lsls	r3, r5, #2
  40186a:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
  40186e:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
				udd_ack_in_sent(ep);
  401872:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  401874:	9228      	str	r2, [sp, #160]	; 0xa0
  401876:	9a28      	ldr	r2, [sp, #160]	; 0xa0
  401878:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  40187c:	9228      	str	r2, [sp, #160]	; 0xa0
  40187e:	9a28      	ldr	r2, [sp, #160]	; 0xa0
  401880:	f022 0201 	bic.w	r2, r2, #1
  401884:	9228      	str	r2, [sp, #160]	; 0xa0
  401886:	9a28      	ldr	r2, [sp, #160]	; 0xa0
  401888:	631a      	str	r2, [r3, #48]	; 0x30
  40188a:	2300      	movs	r3, #0
  40188c:	9329      	str	r3, [sp, #164]	; 0xa4
  40188e:	9b29      	ldr	r3, [sp, #164]	; 0xa4
  401890:	2b13      	cmp	r3, #19
  401892:	f200 812e 	bhi.w	401af2 <UDP_Handler+0xaca>
  401896:	bf00      	nop
  401898:	9b29      	ldr	r3, [sp, #164]	; 0xa4
  40189a:	3301      	adds	r3, #1
  40189c:	9329      	str	r3, [sp, #164]	; 0xa4
  40189e:	9b29      	ldr	r3, [sp, #164]	; 0xa4
  4018a0:	2b13      	cmp	r3, #19
  4018a2:	d9f8      	bls.n	401896 <UDP_Handler+0x86e>
  4018a4:	e125      	b.n	401af2 <UDP_Handler+0xaca>
			}
			return true;
		}
		// Stall sent/CRC error
		if (Is_udd_stall(ep)) {
  4018a6:	6b12      	ldr	r2, [r2, #48]	; 0x30
  4018a8:	f012 0f08 	tst.w	r2, #8
  4018ac:	d025      	beq.n	4018fa <UDP_Handler+0x8d2>
  4018ae:	009b      	lsls	r3, r3, #2
  4018b0:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
  4018b4:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
			udd_ack_stall(ep);
  4018b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  4018ba:	922a      	str	r2, [sp, #168]	; 0xa8
  4018bc:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
  4018be:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  4018c2:	922a      	str	r2, [sp, #168]	; 0xa8
  4018c4:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
  4018c6:	f022 0208 	bic.w	r2, r2, #8
  4018ca:	922a      	str	r2, [sp, #168]	; 0xa8
  4018cc:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
  4018ce:	631a      	str	r2, [r3, #48]	; 0x30
  4018d0:	2200      	movs	r2, #0
  4018d2:	922b      	str	r2, [sp, #172]	; 0xac
  4018d4:	9a2b      	ldr	r2, [sp, #172]	; 0xac
  4018d6:	2a13      	cmp	r2, #19
  4018d8:	d806      	bhi.n	4018e8 <UDP_Handler+0x8c0>
  4018da:	bf00      	nop
  4018dc:	9a2b      	ldr	r2, [sp, #172]	; 0xac
  4018de:	3201      	adds	r2, #1
  4018e0:	922b      	str	r2, [sp, #172]	; 0xac
  4018e2:	9a2b      	ldr	r2, [sp, #172]	; 0xac
  4018e4:	2a13      	cmp	r2, #19
  4018e6:	d9f8      	bls.n	4018da <UDP_Handler+0x8b2>
			if (udd_get_endpoint_type(ep) == UDP_CSR_EPTYPE_ISO_OUT ||
  4018e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  4018ea:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  4018ee:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
  4018f2:	f000 80fe 	beq.w	401af2 <UDP_Handler+0xaca>
				udd_get_endpoint_type(ep) == UDP_CSR_EPTYPE_ISO_IN) {
  4018f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4018f8:	e0fb      	b.n	401af2 <UDP_Handler+0xaca>
  4018fa:	3301      	adds	r3, #1
  4018fc:	3114      	adds	r1, #20
{
	udd_ep_id_t ep;
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
  4018fe:	2b07      	cmp	r3, #7
  401900:	f47f add1 	bne.w	4014a6 <UDP_Handler+0x47e>
  401904:	e0ee      	b.n	401ae4 <UDP_Handler+0xabc>
	if (udd_ep_interrupt()) {
		goto udd_interrupt_end; // Interrupt acked by bulk/interrupt/isochronous endpoint managed
	}
#endif

	if ((Is_udd_wake_up_interrupt_enabled() && Is_udd_wake_up()) ||
  401906:	4b27      	ldr	r3, [pc, #156]	; (4019a4 <UDP_Handler+0x97c>)
  401908:	69db      	ldr	r3, [r3, #28]
  40190a:	f413 5f00 	tst.w	r3, #8192	; 0x2000
  40190e:	d113      	bne.n	401938 <UDP_Handler+0x910>
		(Is_udd_resume_interrupt_enabled() && Is_udd_resume()) ||
  401910:	4b24      	ldr	r3, [pc, #144]	; (4019a4 <UDP_Handler+0x97c>)
  401912:	699b      	ldr	r3, [r3, #24]
	if (udd_ep_interrupt()) {
		goto udd_interrupt_end; // Interrupt acked by bulk/interrupt/isochronous endpoint managed
	}
#endif

	if ((Is_udd_wake_up_interrupt_enabled() && Is_udd_wake_up()) ||
  401914:	f413 7f00 	tst.w	r3, #512	; 0x200
  401918:	d004      	beq.n	401924 <UDP_Handler+0x8fc>
		(Is_udd_resume_interrupt_enabled() && Is_udd_resume()) ||
  40191a:	4b22      	ldr	r3, [pc, #136]	; (4019a4 <UDP_Handler+0x97c>)
  40191c:	69db      	ldr	r3, [r3, #28]
  40191e:	f413 7f00 	tst.w	r3, #512	; 0x200
  401922:	d109      	bne.n	401938 <UDP_Handler+0x910>
		(Is_udd_ext_resume_interrupt_enabled() && Is_udd_ext_resume())) {
  401924:	4b1f      	ldr	r3, [pc, #124]	; (4019a4 <UDP_Handler+0x97c>)
  401926:	699b      	ldr	r3, [r3, #24]
		goto udd_interrupt_end; // Interrupt acked by bulk/interrupt/isochronous endpoint managed
	}
#endif

	if ((Is_udd_wake_up_interrupt_enabled() && Is_udd_wake_up()) ||
		(Is_udd_resume_interrupt_enabled() && Is_udd_resume()) ||
  401928:	f413 6f80 	tst.w	r3, #1024	; 0x400
  40192c:	d014      	beq.n	401958 <UDP_Handler+0x930>
		(Is_udd_ext_resume_interrupt_enabled() && Is_udd_ext_resume())) {
  40192e:	4b1d      	ldr	r3, [pc, #116]	; (4019a4 <UDP_Handler+0x97c>)
  401930:	69db      	ldr	r3, [r3, #28]
  401932:	f413 6f80 	tst.w	r3, #1024	; 0x400
  401936:	d00f      	beq.n	401958 <UDP_Handler+0x930>
		// Ack wakeup interrupt and enable suspend interrupt
		udd_ack_wakeups();
  401938:	4c1a      	ldr	r4, [pc, #104]	; (4019a4 <UDP_Handler+0x97c>)
  40193a:	f44f 5318 	mov.w	r3, #9728	; 0x2600
  40193e:	6223      	str	r3, [r4, #32]
		// Do resume operations
		udd_disable_wakeups();
  401940:	6163      	str	r3, [r4, #20]

		udd_sleep_mode(true); // Enter in IDLE mode
  401942:	2001      	movs	r0, #1
  401944:	4b18      	ldr	r3, [pc, #96]	; (4019a8 <UDP_Handler+0x980>)
  401946:	4798      	blx	r3
#ifdef UDC_RESUME_EVENT
		UDC_RESUME_EVENT();
#endif
		udd_ack_suspend();
  401948:	f44f 7380 	mov.w	r3, #256	; 0x100
  40194c:	6223      	str	r3, [r4, #32]
		udd_enable_suspend_interrupt();
  40194e:	6123      	str	r3, [r4, #16]
		udd_enable_sof_interrupt();
  401950:	f44f 6300 	mov.w	r3, #2048	; 0x800
  401954:	6123      	str	r3, [r4, #16]
		goto udd_interrupt_end;
  401956:	e0cc      	b.n	401af2 <UDP_Handler+0xaca>
	}

	if (Is_udd_suspend_interrupt_enabled() && Is_udd_suspend()) {
  401958:	4b12      	ldr	r3, [pc, #72]	; (4019a4 <UDP_Handler+0x97c>)
  40195a:	699b      	ldr	r3, [r3, #24]
  40195c:	f413 7f80 	tst.w	r3, #256	; 0x100
  401960:	d026      	beq.n	4019b0 <UDP_Handler+0x988>
  401962:	4b10      	ldr	r3, [pc, #64]	; (4019a4 <UDP_Handler+0x97c>)
  401964:	69db      	ldr	r3, [r3, #28]
  401966:	f413 7f80 	tst.w	r3, #256	; 0x100
  40196a:	d021      	beq.n	4019b0 <UDP_Handler+0x988>
		// Ack suspend interrupt and enable resume interrupt
		udd_ack_suspend();
  40196c:	4b0d      	ldr	r3, [pc, #52]	; (4019a4 <UDP_Handler+0x97c>)
  40196e:	f44f 7280 	mov.w	r2, #256	; 0x100
  401972:	621a      	str	r2, [r3, #32]
		udd_disable_suspend_interrupt();
  401974:	615a      	str	r2, [r3, #20]
		udd_enable_wake_up_interrupt();
  401976:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  40197a:	611a      	str	r2, [r3, #16]
		udd_enable_resume_interrupt();
  40197c:	f44f 7200 	mov.w	r2, #512	; 0x200
  401980:	611a      	str	r2, [r3, #16]
		udd_enable_ext_resume_interrupt();
  401982:	f44f 6280 	mov.w	r2, #1024	; 0x400
  401986:	611a      	str	r2, [r3, #16]
		udd_disable_periph_ck();
  401988:	2022      	movs	r0, #34	; 0x22
  40198a:	4b08      	ldr	r3, [pc, #32]	; (4019ac <UDP_Handler+0x984>)
  40198c:	4798      	blx	r3

		udd_sleep_mode(false); // Enter in SUSPEND mode
  40198e:	2000      	movs	r0, #0
  401990:	4b05      	ldr	r3, [pc, #20]	; (4019a8 <UDP_Handler+0x980>)
  401992:	4798      	blx	r3
#ifdef UDC_SUSPEND_EVENT
		UDC_SUSPEND_EVENT();
#endif
		goto udd_interrupt_end;
  401994:	e0ad      	b.n	401af2 <UDP_Handler+0xaca>
  401996:	bf00      	nop
  401998:	00400dd9 	.word	0x00400dd9
  40199c:	200009a8 	.word	0x200009a8
  4019a0:	00400ca5 	.word	0x00400ca5
  4019a4:	40034000 	.word	0x40034000
  4019a8:	00400f99 	.word	0x00400f99
  4019ac:	004027e1 	.word	0x004027e1
	}
	if (Is_udd_reset()) {
  4019b0:	4b51      	ldr	r3, [pc, #324]	; (401af8 <UDP_Handler+0xad0>)
  4019b2:	69db      	ldr	r3, [r3, #28]
  4019b4:	f413 5f80 	tst.w	r3, #4096	; 0x1000
  4019b8:	f000 809b 	beq.w	401af2 <UDP_Handler+0xaca>
		// USB bus reset detection
		udd_ack_reset();
  4019bc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  4019c0:	4b4d      	ldr	r3, [pc, #308]	; (401af8 <UDP_Handler+0xad0>)
  4019c2:	621a      	str	r2, [r3, #32]
static void udd_ep_job_table_kill(void)
{
	uint8_t i;

	// For each endpoint, kill job
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
  4019c4:	2400      	movs	r4, #0
		udd_ep_finish_job(&udd_ep_job[i], UDD_EP_TRANSFER_ABORT, i + 1);
  4019c6:	2601      	movs	r6, #1
  4019c8:	4d4c      	ldr	r5, [pc, #304]	; (401afc <UDP_Handler+0xad4>)
  4019ca:	3401      	adds	r4, #1
  4019cc:	b2e4      	uxtb	r4, r4
  4019ce:	4638      	mov	r0, r7
  4019d0:	4631      	mov	r1, r6
  4019d2:	4622      	mov	r2, r4
  4019d4:	47a8      	blx	r5
  4019d6:	3714      	adds	r7, #20
static void udd_ep_job_table_kill(void)
{
	uint8_t i;

	// For each endpoint, kill job
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
  4019d8:	2c06      	cmp	r4, #6
  4019da:	d1f6      	bne.n	4019ca <UDP_Handler+0x9a2>
		// Abort all jobs on-going
#if (0 != USB_DEVICE_MAX_EP)
		udd_ep_job_table_kill();
#endif
		// Reset USB Device Stack Core
		udc_reset();
  4019dc:	4b48      	ldr	r3, [pc, #288]	; (401b00 <UDP_Handler+0xad8>)
  4019de:	4798      	blx	r3
		// Reset device state
		udd_disable_address_state();
  4019e0:	4b45      	ldr	r3, [pc, #276]	; (401af8 <UDP_Handler+0xad0>)
  4019e2:	685a      	ldr	r2, [r3, #4]
  4019e4:	f022 0201 	bic.w	r2, r2, #1
  4019e8:	605a      	str	r2, [r3, #4]
		udd_disable_configured_state();
  4019ea:	685a      	ldr	r2, [r3, #4]
  4019ec:	f022 0202 	bic.w	r2, r2, #2
  4019f0:	605a      	str	r2, [r3, #4]
static void udd_reset_ep_ctrl(void)
{
	irqflags_t flags;

	// Reset USB address to 0
	udd_enable_address();
  4019f2:	689a      	ldr	r2, [r3, #8]
  4019f4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
  4019f8:	609a      	str	r2, [r3, #8]
	udd_configure_address(0);
  4019fa:	689a      	ldr	r2, [r3, #8]
  4019fc:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
  401a00:	609a      	str	r2, [r3, #8]
	// Alloc and configure control endpoint in OUT direction
	udd_configure_endpoint(0, USB_EP_TYPE_CONTROL, 0);
  401a02:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  401a04:	922c      	str	r2, [sp, #176]	; 0xb0
  401a06:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
  401a08:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  401a0c:	922c      	str	r2, [sp, #176]	; 0xb0
  401a0e:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
  401a10:	f422 4207 	bic.w	r2, r2, #34560	; 0x8700
  401a14:	f022 0280 	bic.w	r2, r2, #128	; 0x80
  401a18:	922c      	str	r2, [sp, #176]	; 0xb0
  401a1a:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
  401a1c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
  401a20:	922c      	str	r2, [sp, #176]	; 0xb0
  401a22:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
  401a24:	631a      	str	r2, [r3, #48]	; 0x30
  401a26:	2300      	movs	r3, #0
  401a28:	932d      	str	r3, [sp, #180]	; 0xb4
  401a2a:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
  401a2c:	2b13      	cmp	r3, #19
  401a2e:	d806      	bhi.n	401a3e <UDP_Handler+0xa16>
  401a30:	bf00      	nop
  401a32:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
  401a34:	3301      	adds	r3, #1
  401a36:	932d      	str	r3, [sp, #180]	; 0xb4
  401a38:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
  401a3a:	2b13      	cmp	r3, #19
  401a3c:	d9f8      	bls.n	401a30 <UDP_Handler+0xa08>
	udd_enable_endpoint(0);
  401a3e:	4a2e      	ldr	r2, [pc, #184]	; (401af8 <UDP_Handler+0xad0>)
  401a40:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401a42:	932e      	str	r3, [sp, #184]	; 0xb8
  401a44:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
  401a46:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  401a4a:	932e      	str	r3, [sp, #184]	; 0xb8
  401a4c:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
  401a4e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
  401a52:	932e      	str	r3, [sp, #184]	; 0xb8
  401a54:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
  401a56:	6313      	str	r3, [r2, #48]	; 0x30
  401a58:	2300      	movs	r3, #0
  401a5a:	932f      	str	r3, [sp, #188]	; 0xbc
  401a5c:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
  401a5e:	2b13      	cmp	r3, #19
  401a60:	d806      	bhi.n	401a70 <UDP_Handler+0xa48>
  401a62:	bf00      	nop
  401a64:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
  401a66:	3301      	adds	r3, #1
  401a68:	932f      	str	r3, [sp, #188]	; 0xbc
  401a6a:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
  401a6c:	2b13      	cmp	r3, #19
  401a6e:	d9f8      	bls.n	401a62 <UDP_Handler+0xa3a>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  401a70:	f3ef 8310 	mrs	r3, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
  401a74:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  401a76:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
  401a7a:	2100      	movs	r1, #0
  401a7c:	4a21      	ldr	r2, [pc, #132]	; (401b04 <UDP_Handler+0xadc>)
  401a7e:	7011      	strb	r1, [r2, #0]

	flags = cpu_irq_save();
	udd_enable_endpoint_interrupt(0);
  401a80:	2101      	movs	r1, #1
  401a82:	4a1d      	ldr	r2, [pc, #116]	; (401af8 <UDP_Handler+0xad0>)
  401a84:	6111      	str	r1, [r2, #16]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  401a86:	b923      	cbnz	r3, 401a92 <UDP_Handler+0xa6a>
		cpu_irq_enable();
  401a88:	4b1e      	ldr	r3, [pc, #120]	; (401b04 <UDP_Handler+0xadc>)
  401a8a:	7019      	strb	r1, [r3, #0]
  401a8c:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
  401a90:	b662      	cpsie	i
		udd_disable_address_state();
		udd_disable_configured_state();
		// Reset endpoint control
		udd_reset_ep_ctrl();
		// Reset endpoint control management
		udd_ctrl_init();
  401a92:	4b1d      	ldr	r3, [pc, #116]	; (401b08 <UDP_Handler+0xae0>)
  401a94:	4798      	blx	r3
		// After a USB reset, the suspend and SOF interrupt masks has been reseted
		// Thus, re-enable these
		udd_enable_suspend_interrupt();
  401a96:	4b18      	ldr	r3, [pc, #96]	; (401af8 <UDP_Handler+0xad0>)
  401a98:	f44f 7280 	mov.w	r2, #256	; 0x100
  401a9c:	611a      	str	r2, [r3, #16]
		udd_enable_sof_interrupt();
  401a9e:	f44f 6200 	mov.w	r2, #2048	; 0x800
  401aa2:	611a      	str	r2, [r3, #16]
		goto udd_interrupt_end;
  401aa4:	e025      	b.n	401af2 <UDP_Handler+0xaca>
		if (nb_data >= nb_remain) {
			nb_data = nb_remain;
			b_full = true;
		}
		// Modify job information
		ptr_job->buf_cnt += nb_data;
  401aa6:	eb08 0288 	add.w	r2, r8, r8, lsl #2
  401aaa:	4818      	ldr	r0, [pc, #96]	; (401b0c <UDP_Handler+0xae4>)
  401aac:	eb00 0282 	add.w	r2, r0, r2, lsl #2
  401ab0:	1878      	adds	r0, r7, r1
  401ab2:	60d0      	str	r0, [r2, #12]
	uint32_t pkt_size = ptr_job->size;
	uint8_t *ptr_dst = &ptr_job->buf[ptr_job->buf_cnt];
	bool b_full = false, b_short;

	// Read byte count
	nb_data = udd_byte_count(ep);
  401ab4:	4638      	mov	r0, r7
	udd_ep_job_t *ptr_job = &udd_ep_job[ep - 1];
	uint32_t nb_data = 0, i;
	uint32_t nb_remain = ptr_job->buf_size - ptr_job->buf_cnt;
	uint32_t pkt_size = ptr_job->size;
	uint8_t *ptr_dst = &ptr_job->buf[ptr_job->buf_cnt];
	bool b_full = false, b_short;
  401ab6:	f04f 0b00 	mov.w	fp, #0
  401aba:	e537      	b.n	40152c <UDP_Handler+0x504>
		for (i = 0; i < nb_data; i++) {
			*ptr_dst++ = udd_endpoint_fifo_read(ep);
		}
	}
	// Clear FIFO Status
	udd_ep_ack_out_received(ep);
  401abc:	4630      	mov	r0, r6
  401abe:	4b14      	ldr	r3, [pc, #80]	; (401b10 <UDP_Handler+0xae8>)
  401ac0:	4798      	blx	r3
  401ac2:	e544      	b.n	40154e <UDP_Handler+0x526>
		if (nb_data >= nb_remain) {
			nb_data = nb_remain;
			b_full = true;
		}
		// Modify job information
		ptr_job->buf_cnt += nb_data;
  401ac4:	eb08 0e88 	add.w	lr, r8, r8, lsl #2
  401ac8:	f8df c040 	ldr.w	ip, [pc, #64]	; 401b0c <UDP_Handler+0xae4>
  401acc:	eb0c 0e8e 	add.w	lr, ip, lr, lsl #2
  401ad0:	f8ce 200c 	str.w	r2, [lr, #12]

		// Copy FIFO (DPRAM) to buffer
		for (i = 0; i < nb_data; i++) {
  401ad4:	2800      	cmp	r0, #0
  401ad6:	f47f ad27 	bne.w	401528 <UDP_Handler+0x500>
  401ada:	e7ef      	b.n	401abc <UDP_Handler+0xa94>
			*ptr_dst++ = udd_endpoint_fifo_read(ep);
		}
	}
	// Clear FIFO Status
	udd_ep_ack_out_received(ep);
  401adc:	4630      	mov	r0, r6
  401ade:	4b0c      	ldr	r3, [pc, #48]	; (401b10 <UDP_Handler+0xae8>)
  401ae0:	4798      	blx	r3
  401ae2:	e531      	b.n	401548 <UDP_Handler+0x520>
	if (udd_ep_interrupt()) {
		goto udd_interrupt_end; // Interrupt acked by bulk/interrupt/isochronous endpoint managed
	}
#endif

	if ((Is_udd_wake_up_interrupt_enabled() && Is_udd_wake_up()) ||
  401ae4:	4b04      	ldr	r3, [pc, #16]	; (401af8 <UDP_Handler+0xad0>)
  401ae6:	699b      	ldr	r3, [r3, #24]
  401ae8:	f413 5f00 	tst.w	r3, #8192	; 0x2000
  401aec:	f47f af0b 	bne.w	401906 <UDP_Handler+0x8de>
  401af0:	e70e      	b.n	401910 <UDP_Handler+0x8e8>
	}

udd_interrupt_end:
udd_interrupt_sof_end:
	return;
}
  401af2:	b031      	add	sp, #196	; 0xc4
  401af4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401af8:	40034000 	.word	0x40034000
  401afc:	00400ca5 	.word	0x00400ca5
  401b00:	00400355 	.word	0x00400355
  401b04:	200000ac 	.word	0x200000ac
  401b08:	004009ed 	.word	0x004009ed
  401b0c:	200009a8 	.word	0x200009a8
  401b10:	00400ce5 	.word	0x00400ce5

00401b14 <udd_attach>:
	cpu_irq_restore(flags);
}


void udd_attach(void)
{
  401b14:	b510      	push	{r4, lr}
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  401b16:	f3ef 8410 	mrs	r4, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
  401b1a:	b672      	cpsid	i
  401b1c:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
  401b20:	2200      	movs	r2, #0
  401b22:	4b14      	ldr	r3, [pc, #80]	; (401b74 <udd_attach+0x60>)
  401b24:	701a      	strb	r2, [r3, #0]
	irqflags_t flags;
	flags = cpu_irq_save();

	// At startup the USB bus state is unknown,
	// therefore the state is considered IDLE to not miss any USB event
	udd_sleep_mode(true);
  401b26:	2001      	movs	r0, #1
  401b28:	4b13      	ldr	r3, [pc, #76]	; (401b78 <udd_attach+0x64>)
  401b2a:	4798      	blx	r3

	// Enable peripheral clock and USB clock
	udd_enable_periph_ck();
  401b2c:	2022      	movs	r0, #34	; 0x22
  401b2e:	4b13      	ldr	r3, [pc, #76]	; (401b7c <udd_attach+0x68>)
  401b30:	4798      	blx	r3

	// Authorize attach if VBus is present
	udd_enable_transceiver();
  401b32:	4b13      	ldr	r3, [pc, #76]	; (401b80 <udd_attach+0x6c>)
  401b34:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  401b36:	f422 7280 	bic.w	r2, r2, #256	; 0x100
  401b3a:	675a      	str	r2, [r3, #116]	; 0x74
	udd_attach_device();
  401b3c:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  401b3e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
  401b42:	675a      	str	r2, [r3, #116]	; 0x74

	// Enable USB line events
	udd_enable_suspend_interrupt();
  401b44:	f44f 7280 	mov.w	r2, #256	; 0x100
  401b48:	611a      	str	r2, [r3, #16]
	udd_enable_wake_up_interrupt();
  401b4a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  401b4e:	611a      	str	r2, [r3, #16]
	udd_enable_resume_interrupt();
  401b50:	f44f 7200 	mov.w	r2, #512	; 0x200
  401b54:	611a      	str	r2, [r3, #16]
	udd_enable_ext_resume_interrupt();
  401b56:	f44f 6280 	mov.w	r2, #1024	; 0x400
  401b5a:	611a      	str	r2, [r3, #16]
	udd_enable_sof_interrupt();
  401b5c:	f44f 6200 	mov.w	r2, #2048	; 0x800
  401b60:	611a      	str	r2, [r3, #16]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  401b62:	b92c      	cbnz	r4, 401b70 <udd_attach+0x5c>
		cpu_irq_enable();
  401b64:	2201      	movs	r2, #1
  401b66:	4b03      	ldr	r3, [pc, #12]	; (401b74 <udd_attach+0x60>)
  401b68:	701a      	strb	r2, [r3, #0]
  401b6a:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
  401b6e:	b662      	cpsie	i
  401b70:	bd10      	pop	{r4, pc}
  401b72:	bf00      	nop
  401b74:	200000ac 	.word	0x200000ac
  401b78:	00400f99 	.word	0x00400f99
  401b7c:	0040278d 	.word	0x0040278d
  401b80:	40034000 	.word	0x40034000

00401b84 <udd_enable>:
#endif
}


void udd_enable(void)
{
  401b84:	b538      	push	{r3, r4, r5, lr}
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  401b86:	f3ef 8510 	mrs	r5, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
  401b8a:	b672      	cpsid	i
  401b8c:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
  401b90:	2400      	movs	r4, #0
  401b92:	4b24      	ldr	r3, [pc, #144]	; (401c24 <udd_enable+0xa0>)
  401b94:	701c      	strb	r4, [r3, #0]
#if SAMG55
	matrix_set_usb_device();
#endif

	// Enable USB hardware
	udd_enable_periph_ck();
  401b96:	2022      	movs	r0, #34	; 0x22
  401b98:	4b23      	ldr	r3, [pc, #140]	; (401c28 <udd_enable+0xa4>)
  401b9a:	4798      	blx	r3
	sysclk_enable_usb();
  401b9c:	4b23      	ldr	r3, [pc, #140]	; (401c2c <udd_enable+0xa8>)
  401b9e:	4798      	blx	r3
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
  401ba0:	4b23      	ldr	r3, [pc, #140]	; (401c30 <udd_enable+0xac>)
  401ba2:	2250      	movs	r2, #80	; 0x50
  401ba4:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  401ba8:	2204      	movs	r2, #4
  401baa:	605a      	str	r2, [r3, #4]
  401bac:	4623      	mov	r3, r4

static void udd_ep_job_table_reset(void)
{
	uint8_t i;
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
		udd_ep_job[i].bank = 0;
  401bae:	4821      	ldr	r0, [pc, #132]	; (401c34 <udd_enable+0xb0>)
  401bb0:	009a      	lsls	r2, r3, #2
  401bb2:	18d1      	adds	r1, r2, r3
  401bb4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
  401bb8:	7c49      	ldrb	r1, [r1, #17]
		udd_ep_job[i].busy = false;
		udd_ep_job[i].b_stall_requested = false;
		udd_ep_job[i].b_shortpacket = false;
		udd_ep_job[i].b_buf_end = false;
  401bba:	441a      	add	r2, r3
  401bbc:	eb00 0282 	add.w	r2, r0, r2, lsl #2
  401bc0:	f001 0183 	and.w	r1, r1, #131	; 0x83
  401bc4:	f36f 11c7 	bfc	r1, #7, #1
  401bc8:	7451      	strb	r1, [r2, #17]
  401bca:	3301      	adds	r3, #1
#if (0!=USB_DEVICE_MAX_EP)

static void udd_ep_job_table_reset(void)
{
	uint8_t i;
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
  401bcc:	2b06      	cmp	r3, #6
  401bce:	d1ef      	bne.n	401bb0 <udd_enable+0x2c>
#if (0!=USB_DEVICE_MAX_EP)
	udd_ep_job_table_reset();
#endif

	// Always authorize asynchronous USB interrupts to exit of sleep mode
	pmc_set_fast_startup_input(PMC_FSMR_USBAL);
  401bd0:	f44f 2080 	mov.w	r0, #262144	; 0x40000
  401bd4:	4b18      	ldr	r3, [pc, #96]	; (401c38 <udd_enable+0xb4>)
  401bd6:	4798      	blx	r3

#ifndef UDD_NO_SLEEP_MGR
	// Initialize the sleep mode authorized for the USB suspend mode
	udd_b_idle = false;
  401bd8:	2200      	movs	r2, #0
  401bda:	4b18      	ldr	r3, [pc, #96]	; (401c3c <udd_enable+0xb8>)
  401bdc:	701a      	strb	r2, [r3, #0]
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
  401bde:	4b18      	ldr	r3, [pc, #96]	; (401c40 <udd_enable+0xbc>)
  401be0:	781b      	ldrb	r3, [r3, #0]
  401be2:	2bff      	cmp	r3, #255	; 0xff
  401be4:	d100      	bne.n	401be8 <udd_enable+0x64>
  401be6:	e7fe      	b.n	401be6 <udd_enable+0x62>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  401be8:	f3ef 8310 	mrs	r3, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
  401bec:	b672      	cpsid	i
  401bee:	f3bf 8f5f 	dmb	sy
  401bf2:	2100      	movs	r1, #0
  401bf4:	4a0b      	ldr	r2, [pc, #44]	; (401c24 <udd_enable+0xa0>)
  401bf6:	7011      	strb	r1, [r2, #0]
	}

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
  401bf8:	4911      	ldr	r1, [pc, #68]	; (401c40 <udd_enable+0xbc>)
  401bfa:	780a      	ldrb	r2, [r1, #0]
  401bfc:	3201      	adds	r2, #1
  401bfe:	700a      	strb	r2, [r1, #0]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  401c00:	b92b      	cbnz	r3, 401c0e <udd_enable+0x8a>
		cpu_irq_enable();
  401c02:	2201      	movs	r2, #1
  401c04:	4b07      	ldr	r3, [pc, #28]	; (401c24 <udd_enable+0xa0>)
  401c06:	701a      	strb	r2, [r3, #0]
  401c08:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
  401c0c:	b662      	cpsie	i
	if (Is_udd_vbus_high()) {
		udd_vbus_handler(USB_VBUS_PIO_ID, USB_VBUS_PIO_MASK);
	}
#else
#  ifndef USB_DEVICE_ATTACH_AUTO_DISABLE
	udd_attach();
  401c0e:	4b0d      	ldr	r3, [pc, #52]	; (401c44 <udd_enable+0xc0>)
  401c10:	4798      	blx	r3
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  401c12:	b92d      	cbnz	r5, 401c20 <udd_enable+0x9c>
		cpu_irq_enable();
  401c14:	2201      	movs	r2, #1
  401c16:	4b03      	ldr	r3, [pc, #12]	; (401c24 <udd_enable+0xa0>)
  401c18:	701a      	strb	r2, [r3, #0]
  401c1a:	f3bf 8f5f 	dmb	sy
  401c1e:	b662      	cpsie	i
  401c20:	bd38      	pop	{r3, r4, r5, pc}
  401c22:	bf00      	nop
  401c24:	200000ac 	.word	0x200000ac
  401c28:	0040278d 	.word	0x0040278d
  401c2c:	0040234d 	.word	0x0040234d
  401c30:	e000e100 	.word	0xe000e100
  401c34:	200009a8 	.word	0x200009a8
  401c38:	00402855 	.word	0x00402855
  401c3c:	20000a20 	.word	0x20000a20
  401c40:	20000a78 	.word	0x20000a78
  401c44:	00401b15 	.word	0x00401b15

00401c48 <udd_set_address>:
}


void udd_set_address(uint8_t address)
{
	udd_disable_address_state();
  401c48:	4b0c      	ldr	r3, [pc, #48]	; (401c7c <udd_set_address+0x34>)
  401c4a:	685a      	ldr	r2, [r3, #4]
  401c4c:	f022 0201 	bic.w	r2, r2, #1
  401c50:	605a      	str	r2, [r3, #4]
	udd_disable_address();
  401c52:	689a      	ldr	r2, [r3, #8]
  401c54:	f422 7280 	bic.w	r2, r2, #256	; 0x100
  401c58:	609a      	str	r2, [r3, #8]
	if (address) {
  401c5a:	b170      	cbz	r0, 401c7a <udd_set_address+0x32>
		udd_configure_address(address);
  401c5c:	689a      	ldr	r2, [r3, #8]
  401c5e:	f000 007f 	and.w	r0, r0, #127	; 0x7f
  401c62:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
  401c66:	4310      	orrs	r0, r2
  401c68:	6098      	str	r0, [r3, #8]
		udd_enable_address();
  401c6a:	689a      	ldr	r2, [r3, #8]
  401c6c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
  401c70:	609a      	str	r2, [r3, #8]
		udd_enable_address_state();
  401c72:	685a      	ldr	r2, [r3, #4]
  401c74:	f042 0201 	orr.w	r2, r2, #1
  401c78:	605a      	str	r2, [r3, #4]
  401c7a:	4770      	bx	lr
  401c7c:	40034000 	.word	0x40034000

00401c80 <udd_getaddress>:
}


uint8_t udd_getaddress(void)
{
	if (Is_udd_address_state_enabled())
  401c80:	4b05      	ldr	r3, [pc, #20]	; (401c98 <udd_getaddress+0x18>)
  401c82:	685b      	ldr	r3, [r3, #4]
  401c84:	f013 0f01 	tst.w	r3, #1
		return udd_get_configured_address();
  401c88:	bf1d      	ittte	ne
  401c8a:	4b03      	ldrne	r3, [pc, #12]	; (401c98 <udd_getaddress+0x18>)
  401c8c:	6898      	ldrne	r0, [r3, #8]
  401c8e:	f000 007f 	andne.w	r0, r0, #127	; 0x7f
	return 0;
  401c92:	2000      	moveq	r0, #0
}
  401c94:	4770      	bx	lr
  401c96:	bf00      	nop
  401c98:	40034000 	.word	0x40034000

00401c9c <udd_set_setup_payload>:
}


void udd_set_setup_payload( uint8_t *payload, uint16_t payload_size )
{
	udd_g_ctrlreq.payload = payload;
  401c9c:	4b01      	ldr	r3, [pc, #4]	; (401ca4 <udd_set_setup_payload+0x8>)
  401c9e:	6098      	str	r0, [r3, #8]
	udd_g_ctrlreq.payload_size = payload_size;
  401ca0:	8199      	strh	r1, [r3, #12]
  401ca2:	4770      	bx	lr
  401ca4:	20000a80 	.word	0x20000a80

00401ca8 <udd_ep_alloc>:


#if (0!=USB_DEVICE_MAX_EP)
bool udd_ep_alloc(udd_ep_id_t ep, uint8_t bmAttributes,
		uint16_t MaxEndpointSize)
{
  401ca8:	b5f0      	push	{r4, r5, r6, r7, lr}
  401caa:	b083      	sub	sp, #12
	udd_ep_job_t *ptr_job;
	bool b_dir_in;
	bool b_iso;
	b_dir_in = ep & USB_EP_DIR_IN;
	b_iso = (bmAttributes&USB_EP_TYPE_MASK) == USB_EP_TYPE_ISOCHRONOUS;
	ep = ep & USB_EP_ADDR_MASK;
  401cac:	f000 040f 	and.w	r4, r0, #15

	if (ep > USB_DEVICE_MAX_EP) {
  401cb0:	2c06      	cmp	r4, #6
  401cb2:	d86c      	bhi.n	401d8e <udd_ep_alloc+0xe6>
  401cb4:	00a3      	lsls	r3, r4, #2
  401cb6:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
  401cba:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
		return false;
	}
	if (Is_udd_endpoint_enabled(ep)) {
  401cbe:	6b1d      	ldr	r5, [r3, #48]	; 0x30
  401cc0:	f415 4f00 	tst.w	r5, #32768	; 0x8000
  401cc4:	d165      	bne.n	401d92 <udd_ep_alloc+0xea>
		return false;
	}

	// Check parameters
	if (b_iso && (!udd_is_endpoint_support_iso(ep))) {
  401cc6:	f001 0503 	and.w	r5, r1, #3
  401cca:	2d01      	cmp	r5, #1
  401ccc:	d103      	bne.n	401cd6 <udd_ep_alloc+0x2e>
  401cce:	2c00      	cmp	r4, #0
  401cd0:	d061      	beq.n	401d96 <udd_ep_alloc+0xee>
  401cd2:	2c03      	cmp	r4, #3
  401cd4:	d061      	beq.n	401d9a <udd_ep_alloc+0xf2>
		return false;
	}
	if (MaxEndpointSize > udd_get_endpoint_size_max(ep)) {
  401cd6:	1f25      	subs	r5, r4, #4
  401cd8:	b2ed      	uxtb	r5, r5
  401cda:	2d02      	cmp	r5, #2
  401cdc:	bf34      	ite	cc
  401cde:	f44f 7500 	movcc.w	r5, #512	; 0x200
  401ce2:	2540      	movcs	r5, #64	; 0x40
  401ce4:	4295      	cmp	r5, r2
  401ce6:	db5a      	blt.n	401d9e <udd_ep_alloc+0xf6>
		return false;
	}
	ptr_job = &udd_ep_job[ep - 1];
  401ce8:	1e66      	subs	r6, r4, #1

	// Set endpoint size
	ptr_job->size = MaxEndpointSize;
  401cea:	eb06 0786 	add.w	r7, r6, r6, lsl #2
  401cee:	4d2e      	ldr	r5, [pc, #184]	; (401da8 <udd_ep_alloc+0x100>)
  401cf0:	eb05 0587 	add.w	r5, r5, r7, lsl #2
  401cf4:	f105 0710 	add.w	r7, r5, #16
  401cf8:	f8b5 e010 	ldrh.w	lr, [r5, #16]
  401cfc:	f362 0e09 	bfi	lr, r2, #0, #10
  401d00:	f8a5 e010 	strh.w	lr, [r5, #16]
	ptr_job->b_buf_end = false;
  401d04:	7c6a      	ldrb	r2, [r5, #17]
	ptr_job->b_stall_requested = false;
  401d06:	f002 027f 	and.w	r2, r2, #127	; 0x7f
  401d0a:	f36f 1245 	bfc	r2, #5, #1
  401d0e:	746a      	strb	r2, [r5, #17]
	if (b_dir_in) {
  401d10:	09c0      	lsrs	r0, r0, #7
  401d12:	d003      	beq.n	401d1c <udd_ep_alloc+0x74>
		// No data buffered in FIFO
		ptr_job->bank = 0;
  401d14:	787a      	ldrb	r2, [r7, #1]
  401d16:	f36f 0283 	bfc	r2, #2, #2
  401d1a:	707a      	strb	r2, [r7, #1]
	}

	// Reset FIFOs
	udd_reset_endpoint(ep);
  401d1c:	4a23      	ldr	r2, [pc, #140]	; (401dac <udd_ep_alloc+0x104>)
  401d1e:	6a96      	ldr	r6, [r2, #40]	; 0x28
  401d20:	2501      	movs	r5, #1
  401d22:	fa05 f404 	lsl.w	r4, r5, r4
  401d26:	ea44 0506 	orr.w	r5, r4, r6
  401d2a:	6295      	str	r5, [r2, #40]	; 0x28
  401d2c:	6a95      	ldr	r5, [r2, #40]	; 0x28
  401d2e:	ea25 0404 	bic.w	r4, r5, r4
  401d32:	6294      	str	r4, [r2, #40]	; 0x28
	// Set configuration of new endpoint
	udd_configure_endpoint(ep,
  401d34:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  401d36:	9200      	str	r2, [sp, #0]
  401d38:	9a00      	ldr	r2, [sp, #0]
  401d3a:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  401d3e:	9200      	str	r2, [sp, #0]
  401d40:	9a00      	ldr	r2, [sp, #0]
  401d42:	f422 4207 	bic.w	r2, r2, #34560	; 0x8700
  401d46:	f022 0280 	bic.w	r2, r2, #128	; 0x80
  401d4a:	9200      	str	r2, [sp, #0]
  401d4c:	b138      	cbz	r0, 401d5e <udd_ep_alloc+0xb6>
  401d4e:	f041 0204 	orr.w	r2, r1, #4
  401d52:	0212      	lsls	r2, r2, #8
  401d54:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  401d58:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
  401d5c:	e004      	b.n	401d68 <udd_ep_alloc+0xc0>
  401d5e:	020a      	lsls	r2, r1, #8
  401d60:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  401d64:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
  401d68:	9900      	ldr	r1, [sp, #0]
  401d6a:	430a      	orrs	r2, r1
  401d6c:	9200      	str	r2, [sp, #0]
  401d6e:	9a00      	ldr	r2, [sp, #0]
  401d70:	631a      	str	r2, [r3, #48]	; 0x30
  401d72:	2300      	movs	r3, #0
  401d74:	9301      	str	r3, [sp, #4]
  401d76:	9b01      	ldr	r3, [sp, #4]
  401d78:	2b13      	cmp	r3, #19
  401d7a:	d812      	bhi.n	401da2 <udd_ep_alloc+0xfa>

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
  401d7c:	bf00      	nop
  401d7e:	9b01      	ldr	r3, [sp, #4]
  401d80:	3301      	adds	r3, #1
  401d82:	9301      	str	r3, [sp, #4]
  401d84:	9b01      	ldr	r3, [sp, #4]
  401d86:	2b13      	cmp	r3, #19
  401d88:	d9f8      	bls.n	401d7c <udd_ep_alloc+0xd4>
		(b_dir_in ? (bmAttributes | 0x4) : bmAttributes),
		0);
	return true;
  401d8a:	2001      	movs	r0, #1
  401d8c:	e00a      	b.n	401da4 <udd_ep_alloc+0xfc>
	b_dir_in = ep & USB_EP_DIR_IN;
	b_iso = (bmAttributes&USB_EP_TYPE_MASK) == USB_EP_TYPE_ISOCHRONOUS;
	ep = ep & USB_EP_ADDR_MASK;

	if (ep > USB_DEVICE_MAX_EP) {
		return false;
  401d8e:	2000      	movs	r0, #0
  401d90:	e008      	b.n	401da4 <udd_ep_alloc+0xfc>
	}
	if (Is_udd_endpoint_enabled(ep)) {
		return false;
  401d92:	2000      	movs	r0, #0
  401d94:	e006      	b.n	401da4 <udd_ep_alloc+0xfc>
	}

	// Check parameters
	if (b_iso && (!udd_is_endpoint_support_iso(ep))) {
		return false;
  401d96:	2000      	movs	r0, #0
  401d98:	e004      	b.n	401da4 <udd_ep_alloc+0xfc>
  401d9a:	2000      	movs	r0, #0
  401d9c:	e002      	b.n	401da4 <udd_ep_alloc+0xfc>
	}
	if (MaxEndpointSize > udd_get_endpoint_size_max(ep)) {
		return false;
  401d9e:	2000      	movs	r0, #0
  401da0:	e000      	b.n	401da4 <udd_ep_alloc+0xfc>
	udd_reset_endpoint(ep);
	// Set configuration of new endpoint
	udd_configure_endpoint(ep,
		(b_dir_in ? (bmAttributes | 0x4) : bmAttributes),
		0);
	return true;
  401da2:	2001      	movs	r0, #1
}
  401da4:	b003      	add	sp, #12
  401da6:	bdf0      	pop	{r4, r5, r6, r7, pc}
  401da8:	200009a8 	.word	0x200009a8
  401dac:	40034000 	.word	0x40034000

00401db0 <udd_ep_free>:


void udd_ep_free(udd_ep_id_t ep)
{
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
  401db0:	f000 020f 	and.w	r2, r0, #15
	if (USB_DEVICE_MAX_EP < ep_index) {
  401db4:	2a06      	cmp	r2, #6
  401db6:	d82a      	bhi.n	401e0e <udd_ep_free+0x5e>
	return true;
}


void udd_ep_free(udd_ep_id_t ep)
{
  401db8:	b500      	push	{lr}
  401dba:	b083      	sub	sp, #12
  401dbc:	0093      	lsls	r3, r2, #2
  401dbe:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
  401dc2:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
	if (USB_DEVICE_MAX_EP < ep_index) {
		return;
	}
	udd_disable_endpoint(ep_index);
  401dc6:	6b19      	ldr	r1, [r3, #48]	; 0x30
  401dc8:	9100      	str	r1, [sp, #0]
  401dca:	9900      	ldr	r1, [sp, #0]
  401dcc:	f041 014f 	orr.w	r1, r1, #79	; 0x4f
  401dd0:	9100      	str	r1, [sp, #0]
  401dd2:	9900      	ldr	r1, [sp, #0]
  401dd4:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
  401dd8:	9100      	str	r1, [sp, #0]
  401dda:	9900      	ldr	r1, [sp, #0]
  401ddc:	6319      	str	r1, [r3, #48]	; 0x30
  401dde:	2300      	movs	r3, #0
  401de0:	9301      	str	r3, [sp, #4]
  401de2:	9b01      	ldr	r3, [sp, #4]
  401de4:	2b13      	cmp	r3, #19
  401de6:	d806      	bhi.n	401df6 <udd_ep_free+0x46>
  401de8:	bf00      	nop
  401dea:	9b01      	ldr	r3, [sp, #4]
  401dec:	3301      	adds	r3, #1
  401dee:	9301      	str	r3, [sp, #4]
  401df0:	9b01      	ldr	r3, [sp, #4]
  401df2:	2b13      	cmp	r3, #19
  401df4:	d9f8      	bls.n	401de8 <udd_ep_free+0x38>
static void udd_ep_abort_job(udd_ep_id_t ep)
{
	ep &= USB_EP_ADDR_MASK;

	// Abort job on endpoint
	udd_ep_finish_job(&udd_ep_job[ep - 1], UDD_EP_TRANSFER_ABORT, ep);
  401df6:	1e50      	subs	r0, r2, #1
  401df8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  401dfc:	4b04      	ldr	r3, [pc, #16]	; (401e10 <udd_ep_free+0x60>)
  401dfe:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  401e02:	2101      	movs	r1, #1
  401e04:	4b03      	ldr	r3, [pc, #12]	; (401e14 <udd_ep_free+0x64>)
  401e06:	4798      	blx	r3
	if (USB_DEVICE_MAX_EP < ep_index) {
		return;
	}
	udd_disable_endpoint(ep_index);
	udd_ep_abort_job(ep);
}
  401e08:	b003      	add	sp, #12
  401e0a:	f85d fb04 	ldr.w	pc, [sp], #4
  401e0e:	4770      	bx	lr
  401e10:	200009a8 	.word	0x200009a8
  401e14:	00400ca5 	.word	0x00400ca5

00401e18 <udd_ep_is_halted>:


bool udd_ep_is_halted(udd_ep_id_t ep)
{
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
  401e18:	f000 000f 	and.w	r0, r0, #15
	udd_ep_job_t *ptr_job = &udd_ep_job[ep_index - 1];
	if (USB_DEVICE_MAX_EP < ep_index) {
  401e1c:	2806      	cmp	r0, #6
  401e1e:	d815      	bhi.n	401e4c <udd_ep_is_halted+0x34>
		return false;
	}
	return ptr_job->b_stall_requested ||
  401e20:	1e43      	subs	r3, r0, #1
  401e22:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  401e26:	4a0a      	ldr	r2, [pc, #40]	; (401e50 <udd_ep_is_halted+0x38>)
  401e28:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  401e2c:	7c5b      	ldrb	r3, [r3, #17]
  401e2e:	f013 0f20 	tst.w	r3, #32
  401e32:	d109      	bne.n	401e48 <udd_ep_is_halted+0x30>
			Is_udd_endpoint_stall_pending(ep & USB_EP_ADDR_MASK);
  401e34:	300c      	adds	r0, #12
  401e36:	4b07      	ldr	r3, [pc, #28]	; (401e54 <udd_ep_is_halted+0x3c>)
  401e38:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
	udd_ep_job_t *ptr_job = &udd_ep_job[ep_index - 1];
	if (USB_DEVICE_MAX_EP < ep_index) {
		return false;
	}
	return ptr_job->b_stall_requested ||
  401e3c:	f013 0f28 	tst.w	r3, #40	; 0x28
  401e40:	bf14      	ite	ne
  401e42:	2001      	movne	r0, #1
  401e44:	2000      	moveq	r0, #0
  401e46:	4770      	bx	lr
  401e48:	2001      	movs	r0, #1
  401e4a:	4770      	bx	lr
bool udd_ep_is_halted(udd_ep_id_t ep)
{
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
	udd_ep_job_t *ptr_job = &udd_ep_job[ep_index - 1];
	if (USB_DEVICE_MAX_EP < ep_index) {
		return false;
  401e4c:	2000      	movs	r0, #0
	}
	return ptr_job->b_stall_requested ||
			Is_udd_endpoint_stall_pending(ep & USB_EP_ADDR_MASK);
}
  401e4e:	4770      	bx	lr
  401e50:	200009a8 	.word	0x200009a8
  401e54:	40034000 	.word	0x40034000

00401e58 <udd_ep_set_halt>:


bool udd_ep_set_halt(udd_ep_id_t ep)
{
	bool b_dir_in = ep & USB_EP_DIR_IN;
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
  401e58:	f000 010f 	and.w	r1, r0, #15
	udd_ep_job_t *ptr_job = &udd_ep_job[ep_index - 1];
	irqflags_t flags;
	if (USB_DEVICE_MAX_EP < ep_index) {
  401e5c:	2906      	cmp	r1, #6
  401e5e:	d861      	bhi.n	401f24 <udd_ep_set_halt+0xcc>
			Is_udd_endpoint_stall_pending(ep & USB_EP_ADDR_MASK);
}


bool udd_ep_set_halt(udd_ep_id_t ep)
{
  401e60:	b410      	push	{r4}
  401e62:	b083      	sub	sp, #12
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  401e64:	f3ef 8210 	mrs	r2, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
  401e68:	fab2 f282 	clz	r2, r2
  401e6c:	0952      	lsrs	r2, r2, #5
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
  401e6e:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  401e70:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  401e74:	2400      	movs	r4, #0
  401e76:	4b30      	ldr	r3, [pc, #192]	; (401f38 <udd_ep_set_halt+0xe0>)
  401e78:	701c      	strb	r4, [r3, #0]
	irqflags_t flags;
	if (USB_DEVICE_MAX_EP < ep_index) {
		return false;
	}
	flags = cpu_irq_save();
	if (b_dir_in && (Is_udd_transmit_ready(ep_index)
  401e7a:	f010 0f80 	tst.w	r0, #128	; 0x80
  401e7e:	d028      	beq.n	401ed2 <udd_ep_set_halt+0x7a>

bool udd_ep_set_halt(udd_ep_id_t ep)
{
	bool b_dir_in = ep & USB_EP_DIR_IN;
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
	udd_ep_job_t *ptr_job = &udd_ep_job[ep_index - 1];
  401e80:	1e4b      	subs	r3, r1, #1
	irqflags_t flags;
	if (USB_DEVICE_MAX_EP < ep_index) {
		return false;
	}
	flags = cpu_irq_save();
	if (b_dir_in && (Is_udd_transmit_ready(ep_index)
  401e82:	f101 000c 	add.w	r0, r1, #12
  401e86:	4c2d      	ldr	r4, [pc, #180]	; (401f3c <udd_ep_set_halt+0xe4>)
  401e88:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
  401e8c:	f010 0f10 	tst.w	r0, #16
  401e90:	d109      	bne.n	401ea6 <udd_ep_set_halt+0x4e>
				|| ptr_job->bank > 1)) {
  401e92:	eb03 0083 	add.w	r0, r3, r3, lsl #2
  401e96:	4c2a      	ldr	r4, [pc, #168]	; (401f40 <udd_ep_set_halt+0xe8>)
  401e98:	eb04 0080 	add.w	r0, r4, r0, lsl #2
  401e9c:	7c40      	ldrb	r0, [r0, #17]
  401e9e:	f3c0 0081 	ubfx	r0, r0, #2, #2
  401ea2:	2801      	cmp	r0, #1
  401ea4:	dd15      	ble.n	401ed2 <udd_ep_set_halt+0x7a>
		// Halt until banks sent
		ptr_job->b_stall_requested = true;
  401ea6:	eb03 0083 	add.w	r0, r3, r3, lsl #2
  401eaa:	4b25      	ldr	r3, [pc, #148]	; (401f40 <udd_ep_set_halt+0xe8>)
  401eac:	eb03 0380 	add.w	r3, r3, r0, lsl #2
  401eb0:	7c58      	ldrb	r0, [r3, #17]
  401eb2:	f040 0020 	orr.w	r0, r0, #32
  401eb6:	7458      	strb	r0, [r3, #17]
		udd_enable_endpoint_interrupt(ep_index);
  401eb8:	2301      	movs	r3, #1
  401eba:	408b      	lsls	r3, r1
  401ebc:	491f      	ldr	r1, [pc, #124]	; (401f3c <udd_ep_set_halt+0xe4>)
  401ebe:	610b      	str	r3, [r1, #16]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  401ec0:	2a00      	cmp	r2, #0
  401ec2:	d031      	beq.n	401f28 <udd_ep_set_halt+0xd0>
		cpu_irq_enable();
  401ec4:	2001      	movs	r0, #1
  401ec6:	4b1c      	ldr	r3, [pc, #112]	; (401f38 <udd_ep_set_halt+0xe0>)
  401ec8:	7018      	strb	r0, [r3, #0]
  401eca:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
  401ece:	b662      	cpsie	i
  401ed0:	e02d      	b.n	401f2e <udd_ep_set_halt+0xd6>
  401ed2:	008b      	lsls	r3, r1, #2
  401ed4:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
  401ed8:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
		cpu_irq_restore(flags);
		return true;
	} else {
		// Stall endpoint
		udd_enable_stall_handshake(ep_index);
  401edc:	6b18      	ldr	r0, [r3, #48]	; 0x30
  401ede:	9000      	str	r0, [sp, #0]
  401ee0:	9800      	ldr	r0, [sp, #0]
  401ee2:	f040 004f 	orr.w	r0, r0, #79	; 0x4f
  401ee6:	9000      	str	r0, [sp, #0]
  401ee8:	9800      	ldr	r0, [sp, #0]
  401eea:	f040 0020 	orr.w	r0, r0, #32
  401eee:	9000      	str	r0, [sp, #0]
  401ef0:	9800      	ldr	r0, [sp, #0]
  401ef2:	6318      	str	r0, [r3, #48]	; 0x30
  401ef4:	2300      	movs	r3, #0
  401ef6:	9301      	str	r3, [sp, #4]
  401ef8:	9b01      	ldr	r3, [sp, #4]
  401efa:	2b13      	cmp	r3, #19
  401efc:	d806      	bhi.n	401f0c <udd_ep_set_halt+0xb4>

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
  401efe:	bf00      	nop
  401f00:	9b01      	ldr	r3, [sp, #4]
  401f02:	3301      	adds	r3, #1
  401f04:	9301      	str	r3, [sp, #4]
  401f06:	9b01      	ldr	r3, [sp, #4]
  401f08:	2b13      	cmp	r3, #19
  401f0a:	d9f8      	bls.n	401efe <udd_ep_set_halt+0xa6>
		udd_enable_endpoint_interrupt(ep_index);
  401f0c:	2301      	movs	r3, #1
  401f0e:	408b      	lsls	r3, r1
  401f10:	490a      	ldr	r1, [pc, #40]	; (401f3c <udd_ep_set_halt+0xe4>)
  401f12:	610b      	str	r3, [r1, #16]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  401f14:	b152      	cbz	r2, 401f2c <udd_ep_set_halt+0xd4>
		cpu_irq_enable();
  401f16:	2001      	movs	r0, #1
  401f18:	4b07      	ldr	r3, [pc, #28]	; (401f38 <udd_ep_set_halt+0xe0>)
  401f1a:	7018      	strb	r0, [r3, #0]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  401f1c:	f3bf 8f5f 	dmb	sy
  401f20:	b662      	cpsie	i
  401f22:	e004      	b.n	401f2e <udd_ep_set_halt+0xd6>
	bool b_dir_in = ep & USB_EP_DIR_IN;
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
	udd_ep_job_t *ptr_job = &udd_ep_job[ep_index - 1];
	irqflags_t flags;
	if (USB_DEVICE_MAX_EP < ep_index) {
		return false;
  401f24:	2000      	movs	r0, #0
		udd_enable_stall_handshake(ep_index);
		udd_enable_endpoint_interrupt(ep_index);
		cpu_irq_restore(flags);
	}
	return true;
}
  401f26:	4770      	bx	lr
				|| ptr_job->bank > 1)) {
		// Halt until banks sent
		ptr_job->b_stall_requested = true;
		udd_enable_endpoint_interrupt(ep_index);
		cpu_irq_restore(flags);
		return true;
  401f28:	2001      	movs	r0, #1
  401f2a:	e000      	b.n	401f2e <udd_ep_set_halt+0xd6>
		// Stall endpoint
		udd_enable_stall_handshake(ep_index);
		udd_enable_endpoint_interrupt(ep_index);
		cpu_irq_restore(flags);
	}
	return true;
  401f2c:	2001      	movs	r0, #1
}
  401f2e:	b003      	add	sp, #12
  401f30:	f85d 4b04 	ldr.w	r4, [sp], #4
  401f34:	4770      	bx	lr
  401f36:	bf00      	nop
  401f38:	200000ac 	.word	0x200000ac
  401f3c:	40034000 	.word	0x40034000
  401f40:	200009a8 	.word	0x200009a8

00401f44 <udd_ep_clear_halt>:

bool udd_ep_clear_halt(udd_ep_id_t ep)
{
	udd_ep_job_t *ptr_job;

	ep &= USB_EP_ADDR_MASK;
  401f44:	f000 000f 	and.w	r0, r0, #15
	if (USB_DEVICE_MAX_EP < ep)
  401f48:	2806      	cmp	r0, #6
  401f4a:	d867      	bhi.n	40201c <udd_ep_clear_halt+0xd8>
		return false;
	ptr_job = &udd_ep_job[ep - 1];
  401f4c:	1e41      	subs	r1, r0, #1

	ptr_job->b_stall_requested = false;
  401f4e:	eb01 0281 	add.w	r2, r1, r1, lsl #2
  401f52:	4b36      	ldr	r3, [pc, #216]	; (40202c <udd_ep_clear_halt+0xe8>)
  401f54:	eb03 0382 	add.w	r3, r3, r2, lsl #2
  401f58:	7c5a      	ldrb	r2, [r3, #17]
  401f5a:	f36f 1245 	bfc	r2, #5, #1
  401f5e:	745a      	strb	r2, [r3, #17]
  401f60:	0082      	lsls	r2, r0, #2
  401f62:	f102 2240 	add.w	r2, r2, #1073758208	; 0x40004000
  401f66:	f502 3240 	add.w	r2, r2, #196608	; 0x30000
	if (Is_udd_endpoint_stall_requested(ep)) {
  401f6a:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401f6c:	f013 0f20 	tst.w	r3, #32
  401f70:	d056      	beq.n	402020 <udd_ep_clear_halt+0xdc>
	return true;
}


bool udd_ep_clear_halt(udd_ep_id_t ep)
{
  401f72:	b530      	push	{r4, r5, lr}
  401f74:	b085      	sub	sp, #20
	ptr_job = &udd_ep_job[ep - 1];

	ptr_job->b_stall_requested = false;
	if (Is_udd_endpoint_stall_requested(ep)) {
		// Remove stall
		udd_disable_stall_handshake(ep);
  401f76:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401f78:	9300      	str	r3, [sp, #0]
  401f7a:	9b00      	ldr	r3, [sp, #0]
  401f7c:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  401f80:	9300      	str	r3, [sp, #0]
  401f82:	9b00      	ldr	r3, [sp, #0]
  401f84:	f023 0320 	bic.w	r3, r3, #32
  401f88:	9300      	str	r3, [sp, #0]
  401f8a:	9b00      	ldr	r3, [sp, #0]
  401f8c:	6313      	str	r3, [r2, #48]	; 0x30
  401f8e:	2300      	movs	r3, #0
  401f90:	9301      	str	r3, [sp, #4]
  401f92:	9b01      	ldr	r3, [sp, #4]
  401f94:	2b13      	cmp	r3, #19
  401f96:	d806      	bhi.n	401fa6 <udd_ep_clear_halt+0x62>

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
  401f98:	bf00      	nop
  401f9a:	9b01      	ldr	r3, [sp, #4]
  401f9c:	3301      	adds	r3, #1
  401f9e:	9301      	str	r3, [sp, #4]
  401fa0:	9b01      	ldr	r3, [sp, #4]
  401fa2:	2b13      	cmp	r3, #19
  401fa4:	d9f8      	bls.n	401f98 <udd_ep_clear_halt+0x54>
		// Reset FIFO and data toggle (after stall cleared)
		udd_reset_endpoint(ep);
  401fa6:	4b22      	ldr	r3, [pc, #136]	; (402030 <udd_ep_clear_halt+0xec>)
  401fa8:	6a9d      	ldr	r5, [r3, #40]	; 0x28
  401faa:	2401      	movs	r4, #1
  401fac:	fa04 f000 	lsl.w	r0, r4, r0
  401fb0:	ea40 0405 	orr.w	r4, r0, r5
  401fb4:	629c      	str	r4, [r3, #40]	; 0x28
  401fb6:	6a9c      	ldr	r4, [r3, #40]	; 0x28
  401fb8:	ea24 0000 	bic.w	r0, r4, r0
  401fbc:	6298      	str	r0, [r3, #40]	; 0x28
		// Clear stall status
		udd_ack_stall(ep);
  401fbe:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401fc0:	9302      	str	r3, [sp, #8]
  401fc2:	9b02      	ldr	r3, [sp, #8]
  401fc4:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  401fc8:	9302      	str	r3, [sp, #8]
  401fca:	9b02      	ldr	r3, [sp, #8]
  401fcc:	f023 0308 	bic.w	r3, r3, #8
  401fd0:	9302      	str	r3, [sp, #8]
  401fd2:	9b02      	ldr	r3, [sp, #8]
  401fd4:	6313      	str	r3, [r2, #48]	; 0x30
  401fd6:	2300      	movs	r3, #0
  401fd8:	9303      	str	r3, [sp, #12]
  401fda:	9b03      	ldr	r3, [sp, #12]
  401fdc:	2b13      	cmp	r3, #19
  401fde:	d806      	bhi.n	401fee <udd_ep_clear_halt+0xaa>
  401fe0:	bf00      	nop
  401fe2:	9b03      	ldr	r3, [sp, #12]
  401fe4:	3301      	adds	r3, #1
  401fe6:	9303      	str	r3, [sp, #12]
  401fe8:	9b03      	ldr	r3, [sp, #12]
  401fea:	2b13      	cmp	r3, #19
  401fec:	d9f8      	bls.n	401fe0 <udd_ep_clear_halt+0x9c>
		// If a job is register on clear halt action
		// then execute callback
		if (ptr_job->busy == true) {
  401fee:	eb01 0381 	add.w	r3, r1, r1, lsl #2
  401ff2:	4a0e      	ldr	r2, [pc, #56]	; (40202c <udd_ep_clear_halt+0xe8>)
  401ff4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  401ff8:	7c5b      	ldrb	r3, [r3, #17]
  401ffa:	f013 0f10 	tst.w	r3, #16
  401ffe:	d011      	beq.n	402024 <udd_ep_clear_halt+0xe0>
			ptr_job->busy = false;
  402000:	0088      	lsls	r0, r1, #2
  402002:	1843      	adds	r3, r0, r1
  402004:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  402008:	7c5c      	ldrb	r4, [r3, #17]
  40200a:	f36f 1404 	bfc	r4, #4, #1
  40200e:	745c      	strb	r4, [r3, #17]
			ptr_job->call_nohalt();
  402010:	4401      	add	r1, r0
  402012:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
  402016:	4798      	blx	r3
		}
	}
	return true;
  402018:	2001      	movs	r0, #1
  40201a:	e004      	b.n	402026 <udd_ep_clear_halt+0xe2>
{
	udd_ep_job_t *ptr_job;

	ep &= USB_EP_ADDR_MASK;
	if (USB_DEVICE_MAX_EP < ep)
		return false;
  40201c:	2000      	movs	r0, #0
			ptr_job->busy = false;
			ptr_job->call_nohalt();
		}
	}
	return true;
}
  40201e:	4770      	bx	lr
		if (ptr_job->busy == true) {
			ptr_job->busy = false;
			ptr_job->call_nohalt();
		}
	}
	return true;
  402020:	2001      	movs	r0, #1
  402022:	4770      	bx	lr
  402024:	2001      	movs	r0, #1
}
  402026:	b005      	add	sp, #20
  402028:	bd30      	pop	{r4, r5, pc}
  40202a:	bf00      	nop
  40202c:	200009a8 	.word	0x200009a8
  402030:	40034000 	.word	0x40034000

00402034 <udd_ep_run>:


bool udd_ep_run(udd_ep_id_t ep, bool b_shortpacket,
		uint8_t * buf, iram_size_t buf_size,
		udd_callback_trans_t callback)
{
  402034:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	udd_ep_job_t *ptr_job;
	irqflags_t flags;
	bool b_dir_in = ep & USB_EP_DIR_IN;

	ep &= USB_EP_ADDR_MASK;
  402036:	f000 050f 	and.w	r5, r0, #15
	if (USB_DEVICE_MAX_EP < ep) {
  40203a:	2d06      	cmp	r5, #6
  40203c:	f200 809f 	bhi.w	40217e <udd_ep_run+0x14a>
  402040:	00ac      	lsls	r4, r5, #2
  402042:	f104 2440 	add.w	r4, r4, #1073758208	; 0x40004000
  402046:	f504 3440 	add.w	r4, r4, #196608	; 0x30000
	}
	
	// Get job about endpoint
	ptr_job = &udd_ep_job[ep - 1];

	if ((!Is_udd_endpoint_enabled(ep))
  40204a:	6b26      	ldr	r6, [r4, #48]	; 0x30
  40204c:	f416 4f00 	tst.w	r6, #32768	; 0x8000
  402050:	f000 8097 	beq.w	402182 <udd_ep_run+0x14e>
	if (USB_DEVICE_MAX_EP < ep) {
		return false;
	}
	
	// Get job about endpoint
	ptr_job = &udd_ep_job[ep - 1];
  402054:	1e6e      	subs	r6, r5, #1

	if ((!Is_udd_endpoint_enabled(ep))
			|| ptr_job->b_stall_requested
  402056:	eb06 0e86 	add.w	lr, r6, r6, lsl #2
  40205a:	4f4f      	ldr	r7, [pc, #316]	; (402198 <udd_ep_run+0x164>)
  40205c:	eb07 078e 	add.w	r7, r7, lr, lsl #2
  402060:	7c7f      	ldrb	r7, [r7, #17]
  402062:	f017 0f20 	tst.w	r7, #32
  402066:	f040 808e 	bne.w	402186 <udd_ep_run+0x152>
			|| Is_udd_endpoint_stall_requested(ep)) {
  40206a:	6b27      	ldr	r7, [r4, #48]	; 0x30
  40206c:	f017 0f20 	tst.w	r7, #32
  402070:	f040 808b 	bne.w	40218a <udd_ep_run+0x156>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  402074:	f3ef 8710 	mrs	r7, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
  402078:	fab7 f787 	clz	r7, r7
  40207c:	097f      	lsrs	r7, r7, #5
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
  40207e:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  402080:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  402084:	f04f 0c00 	mov.w	ip, #0
  402088:	f8df e110 	ldr.w	lr, [pc, #272]	; 40219c <udd_ep_run+0x168>
  40208c:	f88e c000 	strb.w	ip, [lr]
		return false; // Endpoint is halted
	}

	flags = cpu_irq_save();
	if (ptr_job->busy == true) {
  402090:	eb06 0e86 	add.w	lr, r6, r6, lsl #2
  402094:	f8df c100 	ldr.w	ip, [pc, #256]	; 402198 <udd_ep_run+0x164>
  402098:	eb0c 0e8e 	add.w	lr, ip, lr, lsl #2
  40209c:	f89e e011 	ldrb.w	lr, [lr, #17]
  4020a0:	f01e 0f10 	tst.w	lr, #16
  4020a4:	d009      	beq.n	4020ba <udd_ep_run+0x86>
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  4020a6:	2f00      	cmp	r7, #0
  4020a8:	d071      	beq.n	40218e <udd_ep_run+0x15a>
		cpu_irq_enable();
  4020aa:	2201      	movs	r2, #1
  4020ac:	4b3b      	ldr	r3, [pc, #236]	; (40219c <udd_ep_run+0x168>)
  4020ae:	701a      	strb	r2, [r3, #0]
  4020b0:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
  4020b4:	b662      	cpsie	i
		cpu_irq_restore(flags);
		return false; // Job already on going
  4020b6:	2000      	movs	r0, #0
  4020b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	}
	ptr_job->busy = true;
  4020ba:	eb06 0e86 	add.w	lr, r6, r6, lsl #2
  4020be:	f8df c0d8 	ldr.w	ip, [pc, #216]	; 402198 <udd_ep_run+0x164>
  4020c2:	eb0c 0e8e 	add.w	lr, ip, lr, lsl #2
  4020c6:	f89e c011 	ldrb.w	ip, [lr, #17]
  4020ca:	f04c 0c10 	orr.w	ip, ip, #16
  4020ce:	f88e c011 	strb.w	ip, [lr, #17]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  4020d2:	b13f      	cbz	r7, 4020e4 <udd_ep_run+0xb0>
		cpu_irq_enable();
  4020d4:	f04f 0e01 	mov.w	lr, #1
  4020d8:	4f30      	ldr	r7, [pc, #192]	; (40219c <udd_ep_run+0x168>)
  4020da:	f887 e000 	strb.w	lr, [r7]
  4020de:	f3bf 8f5f 	dmb	sy
  4020e2:	b662      	cpsie	i
	cpu_irq_restore(flags);

	// No job running. Let's setup a new one.
	ptr_job->buf = buf;
  4020e4:	f8df c0b0 	ldr.w	ip, [pc, #176]	; 402198 <udd_ep_run+0x164>
  4020e8:	eb06 0786 	add.w	r7, r6, r6, lsl #2
  4020ec:	00bf      	lsls	r7, r7, #2
  4020ee:	eb0c 0e07 	add.w	lr, ip, r7
  4020f2:	f8ce 2004 	str.w	r2, [lr, #4]
	ptr_job->buf_size = buf_size;
  4020f6:	f10e 0208 	add.w	r2, lr, #8
  4020fa:	f8ce 3008 	str.w	r3, [lr, #8]
	ptr_job->buf_cnt = 0;
  4020fe:	f04f 0e00 	mov.w	lr, #0
  402102:	f8c2 e004 	str.w	lr, [r2, #4]
	ptr_job->call_trans = callback;
  402106:	9a06      	ldr	r2, [sp, #24]
  402108:	f84c 2007 	str.w	r2, [ip, r7]
	ptr_job->b_shortpacket = b_shortpacket || (buf_size == 0);
  40210c:	b919      	cbnz	r1, 402116 <udd_ep_run+0xe2>
  40210e:	fab3 f383 	clz	r3, r3
  402112:	095b      	lsrs	r3, r3, #5
  402114:	e000      	b.n	402118 <udd_ep_run+0xe4>
  402116:	2301      	movs	r3, #1
  402118:	491f      	ldr	r1, [pc, #124]	; (402198 <udd_ep_run+0x164>)
  40211a:	00b7      	lsls	r7, r6, #2
  40211c:	19ba      	adds	r2, r7, r6
  40211e:	eb01 0282 	add.w	r2, r1, r2, lsl #2
  402122:	7c52      	ldrb	r2, [r2, #17]
  402124:	f363 1286 	bfi	r2, r3, #6, #1
	ptr_job->b_buf_end = false;
  402128:	443e      	add	r6, r7
  40212a:	eb01 0686 	add.w	r6, r1, r6, lsl #2
  40212e:	4613      	mov	r3, r2
  402130:	f36f 13c7 	bfc	r3, #7, #1
  402134:	7473      	strb	r3, [r6, #17]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  402136:	f3ef 8610 	mrs	r6, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
  40213a:	b672      	cpsid	i
  40213c:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
  402140:	2200      	movs	r2, #0
  402142:	4b16      	ldr	r3, [pc, #88]	; (40219c <udd_ep_run+0x168>)
  402144:	701a      	strb	r2, [r3, #0]

	flags = cpu_irq_save();
	udd_enable_endpoint_interrupt(ep);
  402146:	2301      	movs	r3, #1
  402148:	40ab      	lsls	r3, r5
  40214a:	4a15      	ldr	r2, [pc, #84]	; (4021a0 <udd_ep_run+0x16c>)
  40214c:	6113      	str	r3, [r2, #16]
	// Request first transfer
	if (b_dir_in) {
  40214e:	f010 0f80 	tst.w	r0, #128	; 0x80
  402152:	d00c      	beq.n	40216e <udd_ep_run+0x13a>
		if (Is_udd_in_pending(ep)) {
  402154:	6b23      	ldr	r3, [r4, #48]	; 0x30
  402156:	f013 0f11 	tst.w	r3, #17
  40215a:	d108      	bne.n	40216e <udd_ep_run+0x13a>
			// Append more data (handled in interrupt service)
		} else {
			// Start new, try to fill 1~2 banks before handling status
			if (udd_ep_in_sent(ep, true)) {
  40215c:	4628      	mov	r0, r5
  40215e:	2101      	movs	r1, #1
  402160:	4b10      	ldr	r3, [pc, #64]	; (4021a4 <udd_ep_run+0x170>)
  402162:	4798      	blx	r3
  402164:	b118      	cbz	r0, 40216e <udd_ep_run+0x13a>
				// Over one bank
				udd_ep_in_sent(ep, false);
  402166:	4628      	mov	r0, r5
  402168:	2100      	movs	r1, #0
  40216a:	4b0e      	ldr	r3, [pc, #56]	; (4021a4 <udd_ep_run+0x170>)
  40216c:	4798      	blx	r3
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  40216e:	b986      	cbnz	r6, 402192 <udd_ep_run+0x15e>
		cpu_irq_enable();
  402170:	2001      	movs	r0, #1
  402172:	4b0a      	ldr	r3, [pc, #40]	; (40219c <udd_ep_run+0x168>)
  402174:	7018      	strb	r0, [r3, #0]
  402176:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
  40217a:	b662      	cpsie	i
  40217c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	irqflags_t flags;
	bool b_dir_in = ep & USB_EP_DIR_IN;

	ep &= USB_EP_ADDR_MASK;
	if (USB_DEVICE_MAX_EP < ep) {
		return false;
  40217e:	2000      	movs	r0, #0
  402180:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ptr_job = &udd_ep_job[ep - 1];

	if ((!Is_udd_endpoint_enabled(ep))
			|| ptr_job->b_stall_requested
			|| Is_udd_endpoint_stall_requested(ep)) {
		return false; // Endpoint is halted
  402182:	2000      	movs	r0, #0
  402184:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  402186:	2000      	movs	r0, #0
  402188:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40218a:	2000      	movs	r0, #0
  40218c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	}

	flags = cpu_irq_save();
	if (ptr_job->busy == true) {
		cpu_irq_restore(flags);
		return false; // Job already on going
  40218e:	2000      	movs	r0, #0
  402190:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	} else {
		// Waiting for OUT received interrupt
	}
	cpu_irq_restore(flags);

	return true;
  402192:	2001      	movs	r0, #1
}
  402194:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  402196:	bf00      	nop
  402198:	200009a8 	.word	0x200009a8
  40219c:	200000ac 	.word	0x200000ac
  4021a0:	40034000 	.word	0x40034000
  4021a4:	00400dd9 	.word	0x00400dd9

004021a8 <udd_ep_abort>:


void udd_ep_abort(udd_ep_id_t ep)
{
  4021a8:	b5f0      	push	{r4, r5, r6, r7, lr}
  4021aa:	b089      	sub	sp, #36	; 0x24
	bool b_dir_in = ep & USB_EP_DIR_IN;
	irqflags_t flags;

	ep &= USB_EP_ADDR_MASK;
  4021ac:	f000 040f 	and.w	r4, r0, #15
	if (USB_DEVICE_MAX_EP < ep)
  4021b0:	2c06      	cmp	r4, #6
  4021b2:	f200 80ba 	bhi.w	40232a <udd_ep_abort+0x182>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  4021b6:	f3ef 8310 	mrs	r3, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
  4021ba:	b672      	cpsid	i
  4021bc:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
  4021c0:	2100      	movs	r1, #0
  4021c2:	4a5b      	ldr	r2, [pc, #364]	; (402330 <udd_ep_abort+0x188>)
  4021c4:	7011      	strb	r1, [r2, #0]
		return;

	// Disable interrupts
	flags = cpu_irq_save();
	udd_disable_endpoint_interrupt(ep);
  4021c6:	2501      	movs	r5, #1
  4021c8:	40a5      	lsls	r5, r4
  4021ca:	4a5a      	ldr	r2, [pc, #360]	; (402334 <udd_ep_abort+0x18c>)
  4021cc:	6155      	str	r5, [r2, #20]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  4021ce:	b92b      	cbnz	r3, 4021dc <udd_ep_abort+0x34>
		cpu_irq_enable();
  4021d0:	2201      	movs	r2, #1
  4021d2:	4b57      	ldr	r3, [pc, #348]	; (402330 <udd_ep_abort+0x188>)
  4021d4:	701a      	strb	r2, [r3, #0]
  4021d6:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
  4021da:	b662      	cpsie	i
	cpu_irq_restore(flags);
	// Clear pending statuses
	if (b_dir_in) {
  4021dc:	f010 0f80 	tst.w	r0, #128	; 0x80
  4021e0:	d10a      	bne.n	4021f8 <udd_ep_abort+0x50>
  4021e2:	00a6      	lsls	r6, r4, #2
  4021e4:	f106 2640 	add.w	r6, r6, #1073758208	; 0x40004000
  4021e8:	f506 3640 	add.w	r6, r6, #196608	; 0x30000
		udd_ack_in_sent(ep);
		// Reset number of buffered banks
		udd_ep_job[ep - 1].bank = 0;
	} else {
		// Clear all pending banks statuses
		while(Is_udd_any_bank_received(ep)) {
  4021ec:	6b33      	ldr	r3, [r6, #48]	; 0x30
  4021ee:	f013 0f42 	tst.w	r3, #66	; 0x42
  4021f2:	f040 8081 	bne.w	4022f8 <udd_ep_abort+0x150>
  4021f6:	e086      	b.n	402306 <udd_ep_abort+0x15e>
  4021f8:	00a2      	lsls	r2, r4, #2
  4021fa:	f102 2240 	add.w	r2, r2, #1073758208	; 0x40004000
  4021fe:	f502 3240 	add.w	r2, r2, #196608	; 0x30000
	udd_disable_endpoint_interrupt(ep);
	cpu_irq_restore(flags);
	// Clear pending statuses
	if (b_dir_in) {
		// Kill banks
		if (Is_udd_transmit_ready(ep)) {
  402202:	6b13      	ldr	r3, [r2, #48]	; 0x30
  402204:	f013 0f10 	tst.w	r3, #16
  402208:	d053      	beq.n	4022b2 <udd_ep_abort+0x10a>
			udd_kill_data_in_fifo(ep,
  40220a:	2c00      	cmp	r4, #0
  40220c:	d039      	beq.n	402282 <udd_ep_abort+0xda>
  40220e:	2c03      	cmp	r4, #3
  402210:	d037      	beq.n	402282 <udd_ep_abort+0xda>
  402212:	6b13      	ldr	r3, [r2, #48]	; 0x30
  402214:	9300      	str	r3, [sp, #0]
  402216:	9b00      	ldr	r3, [sp, #0]
  402218:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  40221c:	9300      	str	r3, [sp, #0]
  40221e:	9b00      	ldr	r3, [sp, #0]
  402220:	f023 0310 	bic.w	r3, r3, #16
  402224:	9300      	str	r3, [sp, #0]
  402226:	9b00      	ldr	r3, [sp, #0]
  402228:	6313      	str	r3, [r2, #48]	; 0x30
  40222a:	2300      	movs	r3, #0
  40222c:	9301      	str	r3, [sp, #4]
  40222e:	9b01      	ldr	r3, [sp, #4]
  402230:	2b13      	cmp	r3, #19
  402232:	d806      	bhi.n	402242 <udd_ep_abort+0x9a>

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
  402234:	bf00      	nop
  402236:	9b01      	ldr	r3, [sp, #4]
  402238:	3301      	adds	r3, #1
  40223a:	9301      	str	r3, [sp, #4]
  40223c:	9b01      	ldr	r3, [sp, #4]
  40223e:	2b13      	cmp	r3, #19
  402240:	d9f8      	bls.n	402234 <udd_ep_abort+0x8c>
  402242:	6b13      	ldr	r3, [r2, #48]	; 0x30
  402244:	f013 0f10 	tst.w	r3, #16
  402248:	d1fb      	bne.n	402242 <udd_ep_abort+0x9a>
  40224a:	6b13      	ldr	r3, [r2, #48]	; 0x30
  40224c:	9302      	str	r3, [sp, #8]
  40224e:	9b02      	ldr	r3, [sp, #8]
  402250:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  402254:	9302      	str	r3, [sp, #8]
  402256:	9b02      	ldr	r3, [sp, #8]
  402258:	f043 0310 	orr.w	r3, r3, #16
  40225c:	9302      	str	r3, [sp, #8]
  40225e:	9b02      	ldr	r3, [sp, #8]
  402260:	6313      	str	r3, [r2, #48]	; 0x30
  402262:	2300      	movs	r3, #0
  402264:	9303      	str	r3, [sp, #12]
  402266:	9b03      	ldr	r3, [sp, #12]
  402268:	2b13      	cmp	r3, #19
  40226a:	d806      	bhi.n	40227a <udd_ep_abort+0xd2>
  40226c:	bf00      	nop
  40226e:	9b03      	ldr	r3, [sp, #12]
  402270:	3301      	adds	r3, #1
  402272:	9303      	str	r3, [sp, #12]
  402274:	9b03      	ldr	r3, [sp, #12]
  402276:	2b13      	cmp	r3, #19
  402278:	d9f8      	bls.n	40226c <udd_ep_abort+0xc4>
  40227a:	6b13      	ldr	r3, [r2, #48]	; 0x30
  40227c:	f013 0f10 	tst.w	r3, #16
  402280:	d0fb      	beq.n	40227a <udd_ep_abort+0xd2>
  402282:	6b13      	ldr	r3, [r2, #48]	; 0x30
  402284:	9304      	str	r3, [sp, #16]
  402286:	9b04      	ldr	r3, [sp, #16]
  402288:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  40228c:	9304      	str	r3, [sp, #16]
  40228e:	9b04      	ldr	r3, [sp, #16]
  402290:	f023 0310 	bic.w	r3, r3, #16
  402294:	9304      	str	r3, [sp, #16]
  402296:	9b04      	ldr	r3, [sp, #16]
  402298:	6313      	str	r3, [r2, #48]	; 0x30
  40229a:	2300      	movs	r3, #0
  40229c:	9305      	str	r3, [sp, #20]
  40229e:	9b05      	ldr	r3, [sp, #20]
  4022a0:	2b13      	cmp	r3, #19
  4022a2:	d806      	bhi.n	4022b2 <udd_ep_abort+0x10a>
  4022a4:	bf00      	nop
  4022a6:	9b05      	ldr	r3, [sp, #20]
  4022a8:	3301      	adds	r3, #1
  4022aa:	9305      	str	r3, [sp, #20]
  4022ac:	9b05      	ldr	r3, [sp, #20]
  4022ae:	2b13      	cmp	r3, #19
  4022b0:	d9f8      	bls.n	4022a4 <udd_ep_abort+0xfc>
					udd_get_endpoint_bank_max_nbr(ep)>1);
		}
		udd_ack_in_sent(ep);
  4022b2:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4022b4:	9306      	str	r3, [sp, #24]
  4022b6:	9b06      	ldr	r3, [sp, #24]
  4022b8:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  4022bc:	9306      	str	r3, [sp, #24]
  4022be:	9b06      	ldr	r3, [sp, #24]
  4022c0:	f023 0301 	bic.w	r3, r3, #1
  4022c4:	9306      	str	r3, [sp, #24]
  4022c6:	9b06      	ldr	r3, [sp, #24]
  4022c8:	6313      	str	r3, [r2, #48]	; 0x30
  4022ca:	2300      	movs	r3, #0
  4022cc:	9307      	str	r3, [sp, #28]
  4022ce:	9b07      	ldr	r3, [sp, #28]
  4022d0:	2b13      	cmp	r3, #19
  4022d2:	d806      	bhi.n	4022e2 <udd_ep_abort+0x13a>
  4022d4:	bf00      	nop
  4022d6:	9b07      	ldr	r3, [sp, #28]
  4022d8:	3301      	adds	r3, #1
  4022da:	9307      	str	r3, [sp, #28]
  4022dc:	9b07      	ldr	r3, [sp, #28]
  4022de:	2b13      	cmp	r3, #19
  4022e0:	d9f8      	bls.n	4022d4 <udd_ep_abort+0x12c>
		// Reset number of buffered banks
		udd_ep_job[ep - 1].bank = 0;
  4022e2:	1e63      	subs	r3, r4, #1
  4022e4:	eb03 0283 	add.w	r2, r3, r3, lsl #2
  4022e8:	4b13      	ldr	r3, [pc, #76]	; (402338 <udd_ep_abort+0x190>)
  4022ea:	eb03 0382 	add.w	r3, r3, r2, lsl #2
  4022ee:	7c5a      	ldrb	r2, [r3, #17]
  4022f0:	f36f 0283 	bfc	r2, #2, #2
  4022f4:	745a      	strb	r2, [r3, #17]
  4022f6:	e006      	b.n	402306 <udd_ep_abort+0x15e>
	} else {
		// Clear all pending banks statuses
		while(Is_udd_any_bank_received(ep)) {
			udd_ep_ack_out_received(ep);
  4022f8:	4f10      	ldr	r7, [pc, #64]	; (40233c <udd_ep_abort+0x194>)
  4022fa:	4620      	mov	r0, r4
  4022fc:	47b8      	blx	r7
		udd_ack_in_sent(ep);
		// Reset number of buffered banks
		udd_ep_job[ep - 1].bank = 0;
	} else {
		// Clear all pending banks statuses
		while(Is_udd_any_bank_received(ep)) {
  4022fe:	6b33      	ldr	r3, [r6, #48]	; 0x30
  402300:	f013 0f42 	tst.w	r3, #66	; 0x42
  402304:	d1f9      	bne.n	4022fa <udd_ep_abort+0x152>
			udd_ep_ack_out_received(ep);
		}
	}
	// Reset FIFO and data toggle
	udd_reset_endpoint(ep);
  402306:	4b0b      	ldr	r3, [pc, #44]	; (402334 <udd_ep_abort+0x18c>)
  402308:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  40230a:	432a      	orrs	r2, r5
  40230c:	629a      	str	r2, [r3, #40]	; 0x28
  40230e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  402310:	ea22 0505 	bic.w	r5, r2, r5
  402314:	629d      	str	r5, [r3, #40]	; 0x28
static void udd_ep_abort_job(udd_ep_id_t ep)
{
	ep &= USB_EP_ADDR_MASK;

	// Abort job on endpoint
	udd_ep_finish_job(&udd_ep_job[ep - 1], UDD_EP_TRANSFER_ABORT, ep);
  402316:	1e60      	subs	r0, r4, #1
  402318:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  40231c:	4b06      	ldr	r3, [pc, #24]	; (402338 <udd_ep_abort+0x190>)
  40231e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  402322:	2101      	movs	r1, #1
  402324:	4622      	mov	r2, r4
  402326:	4b06      	ldr	r3, [pc, #24]	; (402340 <udd_ep_abort+0x198>)
  402328:	4798      	blx	r3
	}
	// Reset FIFO and data toggle
	udd_reset_endpoint(ep);
	// Abort job
	udd_ep_abort_job(ep);
}
  40232a:	b009      	add	sp, #36	; 0x24
  40232c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40232e:	bf00      	nop
  402330:	200000ac 	.word	0x200000ac
  402334:	40034000 	.word	0x40034000
  402338:	200009a8 	.word	0x200009a8
  40233c:	00400ce5 	.word	0x00400ce5
  402340:	00400ca5 	.word	0x00400ca5

00402344 <wdt_disable>:
/**
 * \brief Disable the watchdog timer.
 */
void wdt_disable(Wdt *p_wdt)
{
	p_wdt->WDT_MR = WDT_MR_WDDIS;
  402344:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  402348:	6043      	str	r3, [r0, #4]
  40234a:	4770      	bx	lr

0040234c <sysclk_enable_usb>:
 *
 * \param pll_id Source of the USB clock.
 * \param div Actual clock divisor. Must be superior to 0.
 */
void sysclk_enable_usb(void)
{
  40234c:	b510      	push	{r4, lr}
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  40234e:	2000      	movs	r0, #0
  402350:	213e      	movs	r1, #62	; 0x3e
  402352:	4b0a      	ldr	r3, [pc, #40]	; (40237c <sysclk_enable_usb+0x30>)
  402354:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  402356:	4c0a      	ldr	r4, [pc, #40]	; (402380 <sysclk_enable_usb+0x34>)
  402358:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  40235a:	2800      	cmp	r0, #0
  40235c:	d0fc      	beq.n	402358 <sysclk_enable_usb+0xc>

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
	} else {
		pmc_disable_pllbck();
  40235e:	4b09      	ldr	r3, [pc, #36]	; (402384 <sysclk_enable_usb+0x38>)
  402360:	4798      	blx	r3
		PMC->CKGR_PLLBR = p_cfg->ctrl;
  402362:	4a09      	ldr	r2, [pc, #36]	; (402388 <sysclk_enable_usb+0x3c>)
  402364:	4b09      	ldr	r3, [pc, #36]	; (40238c <sysclk_enable_usb+0x40>)
  402366:	62da      	str	r2, [r3, #44]	; 0x2c
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
	} else {
		return pmc_is_locked_pllbck();
  402368:	4c09      	ldr	r4, [pc, #36]	; (402390 <sysclk_enable_usb+0x44>)
  40236a:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  40236c:	2800      	cmp	r0, #0
  40236e:	d0fc      	beq.n	40236a <sysclk_enable_usb+0x1e>

		pll_enable_source(CONFIG_PLL1_SOURCE);
		pll_config_defaults(&pllcfg, 1);
		pll_enable(&pllcfg, 1);
		pll_wait_for_lock(1);
		pmc_switch_udpck_to_pllbck(CONFIG_USBCLK_DIV - 1);
  402370:	2000      	movs	r0, #0
  402372:	4b08      	ldr	r3, [pc, #32]	; (402394 <sysclk_enable_usb+0x48>)
  402374:	4798      	blx	r3
		pmc_enable_udpck();
  402376:	4b08      	ldr	r3, [pc, #32]	; (402398 <sysclk_enable_usb+0x4c>)
  402378:	4798      	blx	r3
  40237a:	bd10      	pop	{r4, pc}
  40237c:	004026ed 	.word	0x004026ed
  402380:	00402741 	.word	0x00402741
  402384:	00402771 	.word	0x00402771
  402388:	00023f01 	.word	0x00023f01
  40238c:	400e0400 	.word	0x400e0400
  402390:	0040277d 	.word	0x0040277d
  402394:	00402835 	.word	0x00402835
  402398:	00402849 	.word	0x00402849

0040239c <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  40239c:	b510      	push	{r4, lr}
	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  40239e:	480e      	ldr	r0, [pc, #56]	; (4023d8 <sysclk_init+0x3c>)
  4023a0:	4b0e      	ldr	r3, [pc, #56]	; (4023dc <sysclk_init+0x40>)
  4023a2:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  4023a4:	2000      	movs	r0, #0
  4023a6:	213e      	movs	r1, #62	; 0x3e
  4023a8:	4b0d      	ldr	r3, [pc, #52]	; (4023e0 <sysclk_init+0x44>)
  4023aa:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  4023ac:	4c0d      	ldr	r4, [pc, #52]	; (4023e4 <sysclk_init+0x48>)
  4023ae:	47a0      	blx	r4
  4023b0:	2800      	cmp	r0, #0
  4023b2:	d0fc      	beq.n	4023ae <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  4023b4:	4b0c      	ldr	r3, [pc, #48]	; (4023e8 <sysclk_init+0x4c>)
  4023b6:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  4023b8:	4a0c      	ldr	r2, [pc, #48]	; (4023ec <sysclk_init+0x50>)
  4023ba:	4b0d      	ldr	r3, [pc, #52]	; (4023f0 <sysclk_init+0x54>)
  4023bc:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
  4023be:	4c0d      	ldr	r4, [pc, #52]	; (4023f4 <sysclk_init+0x58>)
  4023c0:	47a0      	blx	r4
  4023c2:	2800      	cmp	r0, #0
  4023c4:	d0fc      	beq.n	4023c0 <sysclk_init+0x24>

		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  4023c6:	2000      	movs	r0, #0
  4023c8:	4b0b      	ldr	r3, [pc, #44]	; (4023f8 <sysclk_init+0x5c>)
  4023ca:	4798      	blx	r3
		pmc_switch_mck_to_pllbck(CONFIG_SYSCLK_PRES);
	}
#endif

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  4023cc:	4b0b      	ldr	r3, [pc, #44]	; (4023fc <sysclk_init+0x60>)
  4023ce:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  4023d0:	480b      	ldr	r0, [pc, #44]	; (402400 <sysclk_init+0x64>)
  4023d2:	4b02      	ldr	r3, [pc, #8]	; (4023dc <sysclk_init+0x40>)
  4023d4:	4798      	blx	r3
  4023d6:	bd10      	pop	{r4, pc}
  4023d8:	07270e00 	.word	0x07270e00
  4023dc:	00402da1 	.word	0x00402da1
  4023e0:	004026ed 	.word	0x004026ed
  4023e4:	00402741 	.word	0x00402741
  4023e8:	00402751 	.word	0x00402751
  4023ec:	20053f01 	.word	0x20053f01
  4023f0:	400e0400 	.word	0x400e0400
  4023f4:	00402761 	.word	0x00402761
  4023f8:	00402685 	.word	0x00402685
  4023fc:	00402c8d 	.word	0x00402c8d
  402400:	05b8d800 	.word	0x05b8d800

00402404 <dacc_reset>:
 *
 * \param p_dacc Pointer to a DACC instance. 
 */
void dacc_reset(Dacc *p_dacc)
{
	p_dacc->DACC_CR = DACC_CR_SWRST;
  402404:	2301      	movs	r3, #1
  402406:	6003      	str	r3, [r0, #0]
  402408:	4770      	bx	lr
  40240a:	bf00      	nop

0040240c <dacc_set_transfer_mode>:
 *
 * \return \ref DACC_RC_OK for OK.
 */
uint32_t dacc_set_transfer_mode(Dacc *p_dacc, uint32_t ul_mode)
{
	if (ul_mode) {
  40240c:	b141      	cbz	r1, 402420 <dacc_set_transfer_mode+0x14>
#if (SAM3N) || (SAM4L) || (SAM4N)
		p_dacc->DACC_MR |= DACC_MR_WORD;
#elif (SAM4S) || (SAM4E)
		p_dacc->DACC_MR |= DACC_MR_ONE;
  40240e:	6843      	ldr	r3, [r0, #4]
  402410:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  402414:	6043      	str	r3, [r0, #4]
		p_dacc->DACC_MR |= DACC_MR_WORD_WORD;
  402416:	6843      	ldr	r3, [r0, #4]
  402418:	f043 0310 	orr.w	r3, r3, #16
  40241c:	6043      	str	r3, [r0, #4]
  40241e:	e007      	b.n	402430 <dacc_set_transfer_mode+0x24>
#endif
	} else {
#if (SAM3N) || (SAM4L) || (SAM4N)
		p_dacc->DACC_MR &= (~DACC_MR_WORD);
#elif (SAM4S) || (SAM4E)
		p_dacc->DACC_MR |= DACC_MR_ONE;
  402420:	6843      	ldr	r3, [r0, #4]
  402422:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  402426:	6043      	str	r3, [r0, #4]
		p_dacc->DACC_MR &= (~DACC_MR_WORD_WORD);
  402428:	6843      	ldr	r3, [r0, #4]
  40242a:	f023 0310 	bic.w	r3, r3, #16
  40242e:	6043      	str	r3, [r0, #4]
#else
		p_dacc->DACC_MR &= (~DACC_MR_WORD_WORD);
#endif
	}
	return DACC_RC_OK;
}
  402430:	2000      	movs	r0, #0
  402432:	4770      	bx	lr

00402434 <dacc_get_interrupt_status>:
 *
 * \return The interrupt status.
 */
uint32_t dacc_get_interrupt_status(Dacc *p_dacc)
{
	return p_dacc->DACC_ISR;
  402434:	6b00      	ldr	r0, [r0, #48]	; 0x30
}
  402436:	4770      	bx	lr

00402438 <dacc_write_conversion_data>:
 * \param p_dacc Pointer to a DACC instance. 
 * \param ul_data The data to be transferred to analog value.
 */
void dacc_write_conversion_data(Dacc *p_dacc, uint32_t ul_data)
{
	p_dacc->DACC_CDR = ul_data;
  402438:	6201      	str	r1, [r0, #32]
  40243a:	4770      	bx	lr

0040243c <dacc_set_channel_selection>:
 *
 * \return \ref DACC_RC_OK if successful.
 */
uint32_t dacc_set_channel_selection(Dacc *p_dacc, uint32_t ul_channel)
{
	uint32_t mr = p_dacc->DACC_MR & (~DACC_MR_USER_SEL_Msk);
  40243c:	6843      	ldr	r3, [r0, #4]
	if (ul_channel > MAX_CH_NB) {
  40243e:	2901      	cmp	r1, #1
  402440:	d806      	bhi.n	402450 <dacc_set_channel_selection+0x14>
		return DACC_RC_INVALID_PARAM;
	}
	mr &= ~(DACC_MR_TAG);
  402442:	f423 1398 	bic.w	r3, r3, #1245184	; 0x130000
	mr |= ul_channel << DACC_MR_USER_SEL_Pos;
  402446:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
	p_dacc->DACC_MR = mr;
  40244a:	6041      	str	r1, [r0, #4]

	return DACC_RC_OK;
  40244c:	2000      	movs	r0, #0
  40244e:	4770      	bx	lr
 */
uint32_t dacc_set_channel_selection(Dacc *p_dacc, uint32_t ul_channel)
{
	uint32_t mr = p_dacc->DACC_MR & (~DACC_MR_USER_SEL_Msk);
	if (ul_channel > MAX_CH_NB) {
		return DACC_RC_INVALID_PARAM;
  402450:	2001      	movs	r0, #1
	mr &= ~(DACC_MR_TAG);
	mr |= ul_channel << DACC_MR_USER_SEL_Pos;
	p_dacc->DACC_MR = mr;

	return DACC_RC_OK;
}
  402452:	4770      	bx	lr

00402454 <dacc_enable_channel>:
 *
 * \return \ref DACC_RC_OK for OK.
 */
uint32_t dacc_enable_channel(Dacc *p_dacc, uint32_t ul_channel)
{
	if (ul_channel > MAX_CH_NB)
  402454:	2901      	cmp	r1, #1
  402456:	d804      	bhi.n	402462 <dacc_enable_channel+0xe>
		return DACC_RC_INVALID_PARAM;

	p_dacc->DACC_CHER = DACC_CHER_CH0 << ul_channel;
  402458:	2301      	movs	r3, #1
  40245a:	408b      	lsls	r3, r1
  40245c:	6103      	str	r3, [r0, #16]
	return DACC_RC_OK;
  40245e:	2000      	movs	r0, #0
  402460:	4770      	bx	lr
 * \return \ref DACC_RC_OK for OK.
 */
uint32_t dacc_enable_channel(Dacc *p_dacc, uint32_t ul_channel)
{
	if (ul_channel > MAX_CH_NB)
		return DACC_RC_INVALID_PARAM;
  402462:	2001      	movs	r0, #1

	p_dacc->DACC_CHER = DACC_CHER_CH0 << ul_channel;
	return DACC_RC_OK;
}
  402464:	4770      	bx	lr
  402466:	bf00      	nop

00402468 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  402468:	6442      	str	r2, [r0, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  40246a:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  40246e:	d02f      	beq.n	4024d0 <pio_set_peripheral+0x68>
  402470:	d807      	bhi.n	402482 <pio_set_peripheral+0x1a>
  402472:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  402476:	d014      	beq.n	4024a2 <pio_set_peripheral+0x3a>
  402478:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  40247c:	d01e      	beq.n	4024bc <pio_set_peripheral+0x54>
  40247e:	b939      	cbnz	r1, 402490 <pio_set_peripheral+0x28>
  402480:	4770      	bx	lr
  402482:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  402486:	d037      	beq.n	4024f8 <pio_set_peripheral+0x90>
  402488:	d804      	bhi.n	402494 <pio_set_peripheral+0x2c>
  40248a:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  40248e:	d029      	beq.n	4024e4 <pio_set_peripheral+0x7c>
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  402490:	6042      	str	r2, [r0, #4]
  402492:	4770      	bx	lr

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  402494:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  402498:	d02e      	beq.n	4024f8 <pio_set_peripheral+0x90>
  40249a:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  40249e:	d02b      	beq.n	4024f8 <pio_set_peripheral+0x90>
  4024a0:	e7f6      	b.n	402490 <pio_set_peripheral+0x28>
 * \param ul_type PIO type.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set_peripheral(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
  4024a2:	b410      	push	{r4}
	p_pio->PIO_IDR = ul_mask;

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABCDSR[0];
  4024a4:	6f01      	ldr	r1, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  4024a6:	6f04      	ldr	r4, [r0, #112]	; 0x70
  4024a8:	43d3      	mvns	r3, r2
  4024aa:	4021      	ands	r1, r4
  4024ac:	4019      	ands	r1, r3
  4024ae:	6701      	str	r1, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  4024b0:	6f41      	ldr	r1, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  4024b2:	6f44      	ldr	r4, [r0, #116]	; 0x74
  4024b4:	4021      	ands	r1, r4
  4024b6:	400b      	ands	r3, r1
  4024b8:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  4024ba:	e01a      	b.n	4024f2 <pio_set_peripheral+0x8a>
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  4024bc:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  4024be:	4313      	orrs	r3, r2
  4024c0:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  4024c2:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  4024c4:	6f41      	ldr	r1, [r0, #116]	; 0x74
  4024c6:	400b      	ands	r3, r1
  4024c8:	ea23 0302 	bic.w	r3, r3, r2
  4024cc:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  4024ce:	e7df      	b.n	402490 <pio_set_peripheral+0x28>
#if (!SAMG)
	case PIO_PERIPH_C:
		ul_sr = p_pio->PIO_ABCDSR[0];
  4024d0:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  4024d2:	6f01      	ldr	r1, [r0, #112]	; 0x70
  4024d4:	400b      	ands	r3, r1
  4024d6:	ea23 0302 	bic.w	r3, r3, r2
  4024da:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  4024dc:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  4024de:	4313      	orrs	r3, r2
  4024e0:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  4024e2:	e7d5      	b.n	402490 <pio_set_peripheral+0x28>
	case PIO_PERIPH_D:
		ul_sr = p_pio->PIO_ABCDSR[0];
  4024e4:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  4024e6:	4313      	orrs	r3, r2
  4024e8:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  4024ea:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  4024ec:	4313      	orrs	r3, r2
  4024ee:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  4024f0:	e7ce      	b.n	402490 <pio_set_peripheral+0x28>
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  4024f2:	6042      	str	r2, [r0, #4]
}
  4024f4:	f85d 4b04 	ldr.w	r4, [sp], #4
  4024f8:	4770      	bx	lr
  4024fa:	bf00      	nop

004024fc <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  4024fc:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  4024fe:	f012 0f01 	tst.w	r2, #1
		p_pio->PIO_PUER = ul_mask;
  402502:	bf14      	ite	ne
  402504:	6641      	strne	r1, [r0, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  402506:	6601      	streq	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  402508:	f012 0f0a 	tst.w	r2, #10
		p_pio->PIO_IFER = ul_mask;
  40250c:	bf14      	ite	ne
  40250e:	6201      	strne	r1, [r0, #32]
	} else {
		p_pio->PIO_IFDR = ul_mask;
  402510:	6241      	streq	r1, [r0, #36]	; 0x24
	}

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
  402512:	f012 0f02 	tst.w	r2, #2
  402516:	d002      	beq.n	40251e <pio_set_input+0x22>
		p_pio->PIO_IFSCDR = ul_mask;
  402518:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
  40251c:	e004      	b.n	402528 <pio_set_input+0x2c>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
  40251e:	f012 0f08 	tst.w	r2, #8
			p_pio->PIO_IFSCER = ul_mask;
  402522:	bf18      	it	ne
  402524:	f8c0 1084 	strne.w	r1, [r0, #132]	; 0x84
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
  402528:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
  40252a:	6001      	str	r1, [r0, #0]
  40252c:	4770      	bx	lr
  40252e:	bf00      	nop

00402530 <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
  402530:	b410      	push	{r4}
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  402532:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  402534:	9c01      	ldr	r4, [sp, #4]
  402536:	b10c      	cbz	r4, 40253c <pio_set_output+0xc>
		p_pio->PIO_PUER = ul_mask;
  402538:	6641      	str	r1, [r0, #100]	; 0x64
  40253a:	e000      	b.n	40253e <pio_set_output+0xe>
	} else {
		p_pio->PIO_PUDR = ul_mask;
  40253c:	6601      	str	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
  40253e:	b10b      	cbz	r3, 402544 <pio_set_output+0x14>
		p_pio->PIO_MDER = ul_mask;
  402540:	6501      	str	r1, [r0, #80]	; 0x50
  402542:	e000      	b.n	402546 <pio_set_output+0x16>
	} else {
		p_pio->PIO_MDDR = ul_mask;
  402544:	6541      	str	r1, [r0, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
  402546:	b10a      	cbz	r2, 40254c <pio_set_output+0x1c>
		p_pio->PIO_SODR = ul_mask;
  402548:	6301      	str	r1, [r0, #48]	; 0x30
  40254a:	e000      	b.n	40254e <pio_set_output+0x1e>
	} else {
		p_pio->PIO_CODR = ul_mask;
  40254c:	6341      	str	r1, [r0, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
  40254e:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
  402550:	6001      	str	r1, [r0, #0]
}
  402552:	f85d 4b04 	ldr.w	r4, [sp], #4
  402556:	4770      	bx	lr

00402558 <pio_get_interrupt_status>:
 *
 * \return The interrupt status mask value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  402558:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  40255a:	4770      	bx	lr

0040255c <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  40255c:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  40255e:	4770      	bx	lr

00402560 <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
  402560:	b570      	push	{r4, r5, r6, lr}
  402562:	b082      	sub	sp, #8
  402564:	460d      	mov	r5, r1
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  402566:	0943      	lsrs	r3, r0, #5
  402568:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  40256c:	f203 7307 	addw	r3, r3, #1799	; 0x707
  402570:	025c      	lsls	r4, r3, #9
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
	Pio *p_pio = pio_get_pin_group(ul_pin);

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
  402572:	f001 43f0 	and.w	r3, r1, #2013265920	; 0x78000000
  402576:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  40257a:	d047      	beq.n	40260c <pio_configure_pin+0xac>
  40257c:	d809      	bhi.n	402592 <pio_configure_pin+0x32>
  40257e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  402582:	d021      	beq.n	4025c8 <pio_configure_pin+0x68>
  402584:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  402588:	d02f      	beq.n	4025ea <pio_configure_pin+0x8a>
  40258a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  40258e:	d16f      	bne.n	402670 <pio_configure_pin+0x110>
  402590:	e009      	b.n	4025a6 <pio_configure_pin+0x46>
  402592:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  402596:	d055      	beq.n	402644 <pio_configure_pin+0xe4>
  402598:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  40259c:	d052      	beq.n	402644 <pio_configure_pin+0xe4>
  40259e:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  4025a2:	d044      	beq.n	40262e <pio_configure_pin+0xce>
  4025a4:	e064      	b.n	402670 <pio_configure_pin+0x110>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
  4025a6:	f000 001f 	and.w	r0, r0, #31
  4025aa:	2601      	movs	r6, #1
  4025ac:	4086      	lsls	r6, r0
  4025ae:	4620      	mov	r0, r4
  4025b0:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4025b4:	4632      	mov	r2, r6
  4025b6:	4b30      	ldr	r3, [pc, #192]	; (402678 <pio_configure_pin+0x118>)
  4025b8:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  4025ba:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  4025be:	bf14      	ite	ne
  4025c0:	6666      	strne	r6, [r4, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  4025c2:	6626      	streq	r6, [r4, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  4025c4:	2001      	movs	r0, #1
  4025c6:	e054      	b.n	402672 <pio_configure_pin+0x112>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
  4025c8:	f000 001f 	and.w	r0, r0, #31
  4025cc:	2601      	movs	r6, #1
  4025ce:	4086      	lsls	r6, r0
  4025d0:	4620      	mov	r0, r4
  4025d2:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  4025d6:	4632      	mov	r2, r6
  4025d8:	4b27      	ldr	r3, [pc, #156]	; (402678 <pio_configure_pin+0x118>)
  4025da:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  4025dc:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  4025e0:	bf14      	ite	ne
  4025e2:	6666      	strne	r6, [r4, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  4025e4:	6626      	streq	r6, [r4, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  4025e6:	2001      	movs	r0, #1
  4025e8:	e043      	b.n	402672 <pio_configure_pin+0x112>
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	case PIO_TYPE_PIO_PERIPH_C:
		pio_set_peripheral(p_pio, PIO_PERIPH_C, (1 << (ul_pin & 0x1F)));
  4025ea:	f000 001f 	and.w	r0, r0, #31
  4025ee:	2601      	movs	r6, #1
  4025f0:	4086      	lsls	r6, r0
  4025f2:	4620      	mov	r0, r4
  4025f4:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  4025f8:	4632      	mov	r2, r6
  4025fa:	4b1f      	ldr	r3, [pc, #124]	; (402678 <pio_configure_pin+0x118>)
  4025fc:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  4025fe:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  402602:	bf14      	ite	ne
  402604:	6666      	strne	r6, [r4, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  402606:	6626      	streq	r6, [r4, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  402608:	2001      	movs	r0, #1
  40260a:	e032      	b.n	402672 <pio_configure_pin+0x112>
		pio_set_peripheral(p_pio, PIO_PERIPH_C, (1 << (ul_pin & 0x1F)));
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_D:
		pio_set_peripheral(p_pio, PIO_PERIPH_D, (1 << (ul_pin & 0x1F)));
  40260c:	f000 001f 	and.w	r0, r0, #31
  402610:	2601      	movs	r6, #1
  402612:	4086      	lsls	r6, r0
  402614:	4620      	mov	r0, r4
  402616:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  40261a:	4632      	mov	r2, r6
  40261c:	4b16      	ldr	r3, [pc, #88]	; (402678 <pio_configure_pin+0x118>)
  40261e:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  402620:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  402624:	bf14      	ite	ne
  402626:	6666      	strne	r6, [r4, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  402628:	6626      	streq	r6, [r4, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  40262a:	2001      	movs	r0, #1
  40262c:	e021      	b.n	402672 <pio_configure_pin+0x112>
				(ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
  40262e:	f000 031f 	and.w	r3, r0, #31
  402632:	2601      	movs	r6, #1
  402634:	4620      	mov	r0, r4
  402636:	fa06 f103 	lsl.w	r1, r6, r3
  40263a:	462a      	mov	r2, r5
  40263c:	4b0f      	ldr	r3, [pc, #60]	; (40267c <pio_configure_pin+0x11c>)
  40263e:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
  402640:	4630      	mov	r0, r6
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;
  402642:	e016      	b.n	402672 <pio_configure_pin+0x112>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  402644:	f000 031f 	and.w	r3, r0, #31
  402648:	2601      	movs	r6, #1
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
  40264a:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  40264e:	ea05 0106 	and.w	r1, r5, r6
  402652:	9100      	str	r1, [sp, #0]
  402654:	4620      	mov	r0, r4
  402656:	fa06 f103 	lsl.w	r1, r6, r3
  40265a:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
  40265e:	bf14      	ite	ne
  402660:	2200      	movne	r2, #0
  402662:	2201      	moveq	r2, #1
  402664:	f3c5 0380 	ubfx	r3, r5, #2, #1
  402668:	4c05      	ldr	r4, [pc, #20]	; (402680 <pio_configure_pin+0x120>)
  40266a:	47a0      	blx	r4

	default:
		return 0;
	}

	return 1;
  40266c:	4630      	mov	r0, r6
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
  40266e:	e000      	b.n	402672 <pio_configure_pin+0x112>

	default:
		return 0;
  402670:	2000      	movs	r0, #0
	}

	return 1;
}
  402672:	b002      	add	sp, #8
  402674:	bd70      	pop	{r4, r5, r6, pc}
  402676:	bf00      	nop
  402678:	00402469 	.word	0x00402469
  40267c:	004024fd 	.word	0x004024fd
  402680:	00402531 	.word	0x00402531

00402684 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  402684:	4a18      	ldr	r2, [pc, #96]	; (4026e8 <pmc_switch_mck_to_pllack+0x64>)
  402686:	6b13      	ldr	r3, [r2, #48]	; 0x30
  402688:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  40268c:	4318      	orrs	r0, r3
  40268e:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  402690:	6e93      	ldr	r3, [r2, #104]	; 0x68
  402692:	f013 0f08 	tst.w	r3, #8
  402696:	d003      	beq.n	4026a0 <pmc_switch_mck_to_pllack+0x1c>
  402698:	e009      	b.n	4026ae <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  40269a:	3b01      	subs	r3, #1
  40269c:	d103      	bne.n	4026a6 <pmc_switch_mck_to_pllack+0x22>
  40269e:	e01e      	b.n	4026de <pmc_switch_mck_to_pllack+0x5a>
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4026a0:	f44f 6300 	mov.w	r3, #2048	; 0x800
  4026a4:	4910      	ldr	r1, [pc, #64]	; (4026e8 <pmc_switch_mck_to_pllack+0x64>)
  4026a6:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  4026a8:	f012 0f08 	tst.w	r2, #8
  4026ac:	d0f5      	beq.n	40269a <pmc_switch_mck_to_pllack+0x16>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  4026ae:	4a0e      	ldr	r2, [pc, #56]	; (4026e8 <pmc_switch_mck_to_pllack+0x64>)
  4026b0:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4026b2:	f023 0303 	bic.w	r3, r3, #3
  4026b6:	f043 0302 	orr.w	r3, r3, #2
  4026ba:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4026bc:	6e90      	ldr	r0, [r2, #104]	; 0x68
  4026be:	f010 0008 	ands.w	r0, r0, #8
  4026c2:	d004      	beq.n	4026ce <pmc_switch_mck_to_pllack+0x4a>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
  4026c4:	2000      	movs	r0, #0
  4026c6:	4770      	bx	lr
	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
  4026c8:	3b01      	subs	r3, #1
  4026ca:	d103      	bne.n	4026d4 <pmc_switch_mck_to_pllack+0x50>
  4026cc:	e009      	b.n	4026e2 <pmc_switch_mck_to_pllack+0x5e>
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4026ce:	f44f 6300 	mov.w	r3, #2048	; 0x800
  4026d2:	4905      	ldr	r1, [pc, #20]	; (4026e8 <pmc_switch_mck_to_pllack+0x64>)
  4026d4:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  4026d6:	f012 0f08 	tst.w	r2, #8
  4026da:	d0f5      	beq.n	4026c8 <pmc_switch_mck_to_pllack+0x44>
  4026dc:	4770      	bx	lr

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
  4026de:	2001      	movs	r0, #1
  4026e0:	4770      	bx	lr
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
  4026e2:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  4026e4:	4770      	bx	lr
  4026e6:	bf00      	nop
  4026e8:	400e0400 	.word	0x400e0400

004026ec <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  4026ec:	b138      	cbz	r0, 4026fe <pmc_switch_mainck_to_xtal+0x12>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  4026ee:	4911      	ldr	r1, [pc, #68]	; (402734 <pmc_switch_mainck_to_xtal+0x48>)
  4026f0:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  4026f2:	4a11      	ldr	r2, [pc, #68]	; (402738 <pmc_switch_mainck_to_xtal+0x4c>)
  4026f4:	401a      	ands	r2, r3
  4026f6:	4b11      	ldr	r3, [pc, #68]	; (40273c <pmc_switch_mainck_to_xtal+0x50>)
  4026f8:	4313      	orrs	r3, r2
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  4026fa:	620b      	str	r3, [r1, #32]
  4026fc:	4770      	bx	lr
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  4026fe:	4a0d      	ldr	r2, [pc, #52]	; (402734 <pmc_switch_mainck_to_xtal+0x48>)
  402700:	6a13      	ldr	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  402702:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
  402706:	f023 0303 	bic.w	r3, r3, #3
  40270a:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  40270e:	f043 0301 	orr.w	r3, r3, #1
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  402712:	0209      	lsls	r1, r1, #8
  402714:	b289      	uxth	r1, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  402716:	430b      	orrs	r3, r1
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  402718:	6213      	str	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  40271a:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40271c:	f013 0f01 	tst.w	r3, #1
  402720:	d0fb      	beq.n	40271a <pmc_switch_mainck_to_xtal+0x2e>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  402722:	4a04      	ldr	r2, [pc, #16]	; (402734 <pmc_switch_mainck_to_xtal+0x48>)
  402724:	6a13      	ldr	r3, [r2, #32]
  402726:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
  40272a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  40272e:	6213      	str	r3, [r2, #32]
  402730:	4770      	bx	lr
  402732:	bf00      	nop
  402734:	400e0400 	.word	0x400e0400
  402738:	fec8fffc 	.word	0xfec8fffc
  40273c:	01370002 	.word	0x01370002

00402740 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  402740:	4b02      	ldr	r3, [pc, #8]	; (40274c <pmc_osc_is_ready_mainck+0xc>)
  402742:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  402744:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  402748:	4770      	bx	lr
  40274a:	bf00      	nop
  40274c:	400e0400 	.word	0x400e0400

00402750 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  402750:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  402754:	4b01      	ldr	r3, [pc, #4]	; (40275c <pmc_disable_pllack+0xc>)
  402756:	629a      	str	r2, [r3, #40]	; 0x28
  402758:	4770      	bx	lr
  40275a:	bf00      	nop
  40275c:	400e0400 	.word	0x400e0400

00402760 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  402760:	4b02      	ldr	r3, [pc, #8]	; (40276c <pmc_is_locked_pllack+0xc>)
  402762:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  402764:	f000 0002 	and.w	r0, r0, #2
  402768:	4770      	bx	lr
  40276a:	bf00      	nop
  40276c:	400e0400 	.word	0x400e0400

00402770 <pmc_disable_pllbck>:
/**
 * \brief Disable PLLB clock.
 */
void pmc_disable_pllbck(void)
{
	PMC->CKGR_PLLBR = CKGR_PLLBR_MULB(0);
  402770:	2200      	movs	r2, #0
  402772:	4b01      	ldr	r3, [pc, #4]	; (402778 <pmc_disable_pllbck+0x8>)
  402774:	62da      	str	r2, [r3, #44]	; 0x2c
  402776:	4770      	bx	lr
  402778:	400e0400 	.word	0x400e0400

0040277c <pmc_is_locked_pllbck>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllbck(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKB);
  40277c:	4b02      	ldr	r3, [pc, #8]	; (402788 <pmc_is_locked_pllbck+0xc>)
  40277e:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  402780:	f000 0004 	and.w	r0, r0, #4
  402784:	4770      	bx	lr
  402786:	bf00      	nop
  402788:	400e0400 	.word	0x400e0400

0040278c <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
  40278c:	2822      	cmp	r0, #34	; 0x22
  40278e:	d81e      	bhi.n	4027ce <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
  402790:	281f      	cmp	r0, #31
  402792:	d80c      	bhi.n	4027ae <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  402794:	4b11      	ldr	r3, [pc, #68]	; (4027dc <pmc_enable_periph_clk+0x50>)
  402796:	699a      	ldr	r2, [r3, #24]
  402798:	2301      	movs	r3, #1
  40279a:	4083      	lsls	r3, r0
  40279c:	401a      	ands	r2, r3
  40279e:	4293      	cmp	r3, r2
  4027a0:	d017      	beq.n	4027d2 <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
  4027a2:	2301      	movs	r3, #1
  4027a4:	4083      	lsls	r3, r0
  4027a6:	4a0d      	ldr	r2, [pc, #52]	; (4027dc <pmc_enable_periph_clk+0x50>)
  4027a8:	6113      	str	r3, [r2, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  4027aa:	2000      	movs	r0, #0
  4027ac:	4770      	bx	lr
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  4027ae:	4b0b      	ldr	r3, [pc, #44]	; (4027dc <pmc_enable_periph_clk+0x50>)
  4027b0:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
  4027b4:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  4027b6:	2301      	movs	r3, #1
  4027b8:	4083      	lsls	r3, r0
  4027ba:	401a      	ands	r2, r3
  4027bc:	4293      	cmp	r3, r2
  4027be:	d00a      	beq.n	4027d6 <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
  4027c0:	2301      	movs	r3, #1
  4027c2:	4083      	lsls	r3, r0
  4027c4:	4a05      	ldr	r2, [pc, #20]	; (4027dc <pmc_enable_periph_clk+0x50>)
  4027c6:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
		}
#endif
	}

	return 0;
  4027ca:	2000      	movs	r0, #0
  4027cc:	4770      	bx	lr
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
		return 1;
  4027ce:	2001      	movs	r0, #1
  4027d0:	4770      	bx	lr
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  4027d2:	2000      	movs	r0, #0
  4027d4:	4770      	bx	lr
  4027d6:	2000      	movs	r0, #0
}
  4027d8:	4770      	bx	lr
  4027da:	bf00      	nop
  4027dc:	400e0400 	.word	0x400e0400

004027e0 <pmc_disable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_disable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
  4027e0:	2822      	cmp	r0, #34	; 0x22
  4027e2:	d81e      	bhi.n	402822 <pmc_disable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
  4027e4:	281f      	cmp	r0, #31
  4027e6:	d80c      	bhi.n	402802 <pmc_disable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) == (1u << ul_id)) {
  4027e8:	4b11      	ldr	r3, [pc, #68]	; (402830 <pmc_disable_periph_clk+0x50>)
  4027ea:	699a      	ldr	r2, [r3, #24]
  4027ec:	2301      	movs	r3, #1
  4027ee:	4083      	lsls	r3, r0
  4027f0:	401a      	ands	r2, r3
  4027f2:	4293      	cmp	r3, r2
  4027f4:	d117      	bne.n	402826 <pmc_disable_periph_clk+0x46>
			PMC->PMC_PCDR0 = 1 << ul_id;
  4027f6:	2301      	movs	r3, #1
  4027f8:	4083      	lsls	r3, r0
  4027fa:	4a0d      	ldr	r2, [pc, #52]	; (402830 <pmc_disable_periph_clk+0x50>)
  4027fc:	6153      	str	r3, [r2, #20]
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) == (1u << ul_id)) {
			PMC->PMC_PCDR1 = 1 << ul_id;
		}
#endif
	}
	return 0;
  4027fe:	2000      	movs	r0, #0
  402800:	4770      	bx	lr
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 \
		|| SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) == (1u << ul_id)) {
  402802:	4b0b      	ldr	r3, [pc, #44]	; (402830 <pmc_disable_periph_clk+0x50>)
  402804:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
			PMC->PMC_PCDR0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 \
		|| SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
  402808:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) == (1u << ul_id)) {
  40280a:	2301      	movs	r3, #1
  40280c:	4083      	lsls	r3, r0
  40280e:	401a      	ands	r2, r3
  402810:	4293      	cmp	r3, r2
  402812:	d10a      	bne.n	40282a <pmc_disable_periph_clk+0x4a>
			PMC->PMC_PCDR1 = 1 << ul_id;
  402814:	2301      	movs	r3, #1
  402816:	4083      	lsls	r3, r0
  402818:	4a05      	ldr	r2, [pc, #20]	; (402830 <pmc_disable_periph_clk+0x50>)
  40281a:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
		}
#endif
	}
	return 0;
  40281e:	2000      	movs	r0, #0
  402820:	4770      	bx	lr
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_disable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
		return 1;
  402822:	2001      	movs	r0, #1
  402824:	4770      	bx	lr
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) == (1u << ul_id)) {
			PMC->PMC_PCDR1 = 1 << ul_id;
		}
#endif
	}
	return 0;
  402826:	2000      	movs	r0, #0
  402828:	4770      	bx	lr
  40282a:	2000      	movs	r0, #0
}
  40282c:	4770      	bx	lr
  40282e:	bf00      	nop
  402830:	400e0400 	.word	0x400e0400

00402834 <pmc_switch_udpck_to_pllbck>:
 *
 * \param ul_usbdiv Clock divisor.
 */
void pmc_switch_udpck_to_pllbck(uint32_t ul_usbdiv)
{
	PMC->PMC_USB = PMC_USB_USBDIV(ul_usbdiv) | PMC_USB_USBS;
  402834:	0200      	lsls	r0, r0, #8
  402836:	f400 6070 	and.w	r0, r0, #3840	; 0xf00
  40283a:	f040 0001 	orr.w	r0, r0, #1
  40283e:	4b01      	ldr	r3, [pc, #4]	; (402844 <pmc_switch_udpck_to_pllbck+0x10>)
  402840:	6398      	str	r0, [r3, #56]	; 0x38
  402842:	4770      	bx	lr
  402844:	400e0400 	.word	0x400e0400

00402848 <pmc_enable_udpck>:
 * \brief Enable UDP (USB) clock.
 */
void pmc_enable_udpck(void)
{
#if (SAM3S || SAM4S || SAM4E || SAMG55)
	PMC->PMC_SCER = PMC_SCER_UDP;
  402848:	2280      	movs	r2, #128	; 0x80
  40284a:	4b01      	ldr	r3, [pc, #4]	; (402850 <pmc_enable_udpck+0x8>)
  40284c:	601a      	str	r2, [r3, #0]
  40284e:	4770      	bx	lr
  402850:	400e0400 	.word	0x400e0400

00402854 <pmc_set_fast_startup_input>:
 * \param ul_inputs Wake up inputs to enable.
 */
void pmc_set_fast_startup_input(uint32_t ul_inputs)
{
	ul_inputs &= PMC_FAST_STARTUP_Msk;
	PMC->PMC_FSMR |= ul_inputs;
  402854:	4a03      	ldr	r2, [pc, #12]	; (402864 <pmc_set_fast_startup_input+0x10>)
  402856:	6f13      	ldr	r3, [r2, #112]	; 0x70
 *
 * \param ul_inputs Wake up inputs to enable.
 */
void pmc_set_fast_startup_input(uint32_t ul_inputs)
{
	ul_inputs &= PMC_FAST_STARTUP_Msk;
  402858:	f3c0 0012 	ubfx	r0, r0, #0, #19
	PMC->PMC_FSMR |= ul_inputs;
  40285c:	4303      	orrs	r3, r0
  40285e:	6713      	str	r3, [r2, #112]	; 0x70
  402860:	4770      	bx	lr
  402862:	bf00      	nop
  402864:	400e0400 	.word	0x400e0400

00402868 <pmc_set_flash_in_wait_mode>:
 * \param ul_flash_state PMC_WAIT_MODE_FLASH_STANDBY flash in standby mode,
 * PMC_WAIT_MODE_FLASH_DEEP_POWERDOWN flash in deep power down mode.
 */
void pmc_set_flash_in_wait_mode(uint32_t ul_flash_state)
{
	ul_flash_in_wait_mode = ul_flash_state;
  402868:	4b01      	ldr	r3, [pc, #4]	; (402870 <pmc_set_flash_in_wait_mode+0x8>)
  40286a:	6018      	str	r0, [r3, #0]
  40286c:	4770      	bx	lr
  40286e:	bf00      	nop
  402870:	200000a8 	.word	0x200000a8

00402874 <pmc_enable_waitmode>:
void pmc_enable_waitmode(void)
{
	uint32_t i;

	/* Flash in wait mode */
	i = PMC->PMC_FSMR;
  402874:	4a11      	ldr	r2, [pc, #68]	; (4028bc <pmc_enable_waitmode+0x48>)
  402876:	6f13      	ldr	r3, [r2, #112]	; 0x70
	i &= ~PMC_FSMR_FLPM_Msk;
  402878:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
	i |= ul_flash_in_wait_mode;
  40287c:	4b10      	ldr	r3, [pc, #64]	; (4028c0 <pmc_enable_waitmode+0x4c>)
  40287e:	681b      	ldr	r3, [r3, #0]
  402880:	430b      	orrs	r3, r1
	PMC->PMC_FSMR = i;
  402882:	6713      	str	r3, [r2, #112]	; 0x70

	/* Set the WAITMODE bit = 1 */
	PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_WAITMODE;
  402884:	6a13      	ldr	r3, [r2, #32]
  402886:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  40288a:	f043 0304 	orr.w	r3, r3, #4
  40288e:	6213      	str	r3, [r2, #32]

	/* Waiting for Master Clock Ready MCKRDY = 1 */
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  402890:	6e93      	ldr	r3, [r2, #104]	; 0x68
  402892:	f013 0f08 	tst.w	r3, #8
  402896:	d0fb      	beq.n	402890 <pmc_enable_waitmode+0x1c>
  402898:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
  40289c:	bf00      	nop

	/* Waiting for MOSCRCEN bit cleared is strongly recommended
	 * to ensure that the core will not execute undesired instructions
	 */
	for (i = 0; i < 500; i++) {
  40289e:	3b01      	subs	r3, #1
  4028a0:	d1fc      	bne.n	40289c <pmc_enable_waitmode+0x28>
		__NOP();
	}
	while (!(PMC->CKGR_MOR & CKGR_MOR_MOSCRCEN));
  4028a2:	4a06      	ldr	r2, [pc, #24]	; (4028bc <pmc_enable_waitmode+0x48>)
  4028a4:	6a13      	ldr	r3, [r2, #32]
  4028a6:	f013 0f08 	tst.w	r3, #8
  4028aa:	d0fb      	beq.n	4028a4 <pmc_enable_waitmode+0x30>

#if (!SAMG)
	/* Restore Flash in idle mode */
	i = PMC->PMC_FSMR;
  4028ac:	4a03      	ldr	r2, [pc, #12]	; (4028bc <pmc_enable_waitmode+0x48>)
  4028ae:	6f13      	ldr	r3, [r2, #112]	; 0x70
	i &= ~PMC_FSMR_FLPM_Msk;
  4028b0:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
	i |= PMC_WAIT_MODE_FLASH_IDLE;
  4028b4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
	PMC->PMC_FSMR = i;
  4028b8:	6713      	str	r3, [r2, #112]	; 0x70
  4028ba:	4770      	bx	lr
  4028bc:	400e0400 	.word	0x400e0400
  4028c0:	200000a8 	.word	0x200000a8

004028c4 <pmc_sleep>:
/** Callback invoked once when clocks are restored */
static pmc_callback_wakeup_clocks_restored_t callback_clocks_restored = NULL;

void pmc_sleep(int sleep_mode)
{
	switch (sleep_mode) {
  4028c4:	1e43      	subs	r3, r0, #1
  4028c6:	2b04      	cmp	r3, #4
  4028c8:	f200 8129 	bhi.w	402b1e <pmc_sleep+0x25a>
  4028cc:	e8df f013 	tbh	[pc, r3, lsl #1]
  4028d0:	00050005 	.word	0x00050005
  4028d4:	00120012 	.word	0x00120012
  4028d8:	0117      	.short	0x0117
#if (!(SAMG51 || SAMG53 || SAMG54))
	case SAM_PM_SMODE_SLEEP_WFI:
	case SAM_PM_SMODE_SLEEP_WFE:
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAMS70 || SAME70)
		SCB->SCR &= (uint32_t)~SCR_SLEEPDEEP;
  4028da:	4a91      	ldr	r2, [pc, #580]	; (402b20 <pmc_sleep+0x25c>)
  4028dc:	6913      	ldr	r3, [r2, #16]
  4028de:	f023 0304 	bic.w	r3, r3, #4
  4028e2:	6113      	str	r3, [r2, #16]
		cpu_irq_enable();
  4028e4:	2201      	movs	r2, #1
  4028e6:	4b8f      	ldr	r3, [pc, #572]	; (402b24 <pmc_sleep+0x260>)
  4028e8:	701a      	strb	r2, [r3, #0]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  4028ea:	f3bf 8f5f 	dmb	sy
  4028ee:	b662      	cpsie	i
    Wait For Interrupt is a hint instruction that suspends execution
    until one of a number of events occurs.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __WFI(void)
{
  __ASM volatile ("wfi");
  4028f0:	bf30      	wfi
  4028f2:	4770      	bx	lr
static volatile bool b_is_sleep_clock_used = false;
/** Callback invoked once when clocks are restored */
static pmc_callback_wakeup_clocks_restored_t callback_clocks_restored = NULL;

void pmc_sleep(int sleep_mode)
{
  4028f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4028f8:	4604      	mov	r4, r0
#if defined(EFC1)
		uint32_t fmr1;
#endif
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAMS70 || SAME70)
		(sleep_mode == SAM_PM_SMODE_WAIT_FAST) ?
				pmc_set_flash_in_wait_mode(PMC_FSMR_FLPM_FLASH_STANDBY) :
  4028fa:	2803      	cmp	r0, #3
  4028fc:	bf0c      	ite	eq
  4028fe:	2000      	moveq	r0, #0
				pmc_set_flash_in_wait_mode(PMC_FSMR_FLPM_FLASH_DEEP_POWERDOWN);
  402900:	f44f 1000 	movne.w	r0, #2097152	; 0x200000
  402904:	4b88      	ldr	r3, [pc, #544]	; (402b28 <pmc_sleep+0x264>)
  402906:	4798      	blx	r3
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
  402908:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  40290a:	f3bf 8f5f 	dmb	sy
#endif
		cpu_irq_disable();
  40290e:	2200      	movs	r2, #0
  402910:	4b84      	ldr	r3, [pc, #528]	; (402b24 <pmc_sleep+0x260>)
  402912:	701a      	strb	r2, [r3, #0]
		b_is_sleep_clock_used = true;
  402914:	2201      	movs	r2, #1
  402916:	4b85      	ldr	r3, [pc, #532]	; (402b2c <pmc_sleep+0x268>)
  402918:	701a      	strb	r2, [r3, #0]
#if defined(EFC1)
		uint32_t *p_fmr_setting1,
#endif
		const bool disable_xtal)
{
	uint32_t mor  = PMC->CKGR_MOR;
  40291a:	4b85      	ldr	r3, [pc, #532]	; (402b30 <pmc_sleep+0x26c>)
  40291c:	f8d3 8020 	ldr.w	r8, [r3, #32]
	uint32_t mckr = PMC->PMC_MCKR;
  402920:	6b1d      	ldr	r5, [r3, #48]	; 0x30
	uint32_t fmr  = EFC0->EEFC_FMR;
  402922:	4a84      	ldr	r2, [pc, #528]	; (402b34 <pmc_sleep+0x270>)
  402924:	f8d2 9000 	ldr.w	r9, [r2]

	if (p_osc_setting) {
		*p_osc_setting = mor;
	}
	if (p_pll0_setting) {
		*p_pll0_setting = PMC->CKGR_PLLAR;
  402928:	6a9f      	ldr	r7, [r3, #40]	; 0x28
	}
	if (p_pll1_setting) {
#if (SAM3S || SAM4S || SAM4C || SAM4CM || SAM4CP)
		*p_pll1_setting = PMC->CKGR_PLLBR;
  40292a:	f8d3 a02c 	ldr.w	sl, [r3, #44]	; 0x2c
		*p_fmr_setting1 = fmr1;
	}
#endif

	/* Enable FAST RC */
	PMC->CKGR_MOR = CKGR_MOR_KEY_PASSWD | mor | CKGR_MOR_MOSCRCEN;
  40292e:	f448 125c 	orr.w	r2, r8, #3604480	; 0x370000
  402932:	f042 0208 	orr.w	r2, r2, #8
  402936:	621a      	str	r2, [r3, #32]
	/* if MCK source is PLL, switch to mainck */
	if ((mckr & PMC_MCKR_CSS_Msk) > PMC_MCKR_CSS_MAIN_CLK) {
  402938:	f005 0603 	and.w	r6, r5, #3
  40293c:	2e01      	cmp	r6, #1
  40293e:	d90a      	bls.n	402956 <pmc_sleep+0x92>
		/* MCK -> MAINCK */
		mckr = (mckr & (~PMC_MCKR_CSS_Msk)) | PMC_MCKR_CSS_MAIN_CLK;
  402940:	f025 0103 	bic.w	r1, r5, #3
  402944:	f041 0101 	orr.w	r1, r1, #1
		PMC->PMC_MCKR = mckr;
  402948:	6319      	str	r1, [r3, #48]	; 0x30
		while(!(PMC->PMC_SR & PMC_SR_MCKRDY));
  40294a:	461a      	mov	r2, r3
  40294c:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40294e:	f013 0f08 	tst.w	r3, #8
  402952:	d0fb      	beq.n	40294c <pmc_sleep+0x88>
  402954:	e000      	b.n	402958 <pmc_sleep+0x94>
		uint32_t *p_fmr_setting1,
#endif
		const bool disable_xtal)
{
	uint32_t mor  = PMC->CKGR_MOR;
	uint32_t mckr = PMC->PMC_MCKR;
  402956:	4629      	mov	r1, r5
		mckr = (mckr & (~PMC_MCKR_CSS_Msk)) | PMC_MCKR_CSS_MAIN_CLK;
		PMC->PMC_MCKR = mckr;
		while(!(PMC->PMC_SR & PMC_SR_MCKRDY));
	}
	/* MCK prescale -> 1 */
	if (mckr & PMC_MCKR_PRES_Msk) {
  402958:	f011 0f70 	tst.w	r1, #112	; 0x70
  40295c:	d008      	beq.n	402970 <pmc_sleep+0xac>
		mckr = (mckr & (~PMC_MCKR_PRES_Msk));
  40295e:	f021 0170 	bic.w	r1, r1, #112	; 0x70
		PMC->PMC_MCKR = mckr;
  402962:	4b73      	ldr	r3, [pc, #460]	; (402b30 <pmc_sleep+0x26c>)
  402964:	6319      	str	r1, [r3, #48]	; 0x30
		while(!(PMC->PMC_SR & PMC_SR_MCKRDY));
  402966:	461a      	mov	r2, r3
  402968:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40296a:	f013 0f08 	tst.w	r3, #8
  40296e:	d0fb      	beq.n	402968 <pmc_sleep+0xa4>
	}
	/* Disable PLLs */
	pmc_disable_pllack();
  402970:	4b71      	ldr	r3, [pc, #452]	; (402b38 <pmc_sleep+0x274>)
  402972:	4798      	blx	r3
#if (SAM3S || SAM4S || SAM4C || SAM4CM || SAM4CP)
	pmc_disable_pllbck();
  402974:	4b71      	ldr	r3, [pc, #452]	; (402b3c <pmc_sleep+0x278>)
  402976:	4798      	blx	r3
	pmc_disable_upll_clock();
#endif

	/* Prepare for entering WAIT mode */
	/* Wait fast RC ready */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  402978:	4a6d      	ldr	r2, [pc, #436]	; (402b30 <pmc_sleep+0x26c>)
  40297a:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40297c:	f413 3f00 	tst.w	r3, #131072	; 0x20000
  402980:	d0fb      	beq.n	40297a <pmc_sleep+0xb6>
	EFC0->EEFC_FMR = (fmr & (~EEFC_FMR_FWS_Msk)) | EEFC_FMR_FWS(1);

	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCSEL) | CKGR_MOR_MOSCRCF_24_MHz |
			CKGR_MOR_KEY_PASSWD;
#else
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCSEL) |
  402982:	4a6b      	ldr	r2, [pc, #428]	; (402b30 <pmc_sleep+0x26c>)
  402984:	6a13      	ldr	r3, [r2, #32]
  402986:	f023 739b 	bic.w	r3, r3, #20316160	; 0x1360000
  40298a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
  40298e:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  402992:	6213      	str	r3, [r2, #32]
			CKGR_MOR_KEY_PASSWD;
#endif
	while (!(PMC->PMC_SR & PMC_SR_MOSCSELS));
  402994:	6e93      	ldr	r3, [r2, #104]	; 0x68
  402996:	f413 3f80 	tst.w	r3, #65536	; 0x10000
  40299a:	d0fb      	beq.n	402994 <pmc_sleep+0xd0>

#if (!SAMG)
	/* FWS update */
	EFC0->EEFC_FMR = fmr & (~EEFC_FMR_FWS_Msk);
  40299c:	f429 6370 	bic.w	r3, r9, #3840	; 0xf00
  4029a0:	4a64      	ldr	r2, [pc, #400]	; (402b34 <pmc_sleep+0x270>)
  4029a2:	6013      	str	r3, [r2, #0]
	EFC1->EEFC_FMR = fmr1 & (~EEFC_FMR_FWS_Msk);
#endif
#endif

	/* Disable XTALs */
	if (disable_xtal) {
  4029a4:	2c04      	cmp	r4, #4
  4029a6:	d109      	bne.n	4029bc <pmc_sleep+0xf8>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  4029a8:	f5a2 62c0 	sub.w	r2, r2, #1536	; 0x600
  4029ac:	6a13      	ldr	r3, [r2, #32]
  4029ae:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
  4029b2:	f023 0301 	bic.w	r3, r3, #1
  4029b6:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  4029ba:	6213      	str	r3, [r2, #32]
				&fmr1,
#endif
				(sleep_mode == SAM_PM_SMODE_WAIT));

		/* Enter wait mode */
		cpu_irq_enable();
  4029bc:	4c59      	ldr	r4, [pc, #356]	; (402b24 <pmc_sleep+0x260>)
  4029be:	2301      	movs	r3, #1
  4029c0:	7023      	strb	r3, [r4, #0]
  4029c2:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
  4029c6:	b662      	cpsie	i

		pmc_enable_waitmode();
  4029c8:	4b5d      	ldr	r3, [pc, #372]	; (402b40 <pmc_sleep+0x27c>)
  4029ca:	4798      	blx	r3
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
  4029cc:	b672      	cpsid	i
  4029ce:	f3bf 8f5f 	dmb	sy

		cpu_irq_disable();
  4029d2:	2300      	movs	r3, #0
  4029d4:	7023      	strb	r3, [r4, #0]
{
	uint32_t mckr;
	uint32_t pll_sr = 0;

	/* Switch mainck to external xtal */
	if (CKGR_MOR_MOSCXTBY == (osc_setting & CKGR_MOR_MOSCXTBY)) {
  4029d6:	f018 0f02 	tst.w	r8, #2
  4029da:	d00f      	beq.n	4029fc <pmc_sleep+0x138>
		/* Bypass mode */
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  4029dc:	4a54      	ldr	r2, [pc, #336]	; (402b30 <pmc_sleep+0x26c>)
  4029de:	6a13      	ldr	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  4029e0:	4958      	ldr	r1, [pc, #352]	; (402b44 <pmc_sleep+0x280>)
  4029e2:	4019      	ands	r1, r3
  4029e4:	4b58      	ldr	r3, [pc, #352]	; (402b48 <pmc_sleep+0x284>)
  4029e6:	430b      	orrs	r3, r1
	uint32_t pll_sr = 0;

	/* Switch mainck to external xtal */
	if (CKGR_MOR_MOSCXTBY == (osc_setting & CKGR_MOR_MOSCXTBY)) {
		/* Bypass mode */
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  4029e8:	6213      	str	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCEN &
  4029ea:	6a13      	ldr	r3, [r2, #32]
					~CKGR_MOR_MOSCRCF_Msk)
				| CKGR_MOR_KEY_PASSWD;
  4029ec:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
  4029f0:	f023 0378 	bic.w	r3, r3, #120	; 0x78
  4029f4:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
	if (CKGR_MOR_MOSCXTBY == (osc_setting & CKGR_MOR_MOSCXTBY)) {
		/* Bypass mode */
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCEN &
  4029f8:	6213      	str	r3, [r2, #32]
  4029fa:	e02f      	b.n	402a5c <pmc_sleep+0x198>
					~CKGR_MOR_MOSCRCF_Msk)
				| CKGR_MOR_KEY_PASSWD;
	} else if (CKGR_MOR_MOSCXTEN == (osc_setting & CKGR_MOR_MOSCXTEN)) {
  4029fc:	f018 0f01 	tst.w	r8, #1
  402a00:	d02c      	beq.n	402a5c <pmc_sleep+0x198>
		/* Enable External XTAL */
		if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCXTEN)) {
  402a02:	4b4b      	ldr	r3, [pc, #300]	; (402b30 <pmc_sleep+0x26c>)
  402a04:	6a1b      	ldr	r3, [r3, #32]
  402a06:	f013 0f01 	tst.w	r3, #1
  402a0a:	d10e      	bne.n	402a2a <pmc_sleep+0x166>
			PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  402a0c:	4a48      	ldr	r2, [pc, #288]	; (402b30 <pmc_sleep+0x26c>)
  402a0e:	6a13      	ldr	r3, [r2, #32]
					CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN;
  402a10:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
  402a14:	f023 0303 	bic.w	r3, r3, #3
  402a18:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  402a1c:	f043 0301 	orr.w	r3, r3, #1
					~CKGR_MOR_MOSCRCF_Msk)
				| CKGR_MOR_KEY_PASSWD;
	} else if (CKGR_MOR_MOSCXTEN == (osc_setting & CKGR_MOR_MOSCXTEN)) {
		/* Enable External XTAL */
		if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCXTEN)) {
			PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  402a20:	6213      	str	r3, [r2, #32]
					CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN;
			/* Wait the Xtal to stabilize */
			while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  402a22:	6e93      	ldr	r3, [r2, #104]	; 0x68
  402a24:	f013 0f01 	tst.w	r3, #1
  402a28:	d0fb      	beq.n	402a22 <pmc_sleep+0x15e>
		}
		/* Select External XTAL */
		if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
  402a2a:	4b41      	ldr	r3, [pc, #260]	; (402b30 <pmc_sleep+0x26c>)
  402a2c:	6a1b      	ldr	r3, [r3, #32]
  402a2e:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  402a32:	d10a      	bne.n	402a4a <pmc_sleep+0x186>
			PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  402a34:	4a3e      	ldr	r2, [pc, #248]	; (402b30 <pmc_sleep+0x26c>)
  402a36:	6a13      	ldr	r3, [r2, #32]
  402a38:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
  402a3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  402a40:	6213      	str	r3, [r2, #32]
			while (!(PMC->PMC_SR & PMC_SR_MOSCSELS));
  402a42:	6e93      	ldr	r3, [r2, #104]	; 0x68
  402a44:	f413 3f80 	tst.w	r3, #65536	; 0x10000
  402a48:	d0fb      	beq.n	402a42 <pmc_sleep+0x17e>
		}
		/* Disable Fast RC */
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCEN &
  402a4a:	4a39      	ldr	r2, [pc, #228]	; (402b30 <pmc_sleep+0x26c>)
  402a4c:	6a13      	ldr	r3, [r2, #32]
						~CKGR_MOR_MOSCRCF_Msk)
					| CKGR_MOR_KEY_PASSWD;
  402a4e:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
  402a52:	f023 0378 	bic.w	r3, r3, #120	; 0x78
  402a56:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
		if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
			PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
			while (!(PMC->PMC_SR & PMC_SR_MOSCSELS));
		}
		/* Disable Fast RC */
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCEN &
  402a5a:	6213      	str	r3, [r2, #32]
						~CKGR_MOR_MOSCRCF_Msk)
					| CKGR_MOR_KEY_PASSWD;
	}

	if (pll0_setting & CKGR_PLLAR_MULA_Msk) {
  402a5c:	4b3b      	ldr	r3, [pc, #236]	; (402b4c <pmc_sleep+0x288>)
  402a5e:	403b      	ands	r3, r7
  402a60:	b12b      	cbz	r3, 402a6e <pmc_sleep+0x1aa>
#if (SAM4C || SAM4CM || SAMG || SAM4CP)
		PMC->CKGR_PLLAR = pll0_setting;
#else
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | pll0_setting;
  402a62:	f047 5700 	orr.w	r7, r7, #536870912	; 0x20000000
  402a66:	4b32      	ldr	r3, [pc, #200]	; (402b30 <pmc_sleep+0x26c>)
  402a68:	629f      	str	r7, [r3, #40]	; 0x28
#endif
		pll_sr |= PMC_SR_LOCKA;
  402a6a:	2202      	movs	r2, #2
  402a6c:	e000      	b.n	402a70 <pmc_sleep+0x1ac>
		, const uint32_t fmr_setting1
#endif
		)
{
	uint32_t mckr;
	uint32_t pll_sr = 0;
  402a6e:	2200      	movs	r2, #0
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | pll0_setting;
#endif
		pll_sr |= PMC_SR_LOCKA;
	}
#if (SAM3S || SAM4S || SAM4C || SAM4CM || SAM4CP)
	if (pll1_setting & CKGR_PLLBR_MULB_Msk) {
  402a70:	4b36      	ldr	r3, [pc, #216]	; (402b4c <pmc_sleep+0x288>)
  402a72:	ea0a 0303 	and.w	r3, sl, r3
  402a76:	b123      	cbz	r3, 402a82 <pmc_sleep+0x1be>
		PMC->CKGR_PLLBR = pll1_setting;
  402a78:	4b2d      	ldr	r3, [pc, #180]	; (402b30 <pmc_sleep+0x26c>)
  402a7a:	f8c3 a02c 	str.w	sl, [r3, #44]	; 0x2c
		pll_sr |= PMC_SR_LOCKB;
  402a7e:	f042 0204 	orr.w	r2, r2, #4
	}
#else
	UNUSED(pll1_setting);
#endif
	/* Wait MCK source ready */
	switch(mck_setting & PMC_MCKR_CSS_Msk) {
  402a82:	2e02      	cmp	r6, #2
  402a84:	d002      	beq.n	402a8c <pmc_sleep+0x1c8>
  402a86:	2e03      	cmp	r6, #3
  402a88:	d006      	beq.n	402a98 <pmc_sleep+0x1d4>
  402a8a:	e00a      	b.n	402aa2 <pmc_sleep+0x1de>
	case PMC_MCKR_CSS_PLLA_CLK:
		while (!(PMC->PMC_SR & PMC_SR_LOCKA));
  402a8c:	4928      	ldr	r1, [pc, #160]	; (402b30 <pmc_sleep+0x26c>)
  402a8e:	6e8b      	ldr	r3, [r1, #104]	; 0x68
  402a90:	f013 0f02 	tst.w	r3, #2
  402a94:	d0fb      	beq.n	402a8e <pmc_sleep+0x1ca>
  402a96:	e004      	b.n	402aa2 <pmc_sleep+0x1de>
		break;
#if (SAM3S || SAM4S || SAM4C || SAM4CM || SAM4CP)
	case PMC_MCKR_CSS_PLLB_CLK:
		while (!(PMC->PMC_SR & PMC_SR_LOCKB));
  402a98:	4925      	ldr	r1, [pc, #148]	; (402b30 <pmc_sleep+0x26c>)
  402a9a:	6e8b      	ldr	r3, [r1, #104]	; 0x68
  402a9c:	f013 0f04 	tst.w	r3, #4
  402aa0:	d0fb      	beq.n	402a9a <pmc_sleep+0x1d6>
		break;
#endif
	}

	/* Switch to faster clock */
	mckr = PMC->PMC_MCKR;
  402aa2:	4823      	ldr	r0, [pc, #140]	; (402b30 <pmc_sleep+0x26c>)
  402aa4:	6b01      	ldr	r1, [r0, #48]	; 0x30

	/* Set PRES */
	PMC->PMC_MCKR = (mckr & ~PMC_MCKR_PRES_Msk)
		| (mck_setting & PMC_MCKR_PRES_Msk);
  402aa6:	f005 0370 	and.w	r3, r5, #112	; 0x70

	/* Switch to faster clock */
	mckr = PMC->PMC_MCKR;

	/* Set PRES */
	PMC->PMC_MCKR = (mckr & ~PMC_MCKR_PRES_Msk)
  402aaa:	f021 0170 	bic.w	r1, r1, #112	; 0x70
		| (mck_setting & PMC_MCKR_PRES_Msk);
  402aae:	430b      	orrs	r3, r1

	/* Switch to faster clock */
	mckr = PMC->PMC_MCKR;

	/* Set PRES */
	PMC->PMC_MCKR = (mckr & ~PMC_MCKR_PRES_Msk)
  402ab0:	6303      	str	r3, [r0, #48]	; 0x30
		| (mck_setting & PMC_MCKR_PRES_Msk);
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  402ab2:	4601      	mov	r1, r0
  402ab4:	6e8b      	ldr	r3, [r1, #104]	; 0x68
  402ab6:	f013 0f08 	tst.w	r3, #8
  402aba:	d0fb      	beq.n	402ab4 <pmc_sleep+0x1f0>

	/* Restore flash wait states */
	EFC0->EEFC_FMR = fmr_setting;
  402abc:	4b1d      	ldr	r3, [pc, #116]	; (402b34 <pmc_sleep+0x270>)
  402abe:	f8c3 9000 	str.w	r9, [r3]
#if defined(EFC1)
	EFC1->EEFC_FMR = fmr_setting1;
#endif

	/* Set CSS and others */
	PMC->PMC_MCKR = mck_setting;
  402ac2:	f5a3 63c0 	sub.w	r3, r3, #1536	; 0x600
  402ac6:	631d      	str	r5, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  402ac8:	4619      	mov	r1, r3
  402aca:	6e8b      	ldr	r3, [r1, #104]	; 0x68
  402acc:	f013 0f08 	tst.w	r3, #8
  402ad0:	d0fb      	beq.n	402aca <pmc_sleep+0x206>

	/* Waiting all restored PLLs ready */
	while (!(PMC->PMC_SR & pll_sr));
  402ad2:	4917      	ldr	r1, [pc, #92]	; (402b30 <pmc_sleep+0x26c>)
  402ad4:	6e8b      	ldr	r3, [r1, #104]	; 0x68
  402ad6:	421a      	tst	r2, r3
  402ad8:	d0fc      	beq.n	402ad4 <pmc_sleep+0x210>

#if (SAM4C || SAM4CM || SAM4CP)
		/* Restore the sub-system 1 */
		PMC->PMC_SCER = cpclk_backup | PMC_SCER_CPKEY_PASSWD;
#endif
		b_is_sleep_clock_used = false;
  402ada:	2200      	movs	r2, #0
  402adc:	4b13      	ldr	r3, [pc, #76]	; (402b2c <pmc_sleep+0x268>)
  402ade:	701a      	strb	r2, [r3, #0]
		if (callback_clocks_restored) {
  402ae0:	4b1b      	ldr	r3, [pc, #108]	; (402b50 <pmc_sleep+0x28c>)
  402ae2:	681b      	ldr	r3, [r3, #0]
  402ae4:	b11b      	cbz	r3, 402aee <pmc_sleep+0x22a>
			callback_clocks_restored();
  402ae6:	4798      	blx	r3
			callback_clocks_restored = NULL;
  402ae8:	2200      	movs	r2, #0
  402aea:	4b19      	ldr	r3, [pc, #100]	; (402b50 <pmc_sleep+0x28c>)
  402aec:	601a      	str	r2, [r3, #0]
		}
		cpu_irq_enable();
  402aee:	2201      	movs	r2, #1
  402af0:	4b0c      	ldr	r3, [pc, #48]	; (402b24 <pmc_sleep+0x260>)
  402af2:	701a      	strb	r2, [r3, #0]
  402af4:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
  402af8:	b662      	cpsie	i
  402afa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

		break;
	}
#if (!(SAMG51 || SAMG53 || SAMG54))
	case SAM_PM_SMODE_BACKUP:
		SCB->SCR |= SCR_SLEEPDEEP;
  402afe:	4a08      	ldr	r2, [pc, #32]	; (402b20 <pmc_sleep+0x25c>)
  402b00:	6913      	ldr	r3, [r2, #16]
  402b02:	f043 0304 	orr.w	r3, r3, #4
  402b06:	6113      	str	r3, [r2, #16]
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAMS70 || SAME70)
		SUPC->SUPC_CR = SUPC_CR_KEY_PASSWD | SUPC_CR_VROFF_STOP_VREG;
  402b08:	4a12      	ldr	r2, [pc, #72]	; (402b54 <pmc_sleep+0x290>)
  402b0a:	4b13      	ldr	r3, [pc, #76]	; (402b58 <pmc_sleep+0x294>)
  402b0c:	601a      	str	r2, [r3, #0]
		cpu_irq_enable();
  402b0e:	2201      	movs	r2, #1
  402b10:	4b04      	ldr	r3, [pc, #16]	; (402b24 <pmc_sleep+0x260>)
  402b12:	701a      	strb	r2, [r3, #0]
  402b14:	f3bf 8f5f 	dmb	sy
  402b18:	b662      	cpsie	i
    Wait For Interrupt is a hint instruction that suspends execution
    until one of a number of events occurs.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __WFI(void)
{
  __ASM volatile ("wfi");
  402b1a:	bf30      	wfi
  402b1c:	4770      	bx	lr
  402b1e:	4770      	bx	lr
  402b20:	e000ed00 	.word	0xe000ed00
  402b24:	200000ac 	.word	0x200000ac
  402b28:	00402869 	.word	0x00402869
  402b2c:	20000a2c 	.word	0x20000a2c
  402b30:	400e0400 	.word	0x400e0400
  402b34:	400e0a00 	.word	0x400e0a00
  402b38:	00402751 	.word	0x00402751
  402b3c:	00402771 	.word	0x00402771
  402b40:	00402875 	.word	0x00402875
  402b44:	fec8fffc 	.word	0xfec8fffc
  402b48:	01370002 	.word	0x01370002
  402b4c:	07ff0000 	.word	0x07ff0000
  402b50:	20000a28 	.word	0x20000a28
  402b54:	a5000004 	.word	0xa5000004
  402b58:	400e1410 	.word	0x400e1410

00402b5c <pmc_is_wakeup_clocks_restored>:
	}
}

bool pmc_is_wakeup_clocks_restored(void)
{
	return !b_is_sleep_clock_used;
  402b5c:	4b02      	ldr	r3, [pc, #8]	; (402b68 <pmc_is_wakeup_clocks_restored+0xc>)
  402b5e:	7818      	ldrb	r0, [r3, #0]
}
  402b60:	f080 0001 	eor.w	r0, r0, #1
  402b64:	4770      	bx	lr
  402b66:	bf00      	nop
  402b68:	20000a2c 	.word	0x20000a2c

00402b6c <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
  402b6c:	4b0b      	ldr	r3, [pc, #44]	; (402b9c <cpu_irq_enter_critical+0x30>)
  402b6e:	681b      	ldr	r3, [r3, #0]
  402b70:	b97b      	cbnz	r3, 402b92 <cpu_irq_enter_critical+0x26>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  402b72:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
  402b76:	b94b      	cbnz	r3, 402b8c <cpu_irq_enter_critical+0x20>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
  402b78:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  402b7a:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
  402b7e:	2200      	movs	r2, #0
  402b80:	4b07      	ldr	r3, [pc, #28]	; (402ba0 <cpu_irq_enter_critical+0x34>)
  402b82:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
  402b84:	2201      	movs	r2, #1
  402b86:	4b07      	ldr	r3, [pc, #28]	; (402ba4 <cpu_irq_enter_critical+0x38>)
  402b88:	701a      	strb	r2, [r3, #0]
  402b8a:	e002      	b.n	402b92 <cpu_irq_enter_critical+0x26>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
  402b8c:	2200      	movs	r2, #0
  402b8e:	4b05      	ldr	r3, [pc, #20]	; (402ba4 <cpu_irq_enter_critical+0x38>)
  402b90:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
  402b92:	4a02      	ldr	r2, [pc, #8]	; (402b9c <cpu_irq_enter_critical+0x30>)
  402b94:	6813      	ldr	r3, [r2, #0]
  402b96:	3301      	adds	r3, #1
  402b98:	6013      	str	r3, [r2, #0]
  402b9a:	4770      	bx	lr
  402b9c:	20000a30 	.word	0x20000a30
  402ba0:	200000ac 	.word	0x200000ac
  402ba4:	20000a34 	.word	0x20000a34

00402ba8 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
  402ba8:	4b08      	ldr	r3, [pc, #32]	; (402bcc <cpu_irq_leave_critical+0x24>)
  402baa:	681a      	ldr	r2, [r3, #0]
  402bac:	3a01      	subs	r2, #1
  402bae:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
  402bb0:	681b      	ldr	r3, [r3, #0]
  402bb2:	b953      	cbnz	r3, 402bca <cpu_irq_leave_critical+0x22>
  402bb4:	4b06      	ldr	r3, [pc, #24]	; (402bd0 <cpu_irq_leave_critical+0x28>)
  402bb6:	781b      	ldrb	r3, [r3, #0]
  402bb8:	f013 0fff 	tst.w	r3, #255	; 0xff
  402bbc:	d005      	beq.n	402bca <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
  402bbe:	2201      	movs	r2, #1
  402bc0:	4b04      	ldr	r3, [pc, #16]	; (402bd4 <cpu_irq_leave_critical+0x2c>)
  402bc2:	701a      	strb	r2, [r3, #0]
  402bc4:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
  402bc8:	b662      	cpsie	i
  402bca:	4770      	bx	lr
  402bcc:	20000a30 	.word	0x20000a30
  402bd0:	20000a34 	.word	0x20000a34
  402bd4:	200000ac 	.word	0x200000ac

00402bd8 <Dummy_Handler>:
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
	while (1) {
	}
  402bd8:	e7fe      	b.n	402bd8 <Dummy_Handler>
  402bda:	bf00      	nop

00402bdc <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  402bdc:	b508      	push	{r3, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc > pDest) {
  402bde:	4b20      	ldr	r3, [pc, #128]	; (402c60 <Reset_Handler+0x84>)
  402be0:	4a20      	ldr	r2, [pc, #128]	; (402c64 <Reset_Handler+0x88>)
  402be2:	429a      	cmp	r2, r3
  402be4:	d913      	bls.n	402c0e <Reset_Handler+0x32>
		for (; pDest < &_erelocate;) {
  402be6:	4b20      	ldr	r3, [pc, #128]	; (402c68 <Reset_Handler+0x8c>)
  402be8:	4a1d      	ldr	r2, [pc, #116]	; (402c60 <Reset_Handler+0x84>)
  402bea:	429a      	cmp	r2, r3
  402bec:	d21f      	bcs.n	402c2e <Reset_Handler+0x52>
  402bee:	4611      	mov	r1, r2
  402bf0:	3204      	adds	r2, #4
  402bf2:	3303      	adds	r3, #3
  402bf4:	1a9b      	subs	r3, r3, r2
  402bf6:	f023 0303 	bic.w	r3, r3, #3
  402bfa:	3304      	adds	r3, #4
  402bfc:	4a19      	ldr	r2, [pc, #100]	; (402c64 <Reset_Handler+0x88>)
  402bfe:	4413      	add	r3, r2
			*pDest++ = *pSrc++;
  402c00:	f852 0b04 	ldr.w	r0, [r2], #4
  402c04:	f841 0b04 	str.w	r0, [r1], #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc > pDest) {
		for (; pDest < &_erelocate;) {
  402c08:	429a      	cmp	r2, r3
  402c0a:	d1f9      	bne.n	402c00 <Reset_Handler+0x24>
  402c0c:	e00f      	b.n	402c2e <Reset_Handler+0x52>
			*pDest++ = *pSrc++;
		}
	} else if (pSrc < pDest) {
  402c0e:	4b14      	ldr	r3, [pc, #80]	; (402c60 <Reset_Handler+0x84>)
  402c10:	4a14      	ldr	r2, [pc, #80]	; (402c64 <Reset_Handler+0x88>)
  402c12:	429a      	cmp	r2, r3
  402c14:	d20b      	bcs.n	402c2e <Reset_Handler+0x52>
		uint32_t nb_bytes = (uint32_t)&_erelocate - (uint32_t)&_srelocate;
  402c16:	4b14      	ldr	r3, [pc, #80]	; (402c68 <Reset_Handler+0x8c>)
  402c18:	4a11      	ldr	r2, [pc, #68]	; (402c60 <Reset_Handler+0x84>)
  402c1a:	1a9a      	subs	r2, r3, r2
  402c1c:	4813      	ldr	r0, [pc, #76]	; (402c6c <Reset_Handler+0x90>)
		pSrc = (uint32_t*)((uint32_t)pSrc + nb_bytes) - 1;
  402c1e:	1881      	adds	r1, r0, r2
		pDest = (uint32_t*)((uint32_t)pDest + nb_bytes) - 1;
		for (;nb_bytes;nb_bytes -= 4) {
  402c20:	b12a      	cbz	r2, 402c2e <Reset_Handler+0x52>
			*pDest-- = *pSrc--;
  402c22:	f851 2904 	ldr.w	r2, [r1], #-4
  402c26:	f843 2d04 	str.w	r2, [r3, #-4]!
		}
	} else if (pSrc < pDest) {
		uint32_t nb_bytes = (uint32_t)&_erelocate - (uint32_t)&_srelocate;
		pSrc = (uint32_t*)((uint32_t)pSrc + nb_bytes) - 1;
		pDest = (uint32_t*)((uint32_t)pDest + nb_bytes) - 1;
		for (;nb_bytes;nb_bytes -= 4) {
  402c2a:	4281      	cmp	r1, r0
  402c2c:	d1f9      	bne.n	402c22 <Reset_Handler+0x46>

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
  402c2e:	bf00      	nop
		}
	}
	__NOP();

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  402c30:	4b0f      	ldr	r3, [pc, #60]	; (402c70 <Reset_Handler+0x94>)
  402c32:	4a10      	ldr	r2, [pc, #64]	; (402c74 <Reset_Handler+0x98>)
  402c34:	429a      	cmp	r2, r3
  402c36:	d20b      	bcs.n	402c50 <Reset_Handler+0x74>
  402c38:	1d13      	adds	r3, r2, #4
  402c3a:	4a0f      	ldr	r2, [pc, #60]	; (402c78 <Reset_Handler+0x9c>)
  402c3c:	1ad2      	subs	r2, r2, r3
  402c3e:	f022 0203 	bic.w	r2, r2, #3
  402c42:	441a      	add	r2, r3
  402c44:	3b04      	subs	r3, #4
		*pDest++ = 0;
  402c46:	2100      	movs	r1, #0
  402c48:	f843 1b04 	str.w	r1, [r3], #4
		}
	}
	__NOP();

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  402c4c:	4293      	cmp	r3, r2
  402c4e:	d1fb      	bne.n	402c48 <Reset_Handler+0x6c>
		*pDest++ = 0;
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc);
  402c50:	4b0a      	ldr	r3, [pc, #40]	; (402c7c <Reset_Handler+0xa0>)
  402c52:	4a0b      	ldr	r2, [pc, #44]	; (402c80 <Reset_Handler+0xa4>)
  402c54:	609a      	str	r2, [r3, #8]

	/* Initialize the C library */
	__libc_init_array();
  402c56:	4b0b      	ldr	r3, [pc, #44]	; (402c84 <Reset_Handler+0xa8>)
  402c58:	4798      	blx	r3

	/* Branch to main function */
	main();
  402c5a:	4b0b      	ldr	r3, [pc, #44]	; (402c88 <Reset_Handler+0xac>)
  402c5c:	4798      	blx	r3

	/* Infinite loop */
	while (1);
  402c5e:	e7fe      	b.n	402c5e <Reset_Handler+0x82>
  402c60:	20000000 	.word	0x20000000
  402c64:	00403edc 	.word	0x00403edc
  402c68:	200008fc 	.word	0x200008fc
  402c6c:	00403ed8 	.word	0x00403ed8
  402c70:	20000ab0 	.word	0x20000ab0
  402c74:	200008fc 	.word	0x200008fc
  402c78:	20000ab3 	.word	0x20000ab3
  402c7c:	e000ed00 	.word	0xe000ed00
  402c80:	00400000 	.word	0x00400000
  402c84:	004035bd 	.word	0x004035bd
  402c88:	00403489 	.word	0x00403489

00402c8c <SystemCoreClockUpdate>:
 * \brief Get Core Clock Frequency.
 */
void SystemCoreClockUpdate( void )
{
	/* Determine clock frequency according to clock register values */
	switch ( PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk ) {
  402c8c:	4b3d      	ldr	r3, [pc, #244]	; (402d84 <SystemCoreClockUpdate+0xf8>)
  402c8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402c90:	f003 0303 	and.w	r3, r3, #3
  402c94:	2b03      	cmp	r3, #3
  402c96:	d85d      	bhi.n	402d54 <SystemCoreClockUpdate+0xc8>
  402c98:	e8df f003 	tbb	[pc, r3]
  402c9c:	2b2b0e02 	.word	0x2b2b0e02
	case PMC_MCKR_CSS_SLOW_CLK: /* Slow clock */
			if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL ) {
  402ca0:	4b39      	ldr	r3, [pc, #228]	; (402d88 <SystemCoreClockUpdate+0xfc>)
  402ca2:	695b      	ldr	r3, [r3, #20]
  402ca4:	f013 0f80 	tst.w	r3, #128	; 0x80
				SystemCoreClock = CHIP_FREQ_XTAL_32K;
  402ca8:	bf14      	ite	ne
  402caa:	f44f 4200 	movne.w	r2, #32768	; 0x8000
			} else {
				SystemCoreClock = CHIP_FREQ_SLCK_RC;
  402cae:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  402cb2:	4b36      	ldr	r3, [pc, #216]	; (402d8c <SystemCoreClockUpdate+0x100>)
  402cb4:	601a      	str	r2, [r3, #0]
  402cb6:	e04d      	b.n	402d54 <SystemCoreClockUpdate+0xc8>
			}
		break;
		
	case PMC_MCKR_CSS_MAIN_CLK: /* Main clock */
		if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  402cb8:	4b32      	ldr	r3, [pc, #200]	; (402d84 <SystemCoreClockUpdate+0xf8>)
  402cba:	6a1b      	ldr	r3, [r3, #32]
  402cbc:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  402cc0:	d003      	beq.n	402cca <SystemCoreClockUpdate+0x3e>
			SystemCoreClock = CHIP_FREQ_XTAL;
  402cc2:	4a33      	ldr	r2, [pc, #204]	; (402d90 <SystemCoreClockUpdate+0x104>)
  402cc4:	4b31      	ldr	r3, [pc, #196]	; (402d8c <SystemCoreClockUpdate+0x100>)
  402cc6:	601a      	str	r2, [r3, #0]
  402cc8:	e044      	b.n	402d54 <SystemCoreClockUpdate+0xc8>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  402cca:	4a32      	ldr	r2, [pc, #200]	; (402d94 <SystemCoreClockUpdate+0x108>)
  402ccc:	4b2f      	ldr	r3, [pc, #188]	; (402d8c <SystemCoreClockUpdate+0x100>)
  402cce:	601a      	str	r2, [r3, #0]
			
			switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  402cd0:	4b2c      	ldr	r3, [pc, #176]	; (402d84 <SystemCoreClockUpdate+0xf8>)
  402cd2:	6a1b      	ldr	r3, [r3, #32]
  402cd4:	f003 0370 	and.w	r3, r3, #112	; 0x70
  402cd8:	2b10      	cmp	r3, #16
  402cda:	d002      	beq.n	402ce2 <SystemCoreClockUpdate+0x56>
  402cdc:	2b20      	cmp	r3, #32
  402cde:	d004      	beq.n	402cea <SystemCoreClockUpdate+0x5e>
  402ce0:	e038      	b.n	402d54 <SystemCoreClockUpdate+0xc8>
			case CKGR_MOR_MOSCRCF_4_MHz:
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
			break;
			
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
  402ce2:	4a2d      	ldr	r2, [pc, #180]	; (402d98 <SystemCoreClockUpdate+0x10c>)
  402ce4:	4b29      	ldr	r3, [pc, #164]	; (402d8c <SystemCoreClockUpdate+0x100>)
  402ce6:	601a      	str	r2, [r3, #0]
			break;
  402ce8:	e034      	b.n	402d54 <SystemCoreClockUpdate+0xc8>
			
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
  402cea:	4a29      	ldr	r2, [pc, #164]	; (402d90 <SystemCoreClockUpdate+0x104>)
  402cec:	4b27      	ldr	r3, [pc, #156]	; (402d8c <SystemCoreClockUpdate+0x100>)
  402cee:	601a      	str	r2, [r3, #0]
			break;
  402cf0:	e030      	b.n	402d54 <SystemCoreClockUpdate+0xc8>
		}
		break;
		
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_PLLB_CLK:	/* PLLB clock */
			if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  402cf2:	4b24      	ldr	r3, [pc, #144]	; (402d84 <SystemCoreClockUpdate+0xf8>)
  402cf4:	6a1b      	ldr	r3, [r3, #32]
  402cf6:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  402cfa:	d003      	beq.n	402d04 <SystemCoreClockUpdate+0x78>
				SystemCoreClock = CHIP_FREQ_XTAL;
  402cfc:	4a24      	ldr	r2, [pc, #144]	; (402d90 <SystemCoreClockUpdate+0x104>)
  402cfe:	4b23      	ldr	r3, [pc, #140]	; (402d8c <SystemCoreClockUpdate+0x100>)
  402d00:	601a      	str	r2, [r3, #0]
  402d02:	e012      	b.n	402d2a <SystemCoreClockUpdate+0x9e>
			} else {
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  402d04:	4a23      	ldr	r2, [pc, #140]	; (402d94 <SystemCoreClockUpdate+0x108>)
  402d06:	4b21      	ldr	r3, [pc, #132]	; (402d8c <SystemCoreClockUpdate+0x100>)
  402d08:	601a      	str	r2, [r3, #0]
				
				switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  402d0a:	4b1e      	ldr	r3, [pc, #120]	; (402d84 <SystemCoreClockUpdate+0xf8>)
  402d0c:	6a1b      	ldr	r3, [r3, #32]
  402d0e:	f003 0370 	and.w	r3, r3, #112	; 0x70
  402d12:	2b10      	cmp	r3, #16
  402d14:	d002      	beq.n	402d1c <SystemCoreClockUpdate+0x90>
  402d16:	2b20      	cmp	r3, #32
  402d18:	d004      	beq.n	402d24 <SystemCoreClockUpdate+0x98>
  402d1a:	e006      	b.n	402d2a <SystemCoreClockUpdate+0x9e>
				case CKGR_MOR_MOSCRCF_4_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
					break;
				
				case CKGR_MOR_MOSCRCF_8_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
  402d1c:	4a1e      	ldr	r2, [pc, #120]	; (402d98 <SystemCoreClockUpdate+0x10c>)
  402d1e:	4b1b      	ldr	r3, [pc, #108]	; (402d8c <SystemCoreClockUpdate+0x100>)
  402d20:	601a      	str	r2, [r3, #0]
					break;
  402d22:	e002      	b.n	402d2a <SystemCoreClockUpdate+0x9e>
				
				case CKGR_MOR_MOSCRCF_12_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
  402d24:	4a1a      	ldr	r2, [pc, #104]	; (402d90 <SystemCoreClockUpdate+0x104>)
  402d26:	4b19      	ldr	r3, [pc, #100]	; (402d8c <SystemCoreClockUpdate+0x100>)
  402d28:	601a      	str	r2, [r3, #0]
				default:
					break;
				}
			}
			
			if ( (uint32_t)(PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) ==
  402d2a:	4b16      	ldr	r3, [pc, #88]	; (402d84 <SystemCoreClockUpdate+0xf8>)
  402d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402d2e:	f003 0303 	and.w	r3, r3, #3
  402d32:	2b02      	cmp	r3, #2
					PMC_MCKR_CSS_PLLA_CLK ) {
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
  402d34:	4a13      	ldr	r2, [pc, #76]	; (402d84 <SystemCoreClockUpdate+0xf8>)
  402d36:	bf07      	ittee	eq
  402d38:	6a93      	ldreq	r3, [r2, #40]	; 0x28
						>> CKGR_PLLAR_MULA_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
  402d3a:	6a92      	ldreq	r2, [r2, #40]	; 0x28
						>> CKGR_PLLAR_DIVA_Pos));
			} else {
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
  402d3c:	6ad3      	ldrne	r3, [r2, #44]	; 0x2c
						>> CKGR_PLLBR_MULB_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
  402d3e:	6ad2      	ldrne	r2, [r2, #44]	; 0x2c
  402d40:	4812      	ldr	r0, [pc, #72]	; (402d8c <SystemCoreClockUpdate+0x100>)
						>> CKGR_PLLAR_MULA_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
						>> CKGR_PLLAR_DIVA_Pos));
			} else {
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
						>> CKGR_PLLBR_MULB_Pos) + 1U);
  402d42:	f3c3 410a 	ubfx	r1, r3, #16, #11
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
						>> CKGR_PLLAR_MULA_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
						>> CKGR_PLLAR_DIVA_Pos));
			} else {
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
  402d46:	6803      	ldr	r3, [r0, #0]
  402d48:	fb01 3303 	mla	r3, r1, r3, r3
						>> CKGR_PLLBR_MULB_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
						>> CKGR_PLLBR_DIVB_Pos));
  402d4c:	b2d2      	uxtb	r2, r2
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
						>> CKGR_PLLAR_DIVA_Pos));
			} else {
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
						>> CKGR_PLLBR_MULB_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
  402d4e:	fbb3 f3f2 	udiv	r3, r3, r2
  402d52:	6003      	str	r3, [r0, #0]
		
	default:
		break;
	}

	if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 ) {
  402d54:	4b0b      	ldr	r3, [pc, #44]	; (402d84 <SystemCoreClockUpdate+0xf8>)
  402d56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402d58:	f003 0370 	and.w	r3, r3, #112	; 0x70
  402d5c:	2b70      	cmp	r3, #112	; 0x70
  402d5e:	d107      	bne.n	402d70 <SystemCoreClockUpdate+0xe4>
		SystemCoreClock /= 3U;
  402d60:	4a0a      	ldr	r2, [pc, #40]	; (402d8c <SystemCoreClockUpdate+0x100>)
  402d62:	6813      	ldr	r3, [r2, #0]
  402d64:	490d      	ldr	r1, [pc, #52]	; (402d9c <SystemCoreClockUpdate+0x110>)
  402d66:	fba1 1303 	umull	r1, r3, r1, r3
  402d6a:	085b      	lsrs	r3, r3, #1
  402d6c:	6013      	str	r3, [r2, #0]
  402d6e:	4770      	bx	lr
	} else {
		SystemCoreClock >>=
			((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  402d70:	4b04      	ldr	r3, [pc, #16]	; (402d84 <SystemCoreClockUpdate+0xf8>)
  402d72:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	}

	if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 ) {
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>=
  402d74:	4905      	ldr	r1, [pc, #20]	; (402d8c <SystemCoreClockUpdate+0x100>)
			((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  402d76:	f3c2 1202 	ubfx	r2, r2, #4, #3
	}

	if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 ) {
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>=
  402d7a:	680b      	ldr	r3, [r1, #0]
  402d7c:	40d3      	lsrs	r3, r2
  402d7e:	600b      	str	r3, [r1, #0]
  402d80:	4770      	bx	lr
  402d82:	bf00      	nop
  402d84:	400e0400 	.word	0x400e0400
  402d88:	400e1410 	.word	0x400e1410
  402d8c:	200000b0 	.word	0x200000b0
  402d90:	00b71b00 	.word	0x00b71b00
  402d94:	003d0900 	.word	0x003d0900
  402d98:	007a1200 	.word	0x007a1200
  402d9c:	aaaaaaab 	.word	0xaaaaaaab

00402da0 <system_init_flash>:
 */
void system_init_flash( uint32_t ul_clk )
{
  /* Set FWS for embedded Flash access according to operating frequency */
#if !defined(ID_EFC1)
	if ( ul_clk < CHIP_FREQ_FWS_0 ) {
  402da0:	4b12      	ldr	r3, [pc, #72]	; (402dec <system_init_flash+0x4c>)
  402da2:	4298      	cmp	r0, r3
  402da4:	d804      	bhi.n	402db0 <system_init_flash+0x10>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  402da6:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  402daa:	4b11      	ldr	r3, [pc, #68]	; (402df0 <system_init_flash+0x50>)
  402dac:	601a      	str	r2, [r3, #0]
  402dae:	4770      	bx	lr
	} else {
		if ( ul_clk < CHIP_FREQ_FWS_1 ) {
  402db0:	4b10      	ldr	r3, [pc, #64]	; (402df4 <system_init_flash+0x54>)
  402db2:	4298      	cmp	r0, r3
  402db4:	d803      	bhi.n	402dbe <system_init_flash+0x1e>
			EFC0->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  402db6:	4a10      	ldr	r2, [pc, #64]	; (402df8 <system_init_flash+0x58>)
  402db8:	4b0d      	ldr	r3, [pc, #52]	; (402df0 <system_init_flash+0x50>)
  402dba:	601a      	str	r2, [r3, #0]
  402dbc:	4770      	bx	lr
		} else {
			if ( ul_clk < CHIP_FREQ_FWS_2 ) {
  402dbe:	4b0f      	ldr	r3, [pc, #60]	; (402dfc <system_init_flash+0x5c>)
  402dc0:	4298      	cmp	r0, r3
  402dc2:	d803      	bhi.n	402dcc <system_init_flash+0x2c>
				EFC0->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  402dc4:	4a0e      	ldr	r2, [pc, #56]	; (402e00 <system_init_flash+0x60>)
  402dc6:	4b0a      	ldr	r3, [pc, #40]	; (402df0 <system_init_flash+0x50>)
  402dc8:	601a      	str	r2, [r3, #0]
  402dca:	4770      	bx	lr
			} else {
				if ( ul_clk < CHIP_FREQ_FWS_3 ) {
  402dcc:	4b0d      	ldr	r3, [pc, #52]	; (402e04 <system_init_flash+0x64>)
  402dce:	4298      	cmp	r0, r3
  402dd0:	d803      	bhi.n	402dda <system_init_flash+0x3a>
					EFC0->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  402dd2:	4a0d      	ldr	r2, [pc, #52]	; (402e08 <system_init_flash+0x68>)
  402dd4:	4b06      	ldr	r3, [pc, #24]	; (402df0 <system_init_flash+0x50>)
  402dd6:	601a      	str	r2, [r3, #0]
  402dd8:	4770      	bx	lr
				} else {
					if ( ul_clk < CHIP_FREQ_FWS_4 ) {
  402dda:	4b0c      	ldr	r3, [pc, #48]	; (402e0c <system_init_flash+0x6c>)
  402ddc:	4298      	cmp	r0, r3
					EFC0->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  402dde:	bf94      	ite	ls
  402de0:	f04f 2204 	movls.w	r2, #67109888	; 0x4000400
					} else {
					EFC0->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  402de4:	4a0a      	ldrhi	r2, [pc, #40]	; (402e10 <system_init_flash+0x70>)
  402de6:	4b02      	ldr	r3, [pc, #8]	; (402df0 <system_init_flash+0x50>)
  402de8:	601a      	str	r2, [r3, #0]
  402dea:	4770      	bx	lr
  402dec:	01ba813f 	.word	0x01ba813f
  402df0:	400e0a00 	.word	0x400e0a00
  402df4:	0375027f 	.word	0x0375027f
  402df8:	04000100 	.word	0x04000100
  402dfc:	053ec5ff 	.word	0x053ec5ff
  402e00:	04000200 	.word	0x04000200
  402e04:	00a4cb7f 	.word	0x00a4cb7f
  402e08:	04000300 	.word	0x04000300
  402e0c:	07270dff 	.word	0x07270dff
  402e10:	04000500 	.word	0x04000500

00402e14 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
  402e14:	4b09      	ldr	r3, [pc, #36]	; (402e3c <_sbrk+0x28>)
  402e16:	681b      	ldr	r3, [r3, #0]
  402e18:	b913      	cbnz	r3, 402e20 <_sbrk+0xc>
		heap = (unsigned char *)&_end;
  402e1a:	4a09      	ldr	r2, [pc, #36]	; (402e40 <_sbrk+0x2c>)
  402e1c:	4b07      	ldr	r3, [pc, #28]	; (402e3c <_sbrk+0x28>)
  402e1e:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
  402e20:	4b06      	ldr	r3, [pc, #24]	; (402e3c <_sbrk+0x28>)
  402e22:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
  402e24:	181a      	adds	r2, r3, r0
  402e26:	4907      	ldr	r1, [pc, #28]	; (402e44 <_sbrk+0x30>)
  402e28:	4291      	cmp	r1, r2
  402e2a:	db04      	blt.n	402e36 <_sbrk+0x22>
		return (caddr_t) -1;	
	}

	heap += incr;
  402e2c:	4610      	mov	r0, r2
  402e2e:	4a03      	ldr	r2, [pc, #12]	; (402e3c <_sbrk+0x28>)
  402e30:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
  402e32:	4618      	mov	r0, r3
  402e34:	4770      	bx	lr
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;

	if (((int)prev_heap + incr) > ramend) {
		return (caddr_t) -1;	
  402e36:	f04f 30ff 	mov.w	r0, #4294967295
	}

	heap += incr;

	return (caddr_t) prev_heap;
}
  402e3a:	4770      	bx	lr
  402e3c:	20000a38 	.word	0x20000a38
  402e40:	20003ab0 	.word	0x20003ab0
  402e44:	2000fffc 	.word	0x2000fffc

00402e48 <point_output>:
}



void point_output(void) //sends point data to the DACs, data is point number "framePos" in buffer "frameAddress".
{
  402e48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	uint8_t* currentPoint = frameAddress + framePos;
  402e4c:	4b2d      	ldr	r3, [pc, #180]	; (402f04 <point_output+0xbc>)
  402e4e:	881f      	ldrh	r7, [r3, #0]
  402e50:	4b2d      	ldr	r3, [pc, #180]	; (402f08 <point_output+0xc0>)
  402e52:	f8d3 8000 	ldr.w	r8, [r3]
  402e56:	eb08 0407 	add.w	r4, r8, r7
	
	spi_write(SPI, (currentPoint[5] << 4) + (0b0001 << 12), 0, 0); //G
  402e5a:	4e2c      	ldr	r6, [pc, #176]	; (402f0c <point_output+0xc4>)
  402e5c:	7961      	ldrb	r1, [r4, #5]
  402e5e:	0109      	lsls	r1, r1, #4
  402e60:	4630      	mov	r0, r6
  402e62:	f501 5180 	add.w	r1, r1, #4096	; 0x1000
  402e66:	2200      	movs	r2, #0
  402e68:	4613      	mov	r3, r2
  402e6a:	4d29      	ldr	r5, [pc, #164]	; (402f10 <point_output+0xc8>)
  402e6c:	47a8      	blx	r5
	spi_write(SPI, (currentPoint[6] << 4) + (0b0101 << 12), 0, 0); //B
  402e6e:	79a1      	ldrb	r1, [r4, #6]
  402e70:	0109      	lsls	r1, r1, #4
  402e72:	4630      	mov	r0, r6
  402e74:	f501 41a0 	add.w	r1, r1, #20480	; 0x5000
  402e78:	2200      	movs	r2, #0
  402e7a:	4613      	mov	r3, r2
  402e7c:	47a8      	blx	r5
	spi_write(SPI, (currentPoint[7] << 4) + (0b1001 << 12), 0, 0); //I
  402e7e:	79e1      	ldrb	r1, [r4, #7]
  402e80:	0109      	lsls	r1, r1, #4
  402e82:	f5a1 41e0 	sub.w	r1, r1, #28672	; 0x7000
  402e86:	b289      	uxth	r1, r1
  402e88:	4630      	mov	r0, r6
  402e8a:	2200      	movs	r2, #0
  402e8c:	4613      	mov	r3, r2
  402e8e:	47a8      	blx	r5
	spi_write(SPI, (currentPoint[4] << 4) + (0b1101 << 12), 0, 0); //R
  402e90:	7921      	ldrb	r1, [r4, #4]
  402e92:	0109      	lsls	r1, r1, #4
  402e94:	f5a1 5140 	sub.w	r1, r1, #12288	; 0x3000
  402e98:	b289      	uxth	r1, r1
  402e9a:	4630      	mov	r0, r6
  402e9c:	2200      	movs	r2, #0
  402e9e:	4613      	mov	r3, r2
  402ea0:	47a8      	blx	r5
	
	if ((dacc_get_interrupt_status(DACC) & DACC_ISR_TXRDY) == DACC_ISR_TXRDY) //if DAC ready
  402ea2:	481c      	ldr	r0, [pc, #112]	; (402f14 <point_output+0xcc>)
  402ea4:	4b1c      	ldr	r3, [pc, #112]	; (402f18 <point_output+0xd0>)
  402ea6:	4798      	blx	r3
  402ea8:	f010 0f01 	tst.w	r0, #1
  402eac:	d016      	beq.n	402edc <point_output+0x94>
	{
		dacc_set_channel_selection(DACC, 0);
  402eae:	4d19      	ldr	r5, [pc, #100]	; (402f14 <point_output+0xcc>)
  402eb0:	4628      	mov	r0, r5
  402eb2:	2100      	movs	r1, #0
  402eb4:	f8df 906c 	ldr.w	r9, [pc, #108]	; 402f24 <point_output+0xdc>
  402eb8:	47c8      	blx	r9
		dacc_write_conversion_data(DACC, (currentPoint[1] << 8) + currentPoint[0] ); //X
  402eba:	7861      	ldrb	r1, [r4, #1]
  402ebc:	f818 3007 	ldrb.w	r3, [r8, r7]
  402ec0:	4628      	mov	r0, r5
  402ec2:	eb03 2101 	add.w	r1, r3, r1, lsl #8
  402ec6:	4e15      	ldr	r6, [pc, #84]	; (402f1c <point_output+0xd4>)
  402ec8:	47b0      	blx	r6
		dacc_set_channel_selection(DACC, 1);
  402eca:	4628      	mov	r0, r5
  402ecc:	2101      	movs	r1, #1
  402ece:	47c8      	blx	r9
		dacc_write_conversion_data(DACC, (currentPoint[3] << 8) + currentPoint[2] ); //Y
  402ed0:	78e1      	ldrb	r1, [r4, #3]
  402ed2:	78a3      	ldrb	r3, [r4, #2]
  402ed4:	4628      	mov	r0, r5
  402ed6:	eb03 2101 	add.w	r1, r3, r1, lsl #8
  402eda:	47b0      	blx	r6
	}
	
	statusled_set( (currentPoint[4] || currentPoint[5] || currentPoint[6] || currentPoint[7]) ); //turn on status led if not blanked
  402edc:	7923      	ldrb	r3, [r4, #4]
  402ede:	b92b      	cbnz	r3, 402eec <point_output+0xa4>
  402ee0:	7963      	ldrb	r3, [r4, #5]
  402ee2:	b91b      	cbnz	r3, 402eec <point_output+0xa4>
  402ee4:	79a3      	ldrb	r3, [r4, #6]
  402ee6:	b90b      	cbnz	r3, 402eec <point_output+0xa4>
__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
  402ee8:	79e3      	ldrb	r3, [r4, #7]
  402eea:	b12b      	cbz	r3, 402ef8 <point_output+0xb0>
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  402eec:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
  402ef0:	4b0b      	ldr	r3, [pc, #44]	; (402f20 <point_output+0xd8>)
  402ef2:	631a      	str	r2, [r3, #48]	; 0x30
  402ef4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  402ef8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
  402efc:	4b08      	ldr	r3, [pc, #32]	; (402f20 <point_output+0xd8>)
  402efe:	635a      	str	r2, [r3, #52]	; 0x34
  402f00:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  402f04:	20000a42 	.word	0x20000a42
  402f08:	20000aa8 	.word	0x20000aa8
  402f0c:	40008000 	.word	0x40008000
  402f10:	004008e5 	.word	0x004008e5
  402f14:	4003c000 	.word	0x4003c000
  402f18:	00402435 	.word	0x00402435
  402f1c:	00402439 	.word	0x00402439
  402f20:	400e0e00 	.word	0x400e0e00
  402f24:	0040243d 	.word	0x0040243d

00402f28 <blank_and_center>:
}

void blank_and_center(void) //outputs a blanked and centered point
{
  402f28:	b570      	push	{r4, r5, r6, lr}
	uint8_t blankedPoint[8] = {0x00, 0x08, 0x00, 0x08, 0,0,0,0};
	uint8_t* currentPoint = &blankedPoint[0];
	
	spi_write(SPI, (currentPoint[4] << 4) + (0b1101 << 12), 0, 0); //R
  402f2a:	4d1b      	ldr	r5, [pc, #108]	; (402f98 <blank_and_center+0x70>)
  402f2c:	4628      	mov	r0, r5
  402f2e:	f44f 4150 	mov.w	r1, #53248	; 0xd000
  402f32:	2200      	movs	r2, #0
  402f34:	4613      	mov	r3, r2
  402f36:	4c19      	ldr	r4, [pc, #100]	; (402f9c <blank_and_center+0x74>)
  402f38:	47a0      	blx	r4
	spi_write(SPI, (currentPoint[5] << 4) + (0b0001 << 12), 0, 0); //G
  402f3a:	4628      	mov	r0, r5
  402f3c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  402f40:	2200      	movs	r2, #0
  402f42:	4613      	mov	r3, r2
  402f44:	47a0      	blx	r4
	spi_write(SPI, (currentPoint[6] << 4) + (0b0101 << 12), 0, 0); //B
  402f46:	4628      	mov	r0, r5
  402f48:	f44f 41a0 	mov.w	r1, #20480	; 0x5000
  402f4c:	2200      	movs	r2, #0
  402f4e:	4613      	mov	r3, r2
  402f50:	47a0      	blx	r4
	spi_write(SPI, (currentPoint[7] << 4) + (0b1001 << 12), 0, 0); //I
  402f52:	4628      	mov	r0, r5
  402f54:	f44f 4110 	mov.w	r1, #36864	; 0x9000
  402f58:	2200      	movs	r2, #0
  402f5a:	4613      	mov	r3, r2
  402f5c:	47a0      	blx	r4
	
	if ((dacc_get_interrupt_status(DACC) & DACC_ISR_TXRDY) == DACC_ISR_TXRDY) //if DAC ready
  402f5e:	4810      	ldr	r0, [pc, #64]	; (402fa0 <blank_and_center+0x78>)
  402f60:	4b10      	ldr	r3, [pc, #64]	; (402fa4 <blank_and_center+0x7c>)
  402f62:	4798      	blx	r3
  402f64:	f010 0f01 	tst.w	r0, #1
  402f68:	d010      	beq.n	402f8c <blank_and_center+0x64>
	{
		dacc_set_channel_selection(DACC, 0);
  402f6a:	4c0d      	ldr	r4, [pc, #52]	; (402fa0 <blank_and_center+0x78>)
  402f6c:	4620      	mov	r0, r4
  402f6e:	2100      	movs	r1, #0
  402f70:	4e0d      	ldr	r6, [pc, #52]	; (402fa8 <blank_and_center+0x80>)
  402f72:	47b0      	blx	r6
		dacc_write_conversion_data(DACC, (currentPoint[1] << 8) + currentPoint[0] ); //X
  402f74:	4620      	mov	r0, r4
  402f76:	f44f 6100 	mov.w	r1, #2048	; 0x800
  402f7a:	4d0c      	ldr	r5, [pc, #48]	; (402fac <blank_and_center+0x84>)
  402f7c:	47a8      	blx	r5
		dacc_set_channel_selection(DACC, 1);
  402f7e:	4620      	mov	r0, r4
  402f80:	2101      	movs	r1, #1
  402f82:	47b0      	blx	r6
		dacc_write_conversion_data(DACC, (currentPoint[3] << 8) + currentPoint[2] ); //Y
  402f84:	4620      	mov	r0, r4
  402f86:	f44f 6100 	mov.w	r1, #2048	; 0x800
  402f8a:	47a8      	blx	r5
  402f8c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
  402f90:	4b07      	ldr	r3, [pc, #28]	; (402fb0 <blank_and_center+0x88>)
  402f92:	635a      	str	r2, [r3, #52]	; 0x34
  402f94:	bd70      	pop	{r4, r5, r6, pc}
  402f96:	bf00      	nop
  402f98:	40008000 	.word	0x40008000
  402f9c:	004008e5 	.word	0x004008e5
  402fa0:	4003c000 	.word	0x4003c000
  402fa4:	00402435 	.word	0x00402435
  402fa8:	0040243d 	.word	0x0040243d
  402fac:	00402439 	.word	0x00402439
  402fb0:	400e0e00 	.word	0x400e0e00

00402fb4 <usb_interrupt_out_callback>:
	
	udi_vendor_bulk_out_run(usbBulkBufferAddress, MAXFRAMESIZE * 8 + 5, usb_bulk_out_callback);
}

void usb_interrupt_out_callback(udd_ep_status_t status, iram_size_t length, udd_ep_id_t ep)
{
  402fb4:	b508      	push	{r3, lr}
	//	Byte 0: Command
	//	Byte 1-2: Data (little endian)
	
	UNUSED(ep);
	if ( (status == UDD_EP_TRANSFER_OK) && (length == 3) )
  402fb6:	b968      	cbnz	r0, 402fd4 <usb_interrupt_out_callback+0x20>
  402fb8:	2903      	cmp	r1, #3
  402fba:	d10b      	bne.n	402fd4 <usb_interrupt_out_callback+0x20>
	{	
		if (usbInterruptBufferAddress[0] == 0x01)		//STOP
  402fbc:	4b09      	ldr	r3, [pc, #36]	; (402fe4 <usb_interrupt_out_callback+0x30>)
  402fbe:	681b      	ldr	r3, [r3, #0]
  402fc0:	781b      	ldrb	r3, [r3, #0]
  402fc2:	2b01      	cmp	r3, #1
  402fc4:	d106      	bne.n	402fd4 <usb_interrupt_out_callback+0x20>
		{
			playing = false;
  402fc6:	2300      	movs	r3, #0
  402fc8:	4a07      	ldr	r2, [pc, #28]	; (402fe8 <usb_interrupt_out_callback+0x34>)
  402fca:	7013      	strb	r3, [r2, #0]
			framePos = 0;
  402fcc:	4a07      	ldr	r2, [pc, #28]	; (402fec <usb_interrupt_out_callback+0x38>)
  402fce:	8013      	strh	r3, [r2, #0]
			blank_and_center();
  402fd0:	4b07      	ldr	r3, [pc, #28]	; (402ff0 <usb_interrupt_out_callback+0x3c>)
  402fd2:	4798      	blx	r3
		{
			//TODO
		}
	}
	
	udi_vendor_interrupt_out_run(usbInterruptBufferAddress, 3, usb_interrupt_out_callback);
  402fd4:	4b03      	ldr	r3, [pc, #12]	; (402fe4 <usb_interrupt_out_callback+0x30>)
  402fd6:	6818      	ldr	r0, [r3, #0]
  402fd8:	2103      	movs	r1, #3
  402fda:	4a06      	ldr	r2, [pc, #24]	; (402ff4 <usb_interrupt_out_callback+0x40>)
  402fdc:	4b06      	ldr	r3, [pc, #24]	; (402ff8 <usb_interrupt_out_callback+0x44>)
  402fde:	4798      	blx	r3
  402fe0:	bd08      	pop	{r3, pc}
  402fe2:	bf00      	nop
  402fe4:	20000aa4 	.word	0x20000aa4
  402fe8:	20000a3d 	.word	0x20000a3d
  402fec:	20000a42 	.word	0x20000a42
  402ff0:	00402f29 	.word	0x00402f29
  402ff4:	00402fb5 	.word	0x00402fb5
  402ff8:	0040017d 	.word	0x0040017d

00402ffc <speed_set>:
	statusled_set(LOW);
}

void speed_set(uint32_t rate) //set the output speed in points per second
{
	if (rate > MAXSPEED)
  402ffc:	f24c 3350 	movw	r3, #50000	; 0xc350
  403000:	4298      	cmp	r0, r3
  403002:	d814      	bhi.n	40302e <speed_set+0x32>
	rate = MAXSPEED;
	else if (rate < MINSPEED)
  403004:	2805      	cmp	r0, #5
  403006:	d915      	bls.n	403034 <speed_set+0x38>
	rate = MINSPEED;
	outputSpeed = rate;
  403008:	4b0e      	ldr	r3, [pc, #56]	; (403044 <speed_set+0x48>)
  40300a:	6018      	str	r0, [r3, #0]
	SysTick_Config( (sysclk_get_cpu_hz() / rate) + 1);
  40300c:	4b0e      	ldr	r3, [pc, #56]	; (403048 <speed_set+0x4c>)
  40300e:	fbb3 f0f0 	udiv	r0, r3, r0
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */
  403012:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
  403016:	d214      	bcs.n	403042 <speed_set+0x46>

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
  403018:	4b0c      	ldr	r3, [pc, #48]	; (40304c <speed_set+0x50>)
  40301a:	6058      	str	r0, [r3, #4]
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  40301c:	21f0      	movs	r1, #240	; 0xf0
  40301e:	4a0c      	ldr	r2, [pc, #48]	; (403050 <speed_set+0x54>)
  403020:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
  403024:	2200      	movs	r2, #0
  403026:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
  403028:	2207      	movs	r2, #7
  40302a:	601a      	str	r2, [r3, #0]
  40302c:	4770      	bx	lr
}

void speed_set(uint32_t rate) //set the output speed in points per second
{
	if (rate > MAXSPEED)
	rate = MAXSPEED;
  40302e:	f24c 3050 	movw	r0, #50000	; 0xc350
  403032:	e000      	b.n	403036 <speed_set+0x3a>
	else if (rate < MINSPEED)
	rate = MINSPEED;
  403034:	2006      	movs	r0, #6
	outputSpeed = rate;
  403036:	4b03      	ldr	r3, [pc, #12]	; (403044 <speed_set+0x48>)
  403038:	6018      	str	r0, [r3, #0]
	SysTick_Config( (sysclk_get_cpu_hz() / rate) + 1);
  40303a:	4b03      	ldr	r3, [pc, #12]	; (403048 <speed_set+0x4c>)
  40303c:	fbb3 f0f0 	udiv	r0, r3, r0
  403040:	e7ea      	b.n	403018 <speed_set+0x1c>
  403042:	4770      	bx	lr
  403044:	200000b8 	.word	0x200000b8
  403048:	05b8d800 	.word	0x05b8d800
  40304c:	e000e010 	.word	0xe000e010
  403050:	e000ed00 	.word	0xe000ed00

00403054 <usb_bulk_out_callback>:
		}
	}
}

void usb_bulk_out_callback(udd_ep_status_t status, iram_size_t length, udd_ep_id_t ep)
{
  403054:	b538      	push	{r3, r4, r5, lr}
	//0-n:	frame data, point is 16bit X, 16bit Y, 8bit R, 8bit G, 8bit B, 8bit I
	//n:	output rate 16bit
	//n+2:	frame size in points 16bit
	//n+4:	flags
	
	if ( (!newFrameReady) && (status == UDD_EP_TRANSFER_OK) && (length <= MAXFRAMESIZE * 8 + 5) ) //if received ok and buffer is not full
  403056:	4b2c      	ldr	r3, [pc, #176]	; (403108 <usb_bulk_out_callback+0xb4>)
  403058:	781b      	ldrb	r3, [r3, #0]
  40305a:	2b00      	cmp	r3, #0
  40305c:	d14c      	bne.n	4030f8 <usb_bulk_out_callback+0xa4>
  40305e:	2800      	cmp	r0, #0
  403060:	d14a      	bne.n	4030f8 <usb_bulk_out_callback+0xa4>
  403062:	f642 63ed 	movw	r3, #12013	; 0x2eed
  403066:	4299      	cmp	r1, r3
  403068:	d846      	bhi.n	4030f8 <usb_bulk_out_callback+0xa4>
	{
		uint16_t numOfPointBytes = length - 5; //from length of received data
  40306a:	3905      	subs	r1, #5
  40306c:	b28c      	uxth	r4, r1
		uint16_t numOfPointBytes2 = ((usbBulkBufferAddress[numOfPointBytes + 3] << 8) + usbBulkBufferAddress[numOfPointBytes + 2]) * 8; //from control bytes
  40306e:	4b27      	ldr	r3, [pc, #156]	; (40310c <usb_bulk_out_callback+0xb8>)
  403070:	6819      	ldr	r1, [r3, #0]
  403072:	190a      	adds	r2, r1, r4
  403074:	78d0      	ldrb	r0, [r2, #3]
  403076:	7893      	ldrb	r3, [r2, #2]
  403078:	eb03 2300 	add.w	r3, r3, r0, lsl #8
  40307c:	00db      	lsls	r3, r3, #3
		
		if (numOfPointBytes == numOfPointBytes2) //sanity check, skip frame if conflicting frame size information
  40307e:	b29b      	uxth	r3, r3
  403080:	429c      	cmp	r4, r3
  403082:	d139      	bne.n	4030f8 <usb_bulk_out_callback+0xa4>
		{
			uint8_t flags = usbBulkBufferAddress[numOfPointBytes + 4];
  403084:	4613      	mov	r3, r2
  403086:	7915      	ldrb	r5, [r2, #4]
			newNotRepeat = (flags & (1 << 1));
  403088:	f3c5 0040 	ubfx	r0, r5, #1, #1
  40308c:	4a20      	ldr	r2, [pc, #128]	; (403110 <usb_bulk_out_callback+0xbc>)
  40308e:	7010      	strb	r0, [r2, #0]
			outputSpeed = (usbBulkBufferAddress[numOfPointBytes + 1] << 8) + usbBulkBufferAddress[numOfPointBytes + 0];
  403090:	785a      	ldrb	r2, [r3, #1]
  403092:	5d0b      	ldrb	r3, [r1, r4]
  403094:	eb03 2302 	add.w	r3, r3, r2, lsl #8
  403098:	4a1e      	ldr	r2, [pc, #120]	; (403114 <usb_bulk_out_callback+0xc0>)
  40309a:	6013      	str	r3, [r2, #0]
			
			cpu_irq_enter_critical();
  40309c:	4b1e      	ldr	r3, [pc, #120]	; (403118 <usb_bulk_out_callback+0xc4>)
  40309e:	4798      	blx	r3
				if ( (!playing) || (flags & (1 << 0)) ) //if frame is to start playing immediately
  4030a0:	4b1e      	ldr	r3, [pc, #120]	; (40311c <usb_bulk_out_callback+0xc8>)
  4030a2:	781b      	ldrb	r3, [r3, #0]
  4030a4:	b113      	cbz	r3, 4030ac <usb_bulk_out_callback+0x58>
  4030a6:	f015 0f01 	tst.w	r5, #1
  4030aa:	d018      	beq.n	4030de <usb_bulk_out_callback+0x8a>
				{
					uint8_t* previousFrameAddress = frameAddress;
  4030ac:	4a1c      	ldr	r2, [pc, #112]	; (403120 <usb_bulk_out_callback+0xcc>)
  4030ae:	6811      	ldr	r1, [r2, #0]
					frameAddress = usbBulkBufferAddress;
  4030b0:	4b16      	ldr	r3, [pc, #88]	; (40310c <usb_bulk_out_callback+0xb8>)
  4030b2:	6818      	ldr	r0, [r3, #0]
  4030b4:	6010      	str	r0, [r2, #0]
					usbBulkBufferAddress = previousFrameAddress;
  4030b6:	6019      	str	r1, [r3, #0]
					framePos = 0;
  4030b8:	2300      	movs	r3, #0
  4030ba:	4a1a      	ldr	r2, [pc, #104]	; (403124 <usb_bulk_out_callback+0xd0>)
  4030bc:	8013      	strh	r3, [r2, #0]
					frameSize = numOfPointBytes;
  4030be:	4a1a      	ldr	r2, [pc, #104]	; (403128 <usb_bulk_out_callback+0xd4>)
  4030c0:	8014      	strh	r4, [r2, #0]
					newFrameReady = false;
  4030c2:	4a11      	ldr	r2, [pc, #68]	; (403108 <usb_bulk_out_callback+0xb4>)
  4030c4:	7013      	strb	r3, [r2, #0]
					playing = true;
  4030c6:	2201      	movs	r2, #1
  4030c8:	4b14      	ldr	r3, [pc, #80]	; (40311c <usb_bulk_out_callback+0xc8>)
  4030ca:	701a      	strb	r2, [r3, #0]
					notRepeat = newNotRepeat;
  4030cc:	4b10      	ldr	r3, [pc, #64]	; (403110 <usb_bulk_out_callback+0xbc>)
  4030ce:	781a      	ldrb	r2, [r3, #0]
  4030d0:	4b16      	ldr	r3, [pc, #88]	; (40312c <usb_bulk_out_callback+0xd8>)
  4030d2:	701a      	strb	r2, [r3, #0]
					speed_set(outputSpeed);
  4030d4:	4b0f      	ldr	r3, [pc, #60]	; (403114 <usb_bulk_out_callback+0xc0>)
  4030d6:	6818      	ldr	r0, [r3, #0]
  4030d8:	4b15      	ldr	r3, [pc, #84]	; (403130 <usb_bulk_out_callback+0xdc>)
  4030da:	4798      	blx	r3
			newNotRepeat = (flags & (1 << 1));
			outputSpeed = (usbBulkBufferAddress[numOfPointBytes + 1] << 8) + usbBulkBufferAddress[numOfPointBytes + 0];
			
			cpu_irq_enter_critical();
				if ( (!playing) || (flags & (1 << 0)) ) //if frame is to start playing immediately
				{
  4030dc:	e00a      	b.n	4030f4 <usb_bulk_out_callback+0xa0>
					notRepeat = newNotRepeat;
					speed_set(outputSpeed);
				} 
				else
				{
					uint8_t* previousNewFrameAddress = newFrameAddress;
  4030de:	4a15      	ldr	r2, [pc, #84]	; (403134 <usb_bulk_out_callback+0xe0>)
  4030e0:	6811      	ldr	r1, [r2, #0]
					newFrameAddress = usbBulkBufferAddress;
  4030e2:	4b0a      	ldr	r3, [pc, #40]	; (40310c <usb_bulk_out_callback+0xb8>)
  4030e4:	6818      	ldr	r0, [r3, #0]
  4030e6:	6010      	str	r0, [r2, #0]
					usbBulkBufferAddress = previousNewFrameAddress;	
  4030e8:	6019      	str	r1, [r3, #0]
					newFrameSize = numOfPointBytes;
  4030ea:	4b13      	ldr	r3, [pc, #76]	; (403138 <usb_bulk_out_callback+0xe4>)
  4030ec:	801c      	strh	r4, [r3, #0]
					newFrameReady = true;
  4030ee:	2201      	movs	r2, #1
  4030f0:	4b05      	ldr	r3, [pc, #20]	; (403108 <usb_bulk_out_callback+0xb4>)
  4030f2:	701a      	strb	r2, [r3, #0]
				}
			cpu_irq_leave_critical();
  4030f4:	4b11      	ldr	r3, [pc, #68]	; (40313c <usb_bulk_out_callback+0xe8>)
  4030f6:	4798      	blx	r3
		}
	}
	
	udi_vendor_bulk_out_run(usbBulkBufferAddress, MAXFRAMESIZE * 8 + 5, usb_bulk_out_callback);
  4030f8:	4b04      	ldr	r3, [pc, #16]	; (40310c <usb_bulk_out_callback+0xb8>)
  4030fa:	6818      	ldr	r0, [r3, #0]
  4030fc:	f642 61ed 	movw	r1, #12013	; 0x2eed
  403100:	4a0f      	ldr	r2, [pc, #60]	; (403140 <usb_bulk_out_callback+0xec>)
  403102:	4b10      	ldr	r3, [pc, #64]	; (403144 <usb_bulk_out_callback+0xf0>)
  403104:	4798      	blx	r3
  403106:	bd38      	pop	{r3, r4, r5, pc}
  403108:	20000a3c 	.word	0x20000a3c
  40310c:	20000aa0 	.word	0x20000aa0
  403110:	200000bd 	.word	0x200000bd
  403114:	200000b8 	.word	0x200000b8
  403118:	00402b6d 	.word	0x00402b6d
  40311c:	20000a3d 	.word	0x20000a3d
  403120:	20000aa8 	.word	0x20000aa8
  403124:	20000a42 	.word	0x20000a42
  403128:	20000a40 	.word	0x20000a40
  40312c:	200000b4 	.word	0x200000b4
  403130:	00402ffd 	.word	0x00402ffd
  403134:	20000a9c 	.word	0x20000a9c
  403138:	20000a3e 	.word	0x20000a3e
  40313c:	00402ba9 	.word	0x00402ba9
  403140:	00403055 	.word	0x00403055
  403144:	00400199 	.word	0x00400199

00403148 <SysTick_Handler>:
		sleepmgr_enter_sleep();
}

void SysTick_Handler(void) //systick timer ISR, called for each point
{
	if (playing)
  403148:	4b2b      	ldr	r3, [pc, #172]	; (4031f8 <SysTick_Handler+0xb0>)
  40314a:	781b      	ldrb	r3, [r3, #0]
  40314c:	2b00      	cmp	r3, #0
  40314e:	d052      	beq.n	4031f6 <SysTick_Handler+0xae>
	while (true)
		sleepmgr_enter_sleep();
}

void SysTick_Handler(void) //systick timer ISR, called for each point
{
  403150:	b510      	push	{r4, lr}
	if (playing)
	{
		if (framePos == 8)
  403152:	4b2a      	ldr	r3, [pc, #168]	; (4031fc <SysTick_Handler+0xb4>)
  403154:	881b      	ldrh	r3, [r3, #0]
  403156:	2b08      	cmp	r3, #8
  403158:	d10f      	bne.n	40317a <SysTick_Handler+0x32>
		{
			ioport_set_pin_level(PIN_SHUTTER, toggle2);
  40315a:	4a29      	ldr	r2, [pc, #164]	; (403200 <SysTick_Handler+0xb8>)
  40315c:	7812      	ldrb	r2, [r2, #0]
__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
  40315e:	b122      	cbz	r2, 40316a <SysTick_Handler+0x22>
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  403160:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
  403164:	4927      	ldr	r1, [pc, #156]	; (403204 <SysTick_Handler+0xbc>)
  403166:	6308      	str	r0, [r1, #48]	; 0x30
  403168:	e003      	b.n	403172 <SysTick_Handler+0x2a>
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  40316a:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
  40316e:	4925      	ldr	r1, [pc, #148]	; (403204 <SysTick_Handler+0xbc>)
  403170:	6348      	str	r0, [r1, #52]	; 0x34
			toggle2 = !toggle2;
  403172:	f082 0201 	eor.w	r2, r2, #1
  403176:	4922      	ldr	r1, [pc, #136]	; (403200 <SysTick_Handler+0xb8>)
  403178:	700a      	strb	r2, [r1, #0]
		}
		
		if (framePos >= frameSize) //if frame reached the end
  40317a:	4a23      	ldr	r2, [pc, #140]	; (403208 <SysTick_Handler+0xc0>)
  40317c:	8812      	ldrh	r2, [r2, #0]
  40317e:	429a      	cmp	r2, r3
  403180:	d832      	bhi.n	4031e8 <SysTick_Handler+0xa0>
		{
			if (newFrameReady)
  403182:	4b22      	ldr	r3, [pc, #136]	; (40320c <SysTick_Handler+0xc4>)
  403184:	781b      	ldrb	r3, [r3, #0]
  403186:	b1e3      	cbz	r3, 4031c2 <SysTick_Handler+0x7a>
			{
				//load new frame, switch buffers
				uint8_t* previousFrameAddress = frameAddress;
  403188:	4a21      	ldr	r2, [pc, #132]	; (403210 <SysTick_Handler+0xc8>)
  40318a:	6811      	ldr	r1, [r2, #0]
				frameAddress = newFrameAddress;
  40318c:	4b21      	ldr	r3, [pc, #132]	; (403214 <SysTick_Handler+0xcc>)
  40318e:	6818      	ldr	r0, [r3, #0]
  403190:	6010      	str	r0, [r2, #0]
				newFrameAddress = previousFrameAddress;
  403192:	6019      	str	r1, [r3, #0]
				newFrameReady = false;
  403194:	2300      	movs	r3, #0
  403196:	4a1d      	ldr	r2, [pc, #116]	; (40320c <SysTick_Handler+0xc4>)
  403198:	7013      	strb	r3, [r2, #0]
				framePos = 0;
  40319a:	4c18      	ldr	r4, [pc, #96]	; (4031fc <SysTick_Handler+0xb4>)
  40319c:	8023      	strh	r3, [r4, #0]
				frameSize = newFrameSize;
  40319e:	4b1e      	ldr	r3, [pc, #120]	; (403218 <SysTick_Handler+0xd0>)
  4031a0:	881a      	ldrh	r2, [r3, #0]
  4031a2:	4b19      	ldr	r3, [pc, #100]	; (403208 <SysTick_Handler+0xc0>)
  4031a4:	801a      	strh	r2, [r3, #0]
				notRepeat = newNotRepeat;
  4031a6:	4b1d      	ldr	r3, [pc, #116]	; (40321c <SysTick_Handler+0xd4>)
  4031a8:	781a      	ldrb	r2, [r3, #0]
  4031aa:	4b1d      	ldr	r3, [pc, #116]	; (403220 <SysTick_Handler+0xd8>)
  4031ac:	701a      	strb	r2, [r3, #0]
				point_output();
  4031ae:	4b1d      	ldr	r3, [pc, #116]	; (403224 <SysTick_Handler+0xdc>)
  4031b0:	4798      	blx	r3
				framePos += 8;
  4031b2:	8823      	ldrh	r3, [r4, #0]
  4031b4:	3308      	adds	r3, #8
  4031b6:	8023      	strh	r3, [r4, #0]
				speed_set(outputSpeed);
  4031b8:	4b1b      	ldr	r3, [pc, #108]	; (403228 <SysTick_Handler+0xe0>)
  4031ba:	6818      	ldr	r0, [r3, #0]
  4031bc:	4b1b      	ldr	r3, [pc, #108]	; (40322c <SysTick_Handler+0xe4>)
  4031be:	4798      	blx	r3
  4031c0:	bd10      	pop	{r4, pc}
			}
			else
			{
				if (!notRepeat)
  4031c2:	4b17      	ldr	r3, [pc, #92]	; (403220 <SysTick_Handler+0xd8>)
  4031c4:	781b      	ldrb	r3, [r3, #0]
  4031c6:	b93b      	cbnz	r3, 4031d8 <SysTick_Handler+0x90>
				{
					//loop frame
					framePos = 0;
  4031c8:	4c0c      	ldr	r4, [pc, #48]	; (4031fc <SysTick_Handler+0xb4>)
  4031ca:	8023      	strh	r3, [r4, #0]
					point_output();
  4031cc:	4b15      	ldr	r3, [pc, #84]	; (403224 <SysTick_Handler+0xdc>)
  4031ce:	4798      	blx	r3
					framePos += 8;
  4031d0:	8823      	ldrh	r3, [r4, #0]
  4031d2:	3308      	adds	r3, #8
  4031d4:	8023      	strh	r3, [r4, #0]
  4031d6:	bd10      	pop	{r4, pc}
				}
				else
				{
					framePos = 0;
  4031d8:	2300      	movs	r3, #0
  4031da:	4a08      	ldr	r2, [pc, #32]	; (4031fc <SysTick_Handler+0xb4>)
  4031dc:	8013      	strh	r3, [r2, #0]
					playing = false;
  4031de:	4a06      	ldr	r2, [pc, #24]	; (4031f8 <SysTick_Handler+0xb0>)
  4031e0:	7013      	strb	r3, [r2, #0]
					blank_and_center();
  4031e2:	4b13      	ldr	r3, [pc, #76]	; (403230 <SysTick_Handler+0xe8>)
  4031e4:	4798      	blx	r3
  4031e6:	bd10      	pop	{r4, pc}
			}
		}
		else
		{
			//output current point
			point_output();
  4031e8:	4b0e      	ldr	r3, [pc, #56]	; (403224 <SysTick_Handler+0xdc>)
  4031ea:	4798      	blx	r3
			framePos += 8;
  4031ec:	4a03      	ldr	r2, [pc, #12]	; (4031fc <SysTick_Handler+0xb4>)
  4031ee:	8813      	ldrh	r3, [r2, #0]
  4031f0:	3308      	adds	r3, #8
  4031f2:	8013      	strh	r3, [r2, #0]
  4031f4:	bd10      	pop	{r4, pc}
  4031f6:	4770      	bx	lr
  4031f8:	20000a3d 	.word	0x20000a3d
  4031fc:	20000a42 	.word	0x20000a42
  403200:	200000bc 	.word	0x200000bc
  403204:	400e0e00 	.word	0x400e0e00
  403208:	20000a40 	.word	0x20000a40
  40320c:	20000a3c 	.word	0x20000a3c
  403210:	20000aa8 	.word	0x20000aa8
  403214:	20000a9c 	.word	0x20000a9c
  403218:	20000a3e 	.word	0x20000a3e
  40321c:	200000bd 	.word	0x200000bd
  403220:	200000b4 	.word	0x200000b4
  403224:	00402e49 	.word	0x00402e49
  403228:	200000b8 	.word	0x200000b8
  40322c:	00402ffd 	.word	0x00402ffd
  403230:	00402f29 	.word	0x00402f29

00403234 <callback_vendor_enable>:
	outputSpeed = rate;
	SysTick_Config( (sysclk_get_cpu_hz() / rate) + 1);
}

int callback_vendor_enable(void) //usb connection opened, preparing for activity
{
  403234:	b508      	push	{r3, lr}
static inline void sleepmgr_unlock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] == 0) {
  403236:	4b1f      	ldr	r3, [pc, #124]	; (4032b4 <callback_vendor_enable+0x80>)
  403238:	78db      	ldrb	r3, [r3, #3]
  40323a:	b903      	cbnz	r3, 40323e <callback_vendor_enable+0xa>
  40323c:	e7fe      	b.n	40323c <callback_vendor_enable+0x8>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  40323e:	f3ef 8310 	mrs	r3, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
  403242:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  403244:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
  403248:	2100      	movs	r1, #0
  40324a:	4a1b      	ldr	r2, [pc, #108]	; (4032b8 <callback_vendor_enable+0x84>)
  40324c:	7011      	strb	r1, [r2, #0]
	}

	// Enter a critical section
	flags = cpu_irq_save();

	--sleepmgr_locks[mode];
  40324e:	4919      	ldr	r1, [pc, #100]	; (4032b4 <callback_vendor_enable+0x80>)
  403250:	78ca      	ldrb	r2, [r1, #3]
  403252:	3a01      	subs	r2, #1
  403254:	70ca      	strb	r2, [r1, #3]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  403256:	b92b      	cbnz	r3, 403264 <callback_vendor_enable+0x30>
		cpu_irq_enable();
  403258:	2201      	movs	r2, #1
  40325a:	4b17      	ldr	r3, [pc, #92]	; (4032b8 <callback_vendor_enable+0x84>)
  40325c:	701a      	strb	r2, [r3, #0]
  40325e:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
  403262:	b662      	cpsie	i
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
  403264:	4b13      	ldr	r3, [pc, #76]	; (4032b4 <callback_vendor_enable+0x80>)
  403266:	781b      	ldrb	r3, [r3, #0]
  403268:	2bff      	cmp	r3, #255	; 0xff
  40326a:	d100      	bne.n	40326e <callback_vendor_enable+0x3a>
  40326c:	e7fe      	b.n	40326c <callback_vendor_enable+0x38>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  40326e:	f3ef 8310 	mrs	r3, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
  403272:	b672      	cpsid	i
  403274:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
  403278:	2100      	movs	r1, #0
  40327a:	4a0f      	ldr	r2, [pc, #60]	; (4032b8 <callback_vendor_enable+0x84>)
  40327c:	7011      	strb	r1, [r2, #0]
	}

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
  40327e:	490d      	ldr	r1, [pc, #52]	; (4032b4 <callback_vendor_enable+0x80>)
  403280:	780a      	ldrb	r2, [r1, #0]
  403282:	3201      	adds	r2, #1
  403284:	700a      	strb	r2, [r1, #0]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  403286:	b92b      	cbnz	r3, 403294 <callback_vendor_enable+0x60>
		cpu_irq_enable();
  403288:	2201      	movs	r2, #1
  40328a:	4b0b      	ldr	r3, [pc, #44]	; (4032b8 <callback_vendor_enable+0x84>)
  40328c:	701a      	strb	r2, [r3, #0]
  40328e:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
  403292:	b662      	cpsie	i
	sleepmgr_unlock_mode(SLEEPMGR_WAIT_FAST);
	sleepmgr_lock_mode(SLEEPMGR_ACTIVE);
	
	udi_vendor_bulk_out_run(usbBulkBufferAddress, MAXFRAMESIZE * 8 + 5, usb_bulk_out_callback);
  403294:	4b09      	ldr	r3, [pc, #36]	; (4032bc <callback_vendor_enable+0x88>)
  403296:	6818      	ldr	r0, [r3, #0]
  403298:	f642 61ed 	movw	r1, #12013	; 0x2eed
  40329c:	4a08      	ldr	r2, [pc, #32]	; (4032c0 <callback_vendor_enable+0x8c>)
  40329e:	4b09      	ldr	r3, [pc, #36]	; (4032c4 <callback_vendor_enable+0x90>)
  4032a0:	4798      	blx	r3
	udi_vendor_interrupt_out_run(usbInterruptBufferAddress, 3, usb_interrupt_out_callback);
  4032a2:	4b09      	ldr	r3, [pc, #36]	; (4032c8 <callback_vendor_enable+0x94>)
  4032a4:	6818      	ldr	r0, [r3, #0]
  4032a6:	2103      	movs	r1, #3
  4032a8:	4a08      	ldr	r2, [pc, #32]	; (4032cc <callback_vendor_enable+0x98>)
  4032aa:	4b09      	ldr	r3, [pc, #36]	; (4032d0 <callback_vendor_enable+0x9c>)
  4032ac:	4798      	blx	r3
	
	return 1;
}
  4032ae:	2001      	movs	r0, #1
  4032b0:	bd08      	pop	{r3, pc}
  4032b2:	bf00      	nop
  4032b4:	20000a78 	.word	0x20000a78
  4032b8:	200000ac 	.word	0x200000ac
  4032bc:	20000aa0 	.word	0x20000aa0
  4032c0:	00403055 	.word	0x00403055
  4032c4:	00400199 	.word	0x00400199
  4032c8:	20000aa4 	.word	0x20000aa4
  4032cc:	00402fb5 	.word	0x00402fb5
  4032d0:	0040017d 	.word	0x0040017d

004032d4 <callback_vendor_disable>:

void callback_vendor_disable(void) //usb connection closed, sleeping to save power
{
  4032d4:	b508      	push	{r3, lr}
	playing = false;
  4032d6:	2300      	movs	r3, #0
  4032d8:	4a1c      	ldr	r2, [pc, #112]	; (40334c <callback_vendor_disable+0x78>)
  4032da:	7013      	strb	r3, [r2, #0]
	framePos = 0;
  4032dc:	4a1c      	ldr	r2, [pc, #112]	; (403350 <callback_vendor_disable+0x7c>)
  4032de:	8013      	strh	r3, [r2, #0]
	blank_and_center();
  4032e0:	4b1c      	ldr	r3, [pc, #112]	; (403354 <callback_vendor_disable+0x80>)
  4032e2:	4798      	blx	r3
  4032e4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
  4032e8:	4b1b      	ldr	r3, [pc, #108]	; (403358 <callback_vendor_disable+0x84>)
  4032ea:	635a      	str	r2, [r3, #52]	; 0x34
static inline void sleepmgr_unlock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] == 0) {
  4032ec:	4b1b      	ldr	r3, [pc, #108]	; (40335c <callback_vendor_disable+0x88>)
  4032ee:	781b      	ldrb	r3, [r3, #0]
  4032f0:	b903      	cbnz	r3, 4032f4 <callback_vendor_disable+0x20>
  4032f2:	e7fe      	b.n	4032f2 <callback_vendor_disable+0x1e>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  4032f4:	f3ef 8310 	mrs	r3, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
  4032f8:	b672      	cpsid	i
  4032fa:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
  4032fe:	2100      	movs	r1, #0
  403300:	4a17      	ldr	r2, [pc, #92]	; (403360 <callback_vendor_disable+0x8c>)
  403302:	7011      	strb	r1, [r2, #0]
	}

	// Enter a critical section
	flags = cpu_irq_save();

	--sleepmgr_locks[mode];
  403304:	4915      	ldr	r1, [pc, #84]	; (40335c <callback_vendor_disable+0x88>)
  403306:	780a      	ldrb	r2, [r1, #0]
  403308:	3a01      	subs	r2, #1
  40330a:	700a      	strb	r2, [r1, #0]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  40330c:	b92b      	cbnz	r3, 40331a <callback_vendor_disable+0x46>
		cpu_irq_enable();
  40330e:	2201      	movs	r2, #1
  403310:	4b13      	ldr	r3, [pc, #76]	; (403360 <callback_vendor_disable+0x8c>)
  403312:	701a      	strb	r2, [r3, #0]
  403314:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
  403318:	b662      	cpsie	i
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
  40331a:	4b10      	ldr	r3, [pc, #64]	; (40335c <callback_vendor_disable+0x88>)
  40331c:	78db      	ldrb	r3, [r3, #3]
  40331e:	2bff      	cmp	r3, #255	; 0xff
  403320:	d100      	bne.n	403324 <callback_vendor_disable+0x50>
  403322:	e7fe      	b.n	403322 <callback_vendor_disable+0x4e>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  403324:	f3ef 8310 	mrs	r3, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
  403328:	b672      	cpsid	i
  40332a:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
  40332e:	2100      	movs	r1, #0
  403330:	4a0b      	ldr	r2, [pc, #44]	; (403360 <callback_vendor_disable+0x8c>)
  403332:	7011      	strb	r1, [r2, #0]
	}

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
  403334:	4909      	ldr	r1, [pc, #36]	; (40335c <callback_vendor_disable+0x88>)
  403336:	78ca      	ldrb	r2, [r1, #3]
  403338:	3201      	adds	r2, #1
  40333a:	70ca      	strb	r2, [r1, #3]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  40333c:	b92b      	cbnz	r3, 40334a <callback_vendor_disable+0x76>
		cpu_irq_enable();
  40333e:	2201      	movs	r2, #1
  403340:	4b07      	ldr	r3, [pc, #28]	; (403360 <callback_vendor_disable+0x8c>)
  403342:	701a      	strb	r2, [r3, #0]
  403344:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
  403348:	b662      	cpsie	i
  40334a:	bd08      	pop	{r3, pc}
  40334c:	20000a3d 	.word	0x20000a3d
  403350:	20000a42 	.word	0x20000a42
  403354:	00402f29 	.word	0x00402f29
  403358:	400e0e00 	.word	0x400e0e00
  40335c:	20000a78 	.word	0x20000a78
  403360:	200000ac 	.word	0x200000ac

00403364 <iopins_init>:
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  403364:	4b05      	ldr	r3, [pc, #20]	; (40337c <iopins_init+0x18>)
  403366:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  40336a:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40336c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  403370:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
  403374:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  403376:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  40337a:	4770      	bx	lr
  40337c:	400e0e00 	.word	0x400e0e00

00403380 <spi_init>:
	ioport_set_pin_dir(PIN_SHUTTER, IOPORT_DIR_OUTPUT);
	ioport_set_pin_dir(PIN_STATUSLED, IOPORT_DIR_OUTPUT);
}

void spi_init(void) //setup SPI for DAC084S085
{
  403380:	b538      	push	{r3, r4, r5, lr}
	gpio_configure_pin(SPI_MISO_GPIO, SPI_MISO_FLAGS);
  403382:	200c      	movs	r0, #12
  403384:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  403388:	4c25      	ldr	r4, [pc, #148]	; (403420 <spi_init+0xa0>)
  40338a:	47a0      	blx	r4
	gpio_configure_pin(SPI_MOSI_GPIO, SPI_MOSI_FLAGS);
  40338c:	200d      	movs	r0, #13
  40338e:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  403392:	47a0      	blx	r4
	gpio_configure_pin(SPI_SPCK_GPIO, SPI_SPCK_FLAGS);
  403394:	200e      	movs	r0, #14
  403396:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  40339a:	47a0      	blx	r4
	gpio_configure_pin(SPI_NPCS0_GPIO, SPI_NPCS0_FLAGS);
  40339c:	200b      	movs	r0, #11
  40339e:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4033a2:	47a0      	blx	r4
	spi_enable_clock(SPI);
  4033a4:	4c1f      	ldr	r4, [pc, #124]	; (403424 <spi_init+0xa4>)
  4033a6:	4620      	mov	r0, r4
  4033a8:	4b1f      	ldr	r3, [pc, #124]	; (403428 <spi_init+0xa8>)
  4033aa:	4798      	blx	r3
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable(Spi *p_spi)
{
	p_spi->SPI_CR = SPI_CR_SPIDIS;
  4033ac:	2302      	movs	r3, #2
  4033ae:	6023      	str	r3, [r4, #0]
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_reset(Spi *p_spi)
{
	p_spi->SPI_CR = SPI_CR_SWRST;
  4033b0:	2580      	movs	r5, #128	; 0x80
  4033b2:	6025      	str	r5, [r4, #0]
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_set_master_mode(Spi *p_spi)
{
	p_spi->SPI_MR |= SPI_MR_MSTR;
  4033b4:	6863      	ldr	r3, [r4, #4]
  4033b6:	f043 0301 	orr.w	r3, r3, #1
  4033ba:	6063      	str	r3, [r4, #4]
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_set_fixed_peripheral_select(Spi *p_spi)
{
	p_spi->SPI_MR &= (~SPI_MR_PS);
  4033bc:	6863      	ldr	r3, [r4, #4]
  4033be:	f023 0302 	bic.w	r3, r3, #2
  4033c2:	6063      	str	r3, [r4, #4]
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable_mode_fault_detect(Spi *p_spi)
{
	p_spi->SPI_MR |= SPI_MR_MODFDIS;
  4033c4:	6863      	ldr	r3, [r4, #4]
  4033c6:	f043 0310 	orr.w	r3, r3, #16
  4033ca:	6063      	str	r3, [r4, #4]
	spi_disable(SPI);
	spi_reset(SPI);
	spi_set_master_mode(SPI);
	spi_set_fixed_peripheral_select(SPI);
	spi_disable_mode_fault_detect(SPI);
	spi_configure_cs_behavior(SPI, 0, SPI_CS_RISE_FORCED);
  4033cc:	4620      	mov	r0, r4
  4033ce:	2100      	movs	r1, #0
  4033d0:	2204      	movs	r2, #4
  4033d2:	4b16      	ldr	r3, [pc, #88]	; (40342c <spi_init+0xac>)
  4033d4:	4798      	blx	r3
	spi_set_delay_between_chip_select(SPI, 6);
  4033d6:	4620      	mov	r0, r4
  4033d8:	2106      	movs	r1, #6
  4033da:	4b15      	ldr	r3, [pc, #84]	; (403430 <spi_init+0xb0>)
  4033dc:	4798      	blx	r3
	spi_set_peripheral_chip_select_value(SPI, spi_get_pcs(0));
  4033de:	4620      	mov	r0, r4
  4033e0:	210e      	movs	r1, #14
  4033e2:	4b14      	ldr	r3, [pc, #80]	; (403434 <spi_init+0xb4>)
  4033e4:	4798      	blx	r3
	spi_set_clock_polarity(SPI, 0, 0);
  4033e6:	4620      	mov	r0, r4
  4033e8:	2100      	movs	r1, #0
  4033ea:	460a      	mov	r2, r1
  4033ec:	4b12      	ldr	r3, [pc, #72]	; (403438 <spi_init+0xb8>)
  4033ee:	4798      	blx	r3
	spi_set_clock_phase(SPI, 0, 0);
  4033f0:	4620      	mov	r0, r4
  4033f2:	2100      	movs	r1, #0
  4033f4:	460a      	mov	r2, r1
  4033f6:	4b11      	ldr	r3, [pc, #68]	; (40343c <spi_init+0xbc>)
  4033f8:	4798      	blx	r3
	spi_set_bits_per_transfer(SPI, 0, SPI_CSR_BITS_16_BIT);
  4033fa:	4620      	mov	r0, r4
  4033fc:	2100      	movs	r1, #0
  4033fe:	462a      	mov	r2, r5
  403400:	4b0f      	ldr	r3, [pc, #60]	; (403440 <spi_init+0xc0>)
  403402:	4798      	blx	r3
	spi_set_baudrate_div(SPI, 0, 6 ); //96Mhz / 6 = 16MHz
  403404:	4620      	mov	r0, r4
  403406:	2100      	movs	r1, #0
  403408:	2206      	movs	r2, #6
  40340a:	4b0e      	ldr	r3, [pc, #56]	; (403444 <spi_init+0xc4>)
  40340c:	4798      	blx	r3
	spi_set_transfer_delay(SPI, 0, 0, 0);
  40340e:	4620      	mov	r0, r4
  403410:	2100      	movs	r1, #0
  403412:	460a      	mov	r2, r1
  403414:	460b      	mov	r3, r1
  403416:	4d0c      	ldr	r5, [pc, #48]	; (403448 <spi_init+0xc8>)
  403418:	47a8      	blx	r5
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_enable(Spi *p_spi)
{
	p_spi->SPI_CR = SPI_CR_SPIEN;
  40341a:	2301      	movs	r3, #1
  40341c:	6023      	str	r3, [r4, #0]
  40341e:	bd38      	pop	{r3, r4, r5, pc}
  403420:	00402561 	.word	0x00402561
  403424:	40008000 	.word	0x40008000
  403428:	004008a9 	.word	0x004008a9
  40342c:	0040095d 	.word	0x0040095d
  403430:	004008d1 	.word	0x004008d1
  403434:	004008b9 	.word	0x004008b9
  403438:	0040091d 	.word	0x0040091d
  40343c:	0040093d 	.word	0x0040093d
  403440:	004009a1 	.word	0x004009a1
  403444:	004009b5 	.word	0x004009b5
  403448:	004009cd 	.word	0x004009cd

0040344c <dac_init>:
	spi_enable(SPI);
}

void dac_init(void) //setup sam internal DAC controller
{
  40344c:	b538      	push	{r3, r4, r5, lr}
  40344e:	201e      	movs	r0, #30
  403450:	4b08      	ldr	r3, [pc, #32]	; (403474 <dac_init+0x28>)
  403452:	4798      	blx	r3
	sysclk_enable_peripheral_clock(ID_DACC);
	dacc_reset(DACC);
  403454:	4c08      	ldr	r4, [pc, #32]	; (403478 <dac_init+0x2c>)
  403456:	4620      	mov	r0, r4
  403458:	4b08      	ldr	r3, [pc, #32]	; (40347c <dac_init+0x30>)
  40345a:	4798      	blx	r3
	dacc_enable_channel(DACC, 0);
  40345c:	4620      	mov	r0, r4
  40345e:	2100      	movs	r1, #0
  403460:	4d07      	ldr	r5, [pc, #28]	; (403480 <dac_init+0x34>)
  403462:	47a8      	blx	r5
	dacc_enable_channel(DACC, 1);
  403464:	4620      	mov	r0, r4
  403466:	2101      	movs	r1, #1
  403468:	47a8      	blx	r5
	dacc_set_transfer_mode(DACC, 0);
  40346a:	4620      	mov	r0, r4
  40346c:	2100      	movs	r1, #0
  40346e:	4b05      	ldr	r3, [pc, #20]	; (403484 <dac_init+0x38>)
  403470:	4798      	blx	r3
  403472:	bd38      	pop	{r3, r4, r5, pc}
  403474:	0040278d 	.word	0x0040278d
  403478:	4003c000 	.word	0x4003c000
  40347c:	00402405 	.word	0x00402405
  403480:	00402455 	.word	0x00402455
  403484:	0040240d 	.word	0x0040240d

00403488 <main>:
bool toggle = true;
bool toggle2 = true;

//ENTRY
int main (void)
{
  403488:	b580      	push	{r7, lr}
	//allocate memory to buffers
	frameAddress = malloc(MAXFRAMESIZE * 8 * sizeof(uint8_t));
  40348a:	f642 60e8 	movw	r0, #12008	; 0x2ee8
  40348e:	4c39      	ldr	r4, [pc, #228]	; (403574 <main+0xec>)
  403490:	47a0      	blx	r4
  403492:	4b39      	ldr	r3, [pc, #228]	; (403578 <main+0xf0>)
  403494:	6018      	str	r0, [r3, #0]
	newFrameAddress = malloc(MAXFRAMESIZE * 8 * sizeof(uint8_t));
  403496:	f642 60e8 	movw	r0, #12008	; 0x2ee8
  40349a:	47a0      	blx	r4
  40349c:	4b37      	ldr	r3, [pc, #220]	; (40357c <main+0xf4>)
  40349e:	6018      	str	r0, [r3, #0]
	usbBulkBufferAddress = malloc(MAXFRAMESIZE * 8 * sizeof(uint8_t));
  4034a0:	f642 60e8 	movw	r0, #12008	; 0x2ee8
  4034a4:	47a0      	blx	r4
  4034a6:	4b36      	ldr	r3, [pc, #216]	; (403580 <main+0xf8>)
  4034a8:	6018      	str	r0, [r3, #0]
	usbInterruptBufferAddress = malloc(8 * sizeof(uint8_t));
  4034aa:	2008      	movs	r0, #8
  4034ac:	47a0      	blx	r4
  4034ae:	4b35      	ldr	r3, [pc, #212]	; (403584 <main+0xfc>)
  4034b0:	6018      	str	r0, [r3, #0]
	
	//start modules
	sysclk_init();
  4034b2:	4b35      	ldr	r3, [pc, #212]	; (403588 <main+0x100>)
  4034b4:	4798      	blx	r3
	dac_init();
  4034b6:	4b35      	ldr	r3, [pc, #212]	; (40358c <main+0x104>)
  4034b8:	4798      	blx	r3
	spi_init();
  4034ba:	4b35      	ldr	r3, [pc, #212]	; (403590 <main+0x108>)
  4034bc:	4798      	blx	r3
	iopins_init();
  4034be:	4b35      	ldr	r3, [pc, #212]	; (403594 <main+0x10c>)
  4034c0:	4798      	blx	r3
	irq_initialize_vectors();
	cpu_irq_enable();
  4034c2:	2301      	movs	r3, #1
  4034c4:	4a34      	ldr	r2, [pc, #208]	; (403598 <main+0x110>)
  4034c6:	7013      	strb	r3, [r2, #0]
  4034c8:	f3bf 8f5f 	dmb	sy
  4034cc:	b662      	cpsie	i
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t i;

	for (i = 0; i < SLEEPMGR_NR_OF_MODES - 1; i++) {
		sleepmgr_locks[i] = 0;
  4034ce:	4c33      	ldr	r4, [pc, #204]	; (40359c <main+0x114>)
  4034d0:	2500      	movs	r5, #0
  4034d2:	7025      	strb	r5, [r4, #0]
  4034d4:	7065      	strb	r5, [r4, #1]
  4034d6:	70a5      	strb	r5, [r4, #2]
  4034d8:	70e5      	strb	r5, [r4, #3]
  4034da:	7125      	strb	r5, [r4, #4]
	}
	sleepmgr_locks[SLEEPMGR_NR_OF_MODES - 1] = 1;
  4034dc:	7163      	strb	r3, [r4, #5]
	sleepmgr_init();
	udc_start();
  4034de:	4b30      	ldr	r3, [pc, #192]	; (4035a0 <main+0x118>)
  4034e0:	4798      	blx	r3
	wdt_disable(WDT);
  4034e2:	4830      	ldr	r0, [pc, #192]	; (4035a4 <main+0x11c>)
  4034e4:	4b30      	ldr	r3, [pc, #192]	; (4035a8 <main+0x120>)
  4034e6:	4798      	blx	r3
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  4034e8:	4b30      	ldr	r3, [pc, #192]	; (4035ac <main+0x124>)
  4034ea:	f883 5023 	strb.w	r5, [r3, #35]	; 0x23
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
  4034ee:	2210      	movs	r2, #16
  4034f0:	f5a3 6340 	sub.w	r3, r3, #3072	; 0xc00
  4034f4:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  4034f8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
  4034fc:	4b2c      	ldr	r3, [pc, #176]	; (4035b0 <main+0x128>)
  4034fe:	635a      	str	r2, [r3, #52]	; 0x34
	NVIC_SetPriority(UDP_IRQn, 1);
	
	//default output
	shutter_set(LOW);
	statusled_set(LOW);
	blank_and_center();
  403500:	4b2c      	ldr	r3, [pc, #176]	; (4035b4 <main+0x12c>)
  403502:	4798      	blx	r3
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
  403504:	78e3      	ldrb	r3, [r4, #3]
  403506:	2bff      	cmp	r3, #255	; 0xff
  403508:	d100      	bne.n	40350c <main+0x84>
  40350a:	e7fe      	b.n	40350a <main+0x82>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  40350c:	f3ef 8310 	mrs	r3, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
  403510:	b672      	cpsid	i
  403512:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
  403516:	2100      	movs	r1, #0
  403518:	4a1f      	ldr	r2, [pc, #124]	; (403598 <main+0x110>)
  40351a:	7011      	strb	r1, [r2, #0]
	}

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
  40351c:	491f      	ldr	r1, [pc, #124]	; (40359c <main+0x114>)
  40351e:	78ca      	ldrb	r2, [r1, #3]
  403520:	3201      	adds	r2, #1
  403522:	70ca      	strb	r2, [r1, #3]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  403524:	b92b      	cbnz	r3, 403532 <main+0xaa>
		cpu_irq_enable();
  403526:	2201      	movs	r2, #1
  403528:	4b1b      	ldr	r3, [pc, #108]	; (403598 <main+0x110>)
  40352a:	701a      	strb	r2, [r3, #0]
  40352c:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
  403530:	b662      	cpsie	i
static inline void sleepmgr_enter_sleep(void)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	enum sleepmgr_mode sleep_mode;

	cpu_irq_disable();
  403532:	4c19      	ldr	r4, [pc, #100]	; (403598 <main+0x110>)
  403534:	2600      	movs	r6, #0
  403536:	4637      	mov	r7, r6

#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t *lock_ptr = sleepmgr_locks;

	// Find first non-zero lock count, starting with the shallowest modes.
	while (!(*lock_ptr)) {
  403538:	4d18      	ldr	r5, [pc, #96]	; (40359c <main+0x114>)
	Assert(sleep_mode != SLEEPMGR_ACTIVE);
#ifdef CONFIG_SLEEPMGR_ENABLE
	cpu_irq_disable();

	// Atomically enable the global interrupts and enter the sleep mode.
	pmc_sleep(sleep_mode);
  40353a:	f8df 807c 	ldr.w	r8, [pc, #124]	; 4035b8 <main+0x130>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
  40353e:	b672      	cpsid	i
  403540:	f3bf 8f5f 	dmb	sy
static inline void sleepmgr_enter_sleep(void)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	enum sleepmgr_mode sleep_mode;

	cpu_irq_disable();
  403544:	7027      	strb	r7, [r4, #0]

#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t *lock_ptr = sleepmgr_locks;

	// Find first non-zero lock count, starting with the shallowest modes.
	while (!(*lock_ptr)) {
  403546:	782b      	ldrb	r3, [r5, #0]
  403548:	b943      	cbnz	r3, 40355c <main+0xd4>
  40354a:	462b      	mov	r3, r5
  40354c:	4630      	mov	r0, r6
		lock_ptr++;
		sleep_mode = (enum sleepmgr_mode)(sleep_mode + 1);
  40354e:	3001      	adds	r0, #1
  403550:	b2c0      	uxtb	r0, r0

#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t *lock_ptr = sleepmgr_locks;

	// Find first non-zero lock count, starting with the shallowest modes.
	while (!(*lock_ptr)) {
  403552:	f813 2f01 	ldrb.w	r2, [r3, #1]!
  403556:	2a00      	cmp	r2, #0
  403558:	d0f9      	beq.n	40354e <main+0xc6>
	cpu_irq_disable();

	// Find the deepest allowable sleep mode
	sleep_mode = sleepmgr_get_sleep_mode();
	// Return right away if first mode (ACTIVE) is locked.
	if (sleep_mode==SLEEPMGR_ACTIVE) {
  40355a:	b928      	cbnz	r0, 403568 <main+0xe0>
		cpu_irq_enable();
  40355c:	2301      	movs	r3, #1
  40355e:	7023      	strb	r3, [r4, #0]
  403560:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
  403564:	b662      	cpsie	i
  403566:	e7ea      	b.n	40353e <main+0xb6>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
  403568:	b672      	cpsid	i
  40356a:	f3bf 8f5f 	dmb	sy

static inline void sleepmgr_sleep(const enum sleepmgr_mode sleep_mode)
{
	Assert(sleep_mode != SLEEPMGR_ACTIVE);
#ifdef CONFIG_SLEEPMGR_ENABLE
	cpu_irq_disable();
  40356e:	7026      	strb	r6, [r4, #0]

	// Atomically enable the global interrupts and enter the sleep mode.
	pmc_sleep(sleep_mode);
  403570:	47c0      	blx	r8
  403572:	e7e4      	b.n	40353e <main+0xb6>
  403574:	0040360d 	.word	0x0040360d
  403578:	20000aa8 	.word	0x20000aa8
  40357c:	20000a9c 	.word	0x20000a9c
  403580:	20000aa0 	.word	0x20000aa0
  403584:	20000aa4 	.word	0x20000aa4
  403588:	0040239d 	.word	0x0040239d
  40358c:	0040344d 	.word	0x0040344d
  403590:	00403381 	.word	0x00403381
  403594:	00403365 	.word	0x00403365
  403598:	200000ac 	.word	0x200000ac
  40359c:	20000a78 	.word	0x20000a78
  4035a0:	00400349 	.word	0x00400349
  4035a4:	400e1450 	.word	0x400e1450
  4035a8:	00402345 	.word	0x00402345
  4035ac:	e000ed00 	.word	0xe000ed00
  4035b0:	400e0e00 	.word	0x400e0e00
  4035b4:	00402f29 	.word	0x00402f29
  4035b8:	004028c5 	.word	0x004028c5

004035bc <__libc_init_array>:
  4035bc:	b570      	push	{r4, r5, r6, lr}
  4035be:	4e0f      	ldr	r6, [pc, #60]	; (4035fc <__libc_init_array+0x40>)
  4035c0:	4d0f      	ldr	r5, [pc, #60]	; (403600 <__libc_init_array+0x44>)
  4035c2:	1b76      	subs	r6, r6, r5
  4035c4:	10b6      	asrs	r6, r6, #2
  4035c6:	bf18      	it	ne
  4035c8:	2400      	movne	r4, #0
  4035ca:	d005      	beq.n	4035d8 <__libc_init_array+0x1c>
  4035cc:	3401      	adds	r4, #1
  4035ce:	f855 3b04 	ldr.w	r3, [r5], #4
  4035d2:	4798      	blx	r3
  4035d4:	42a6      	cmp	r6, r4
  4035d6:	d1f9      	bne.n	4035cc <__libc_init_array+0x10>
  4035d8:	4e0a      	ldr	r6, [pc, #40]	; (403604 <__libc_init_array+0x48>)
  4035da:	4d0b      	ldr	r5, [pc, #44]	; (403608 <__libc_init_array+0x4c>)
  4035dc:	1b76      	subs	r6, r6, r5
  4035de:	f000 fc6b 	bl	403eb8 <_init>
  4035e2:	10b6      	asrs	r6, r6, #2
  4035e4:	bf18      	it	ne
  4035e6:	2400      	movne	r4, #0
  4035e8:	d006      	beq.n	4035f8 <__libc_init_array+0x3c>
  4035ea:	3401      	adds	r4, #1
  4035ec:	f855 3b04 	ldr.w	r3, [r5], #4
  4035f0:	4798      	blx	r3
  4035f2:	42a6      	cmp	r6, r4
  4035f4:	d1f9      	bne.n	4035ea <__libc_init_array+0x2e>
  4035f6:	bd70      	pop	{r4, r5, r6, pc}
  4035f8:	bd70      	pop	{r4, r5, r6, pc}
  4035fa:	bf00      	nop
  4035fc:	00403ec4 	.word	0x00403ec4
  403600:	00403ec4 	.word	0x00403ec4
  403604:	00403ecc 	.word	0x00403ecc
  403608:	00403ec4 	.word	0x00403ec4

0040360c <malloc>:
  40360c:	4b02      	ldr	r3, [pc, #8]	; (403618 <malloc+0xc>)
  40360e:	4601      	mov	r1, r0
  403610:	6818      	ldr	r0, [r3, #0]
  403612:	f000 b803 	b.w	40361c <_malloc_r>
  403616:	bf00      	nop
  403618:	200004e8 	.word	0x200004e8

0040361c <_malloc_r>:
  40361c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403620:	f101 050b 	add.w	r5, r1, #11
  403624:	2d16      	cmp	r5, #22
  403626:	b083      	sub	sp, #12
  403628:	4606      	mov	r6, r0
  40362a:	d927      	bls.n	40367c <_malloc_r+0x60>
  40362c:	f035 0507 	bics.w	r5, r5, #7
  403630:	f100 80b6 	bmi.w	4037a0 <_malloc_r+0x184>
  403634:	42a9      	cmp	r1, r5
  403636:	f200 80b3 	bhi.w	4037a0 <_malloc_r+0x184>
  40363a:	f000 fa81 	bl	403b40 <__malloc_lock>
  40363e:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
  403642:	d222      	bcs.n	40368a <_malloc_r+0x6e>
  403644:	4fc2      	ldr	r7, [pc, #776]	; (403950 <_malloc_r+0x334>)
  403646:	08e8      	lsrs	r0, r5, #3
  403648:	eb07 03c0 	add.w	r3, r7, r0, lsl #3
  40364c:	68dc      	ldr	r4, [r3, #12]
  40364e:	429c      	cmp	r4, r3
  403650:	f000 81c8 	beq.w	4039e4 <_malloc_r+0x3c8>
  403654:	6863      	ldr	r3, [r4, #4]
  403656:	68e1      	ldr	r1, [r4, #12]
  403658:	68a5      	ldr	r5, [r4, #8]
  40365a:	f023 0303 	bic.w	r3, r3, #3
  40365e:	4423      	add	r3, r4
  403660:	4630      	mov	r0, r6
  403662:	685a      	ldr	r2, [r3, #4]
  403664:	60e9      	str	r1, [r5, #12]
  403666:	f042 0201 	orr.w	r2, r2, #1
  40366a:	608d      	str	r5, [r1, #8]
  40366c:	605a      	str	r2, [r3, #4]
  40366e:	f000 fa69 	bl	403b44 <__malloc_unlock>
  403672:	3408      	adds	r4, #8
  403674:	4620      	mov	r0, r4
  403676:	b003      	add	sp, #12
  403678:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40367c:	2910      	cmp	r1, #16
  40367e:	f200 808f 	bhi.w	4037a0 <_malloc_r+0x184>
  403682:	f000 fa5d 	bl	403b40 <__malloc_lock>
  403686:	2510      	movs	r5, #16
  403688:	e7dc      	b.n	403644 <_malloc_r+0x28>
  40368a:	0a68      	lsrs	r0, r5, #9
  40368c:	f000 808f 	beq.w	4037ae <_malloc_r+0x192>
  403690:	2804      	cmp	r0, #4
  403692:	f200 8154 	bhi.w	40393e <_malloc_r+0x322>
  403696:	09a8      	lsrs	r0, r5, #6
  403698:	3038      	adds	r0, #56	; 0x38
  40369a:	0041      	lsls	r1, r0, #1
  40369c:	4fac      	ldr	r7, [pc, #688]	; (403950 <_malloc_r+0x334>)
  40369e:	eb07 0181 	add.w	r1, r7, r1, lsl #2
  4036a2:	68cc      	ldr	r4, [r1, #12]
  4036a4:	42a1      	cmp	r1, r4
  4036a6:	d106      	bne.n	4036b6 <_malloc_r+0x9a>
  4036a8:	e00c      	b.n	4036c4 <_malloc_r+0xa8>
  4036aa:	2a00      	cmp	r2, #0
  4036ac:	f280 8082 	bge.w	4037b4 <_malloc_r+0x198>
  4036b0:	68e4      	ldr	r4, [r4, #12]
  4036b2:	42a1      	cmp	r1, r4
  4036b4:	d006      	beq.n	4036c4 <_malloc_r+0xa8>
  4036b6:	6863      	ldr	r3, [r4, #4]
  4036b8:	f023 0303 	bic.w	r3, r3, #3
  4036bc:	1b5a      	subs	r2, r3, r5
  4036be:	2a0f      	cmp	r2, #15
  4036c0:	ddf3      	ble.n	4036aa <_malloc_r+0x8e>
  4036c2:	3801      	subs	r0, #1
  4036c4:	3001      	adds	r0, #1
  4036c6:	49a2      	ldr	r1, [pc, #648]	; (403950 <_malloc_r+0x334>)
  4036c8:	693c      	ldr	r4, [r7, #16]
  4036ca:	f101 0e08 	add.w	lr, r1, #8
  4036ce:	4574      	cmp	r4, lr
  4036d0:	f000 817d 	beq.w	4039ce <_malloc_r+0x3b2>
  4036d4:	6863      	ldr	r3, [r4, #4]
  4036d6:	f023 0303 	bic.w	r3, r3, #3
  4036da:	1b5a      	subs	r2, r3, r5
  4036dc:	2a0f      	cmp	r2, #15
  4036de:	f300 8163 	bgt.w	4039a8 <_malloc_r+0x38c>
  4036e2:	2a00      	cmp	r2, #0
  4036e4:	f8c1 e014 	str.w	lr, [r1, #20]
  4036e8:	f8c1 e010 	str.w	lr, [r1, #16]
  4036ec:	da73      	bge.n	4037d6 <_malloc_r+0x1ba>
  4036ee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  4036f2:	f080 8139 	bcs.w	403968 <_malloc_r+0x34c>
  4036f6:	08db      	lsrs	r3, r3, #3
  4036f8:	eb01 08c3 	add.w	r8, r1, r3, lsl #3
  4036fc:	ea4f 0ca3 	mov.w	ip, r3, asr #2
  403700:	684a      	ldr	r2, [r1, #4]
  403702:	f8d8 9008 	ldr.w	r9, [r8, #8]
  403706:	f8c4 9008 	str.w	r9, [r4, #8]
  40370a:	2301      	movs	r3, #1
  40370c:	fa03 f30c 	lsl.w	r3, r3, ip
  403710:	4313      	orrs	r3, r2
  403712:	f8c4 800c 	str.w	r8, [r4, #12]
  403716:	604b      	str	r3, [r1, #4]
  403718:	f8c8 4008 	str.w	r4, [r8, #8]
  40371c:	f8c9 400c 	str.w	r4, [r9, #12]
  403720:	1082      	asrs	r2, r0, #2
  403722:	2401      	movs	r4, #1
  403724:	4094      	lsls	r4, r2
  403726:	429c      	cmp	r4, r3
  403728:	d862      	bhi.n	4037f0 <_malloc_r+0x1d4>
  40372a:	4223      	tst	r3, r4
  40372c:	d106      	bne.n	40373c <_malloc_r+0x120>
  40372e:	f020 0003 	bic.w	r0, r0, #3
  403732:	0064      	lsls	r4, r4, #1
  403734:	4223      	tst	r3, r4
  403736:	f100 0004 	add.w	r0, r0, #4
  40373a:	d0fa      	beq.n	403732 <_malloc_r+0x116>
  40373c:	eb07 08c0 	add.w	r8, r7, r0, lsl #3
  403740:	46c4      	mov	ip, r8
  403742:	4681      	mov	r9, r0
  403744:	f8dc 300c 	ldr.w	r3, [ip, #12]
  403748:	459c      	cmp	ip, r3
  40374a:	d107      	bne.n	40375c <_malloc_r+0x140>
  40374c:	e141      	b.n	4039d2 <_malloc_r+0x3b6>
  40374e:	2900      	cmp	r1, #0
  403750:	f280 8151 	bge.w	4039f6 <_malloc_r+0x3da>
  403754:	68db      	ldr	r3, [r3, #12]
  403756:	459c      	cmp	ip, r3
  403758:	f000 813b 	beq.w	4039d2 <_malloc_r+0x3b6>
  40375c:	685a      	ldr	r2, [r3, #4]
  40375e:	f022 0203 	bic.w	r2, r2, #3
  403762:	1b51      	subs	r1, r2, r5
  403764:	290f      	cmp	r1, #15
  403766:	ddf2      	ble.n	40374e <_malloc_r+0x132>
  403768:	461c      	mov	r4, r3
  40376a:	f8d3 c00c 	ldr.w	ip, [r3, #12]
  40376e:	f854 8f08 	ldr.w	r8, [r4, #8]!
  403772:	195a      	adds	r2, r3, r5
  403774:	f045 0901 	orr.w	r9, r5, #1
  403778:	f041 0501 	orr.w	r5, r1, #1
  40377c:	f8c3 9004 	str.w	r9, [r3, #4]
  403780:	4630      	mov	r0, r6
  403782:	f8c8 c00c 	str.w	ip, [r8, #12]
  403786:	f8cc 8008 	str.w	r8, [ip, #8]
  40378a:	617a      	str	r2, [r7, #20]
  40378c:	613a      	str	r2, [r7, #16]
  40378e:	f8c2 e00c 	str.w	lr, [r2, #12]
  403792:	f8c2 e008 	str.w	lr, [r2, #8]
  403796:	6055      	str	r5, [r2, #4]
  403798:	5051      	str	r1, [r2, r1]
  40379a:	f000 f9d3 	bl	403b44 <__malloc_unlock>
  40379e:	e769      	b.n	403674 <_malloc_r+0x58>
  4037a0:	2400      	movs	r4, #0
  4037a2:	230c      	movs	r3, #12
  4037a4:	4620      	mov	r0, r4
  4037a6:	6033      	str	r3, [r6, #0]
  4037a8:	b003      	add	sp, #12
  4037aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4037ae:	217e      	movs	r1, #126	; 0x7e
  4037b0:	203f      	movs	r0, #63	; 0x3f
  4037b2:	e773      	b.n	40369c <_malloc_r+0x80>
  4037b4:	4423      	add	r3, r4
  4037b6:	68e1      	ldr	r1, [r4, #12]
  4037b8:	685a      	ldr	r2, [r3, #4]
  4037ba:	68a5      	ldr	r5, [r4, #8]
  4037bc:	f042 0201 	orr.w	r2, r2, #1
  4037c0:	60e9      	str	r1, [r5, #12]
  4037c2:	4630      	mov	r0, r6
  4037c4:	608d      	str	r5, [r1, #8]
  4037c6:	605a      	str	r2, [r3, #4]
  4037c8:	f000 f9bc 	bl	403b44 <__malloc_unlock>
  4037cc:	3408      	adds	r4, #8
  4037ce:	4620      	mov	r0, r4
  4037d0:	b003      	add	sp, #12
  4037d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4037d6:	4423      	add	r3, r4
  4037d8:	4630      	mov	r0, r6
  4037da:	685a      	ldr	r2, [r3, #4]
  4037dc:	f042 0201 	orr.w	r2, r2, #1
  4037e0:	605a      	str	r2, [r3, #4]
  4037e2:	f000 f9af 	bl	403b44 <__malloc_unlock>
  4037e6:	3408      	adds	r4, #8
  4037e8:	4620      	mov	r0, r4
  4037ea:	b003      	add	sp, #12
  4037ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4037f0:	68bc      	ldr	r4, [r7, #8]
  4037f2:	6863      	ldr	r3, [r4, #4]
  4037f4:	f023 0803 	bic.w	r8, r3, #3
  4037f8:	4545      	cmp	r5, r8
  4037fa:	d804      	bhi.n	403806 <_malloc_r+0x1ea>
  4037fc:	ebc5 0308 	rsb	r3, r5, r8
  403800:	2b0f      	cmp	r3, #15
  403802:	f300 808c 	bgt.w	40391e <_malloc_r+0x302>
  403806:	4b53      	ldr	r3, [pc, #332]	; (403954 <_malloc_r+0x338>)
  403808:	f8df a158 	ldr.w	sl, [pc, #344]	; 403964 <_malloc_r+0x348>
  40380c:	681a      	ldr	r2, [r3, #0]
  40380e:	f8da 3000 	ldr.w	r3, [sl]
  403812:	3301      	adds	r3, #1
  403814:	442a      	add	r2, r5
  403816:	eb04 0b08 	add.w	fp, r4, r8
  40381a:	f000 8150 	beq.w	403abe <_malloc_r+0x4a2>
  40381e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
  403822:	320f      	adds	r2, #15
  403824:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
  403828:	f022 020f 	bic.w	r2, r2, #15
  40382c:	4611      	mov	r1, r2
  40382e:	4630      	mov	r0, r6
  403830:	9201      	str	r2, [sp, #4]
  403832:	f000 f989 	bl	403b48 <_sbrk_r>
  403836:	f1b0 3fff 	cmp.w	r0, #4294967295
  40383a:	4681      	mov	r9, r0
  40383c:	9a01      	ldr	r2, [sp, #4]
  40383e:	f000 8147 	beq.w	403ad0 <_malloc_r+0x4b4>
  403842:	4583      	cmp	fp, r0
  403844:	f200 80ee 	bhi.w	403a24 <_malloc_r+0x408>
  403848:	4b43      	ldr	r3, [pc, #268]	; (403958 <_malloc_r+0x33c>)
  40384a:	6819      	ldr	r1, [r3, #0]
  40384c:	45cb      	cmp	fp, r9
  40384e:	4411      	add	r1, r2
  403850:	6019      	str	r1, [r3, #0]
  403852:	f000 8142 	beq.w	403ada <_malloc_r+0x4be>
  403856:	f8da 0000 	ldr.w	r0, [sl]
  40385a:	f8df e108 	ldr.w	lr, [pc, #264]	; 403964 <_malloc_r+0x348>
  40385e:	3001      	adds	r0, #1
  403860:	bf1b      	ittet	ne
  403862:	ebcb 0b09 	rsbne	fp, fp, r9
  403866:	4459      	addne	r1, fp
  403868:	f8ce 9000 	streq.w	r9, [lr]
  40386c:	6019      	strne	r1, [r3, #0]
  40386e:	f019 0107 	ands.w	r1, r9, #7
  403872:	f000 8107 	beq.w	403a84 <_malloc_r+0x468>
  403876:	f1c1 0008 	rsb	r0, r1, #8
  40387a:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  40387e:	4481      	add	r9, r0
  403880:	3108      	adds	r1, #8
  403882:	444a      	add	r2, r9
  403884:	f3c2 020b 	ubfx	r2, r2, #0, #12
  403888:	ebc2 0a01 	rsb	sl, r2, r1
  40388c:	4651      	mov	r1, sl
  40388e:	4630      	mov	r0, r6
  403890:	9301      	str	r3, [sp, #4]
  403892:	f000 f959 	bl	403b48 <_sbrk_r>
  403896:	1c43      	adds	r3, r0, #1
  403898:	9b01      	ldr	r3, [sp, #4]
  40389a:	f000 812c 	beq.w	403af6 <_malloc_r+0x4da>
  40389e:	ebc9 0200 	rsb	r2, r9, r0
  4038a2:	4452      	add	r2, sl
  4038a4:	f042 0201 	orr.w	r2, r2, #1
  4038a8:	6819      	ldr	r1, [r3, #0]
  4038aa:	f8c7 9008 	str.w	r9, [r7, #8]
  4038ae:	4451      	add	r1, sl
  4038b0:	42bc      	cmp	r4, r7
  4038b2:	f8c9 2004 	str.w	r2, [r9, #4]
  4038b6:	6019      	str	r1, [r3, #0]
  4038b8:	f8df a09c 	ldr.w	sl, [pc, #156]	; 403958 <_malloc_r+0x33c>
  4038bc:	d016      	beq.n	4038ec <_malloc_r+0x2d0>
  4038be:	f1b8 0f0f 	cmp.w	r8, #15
  4038c2:	f240 80ee 	bls.w	403aa2 <_malloc_r+0x486>
  4038c6:	6862      	ldr	r2, [r4, #4]
  4038c8:	f1a8 030c 	sub.w	r3, r8, #12
  4038cc:	f023 0307 	bic.w	r3, r3, #7
  4038d0:	18e0      	adds	r0, r4, r3
  4038d2:	f002 0201 	and.w	r2, r2, #1
  4038d6:	f04f 0e05 	mov.w	lr, #5
  4038da:	431a      	orrs	r2, r3
  4038dc:	2b0f      	cmp	r3, #15
  4038de:	6062      	str	r2, [r4, #4]
  4038e0:	f8c0 e004 	str.w	lr, [r0, #4]
  4038e4:	f8c0 e008 	str.w	lr, [r0, #8]
  4038e8:	f200 8109 	bhi.w	403afe <_malloc_r+0x4e2>
  4038ec:	4b1b      	ldr	r3, [pc, #108]	; (40395c <_malloc_r+0x340>)
  4038ee:	68bc      	ldr	r4, [r7, #8]
  4038f0:	681a      	ldr	r2, [r3, #0]
  4038f2:	4291      	cmp	r1, r2
  4038f4:	bf88      	it	hi
  4038f6:	6019      	strhi	r1, [r3, #0]
  4038f8:	4b19      	ldr	r3, [pc, #100]	; (403960 <_malloc_r+0x344>)
  4038fa:	681a      	ldr	r2, [r3, #0]
  4038fc:	4291      	cmp	r1, r2
  4038fe:	6862      	ldr	r2, [r4, #4]
  403900:	bf88      	it	hi
  403902:	6019      	strhi	r1, [r3, #0]
  403904:	f022 0203 	bic.w	r2, r2, #3
  403908:	4295      	cmp	r5, r2
  40390a:	eba2 0305 	sub.w	r3, r2, r5
  40390e:	d801      	bhi.n	403914 <_malloc_r+0x2f8>
  403910:	2b0f      	cmp	r3, #15
  403912:	dc04      	bgt.n	40391e <_malloc_r+0x302>
  403914:	4630      	mov	r0, r6
  403916:	f000 f915 	bl	403b44 <__malloc_unlock>
  40391a:	2400      	movs	r4, #0
  40391c:	e6aa      	b.n	403674 <_malloc_r+0x58>
  40391e:	1962      	adds	r2, r4, r5
  403920:	f043 0301 	orr.w	r3, r3, #1
  403924:	f045 0501 	orr.w	r5, r5, #1
  403928:	6065      	str	r5, [r4, #4]
  40392a:	4630      	mov	r0, r6
  40392c:	60ba      	str	r2, [r7, #8]
  40392e:	6053      	str	r3, [r2, #4]
  403930:	f000 f908 	bl	403b44 <__malloc_unlock>
  403934:	3408      	adds	r4, #8
  403936:	4620      	mov	r0, r4
  403938:	b003      	add	sp, #12
  40393a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40393e:	2814      	cmp	r0, #20
  403940:	d968      	bls.n	403a14 <_malloc_r+0x3f8>
  403942:	2854      	cmp	r0, #84	; 0x54
  403944:	f200 8097 	bhi.w	403a76 <_malloc_r+0x45a>
  403948:	0b28      	lsrs	r0, r5, #12
  40394a:	306e      	adds	r0, #110	; 0x6e
  40394c:	0041      	lsls	r1, r0, #1
  40394e:	e6a5      	b.n	40369c <_malloc_r+0x80>
  403950:	200004ec 	.word	0x200004ec
  403954:	20000a4c 	.word	0x20000a4c
  403958:	20000a50 	.word	0x20000a50
  40395c:	20000a48 	.word	0x20000a48
  403960:	20000a44 	.word	0x20000a44
  403964:	200008f8 	.word	0x200008f8
  403968:	0a5a      	lsrs	r2, r3, #9
  40396a:	2a04      	cmp	r2, #4
  40396c:	d955      	bls.n	403a1a <_malloc_r+0x3fe>
  40396e:	2a14      	cmp	r2, #20
  403970:	f200 80a7 	bhi.w	403ac2 <_malloc_r+0x4a6>
  403974:	325b      	adds	r2, #91	; 0x5b
  403976:	ea4f 0c42 	mov.w	ip, r2, lsl #1
  40397a:	eb07 0c8c 	add.w	ip, r7, ip, lsl #2
  40397e:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 403b3c <_malloc_r+0x520>
  403982:	f8dc 1008 	ldr.w	r1, [ip, #8]
  403986:	4561      	cmp	r1, ip
  403988:	d07f      	beq.n	403a8a <_malloc_r+0x46e>
  40398a:	684a      	ldr	r2, [r1, #4]
  40398c:	f022 0203 	bic.w	r2, r2, #3
  403990:	4293      	cmp	r3, r2
  403992:	d202      	bcs.n	40399a <_malloc_r+0x37e>
  403994:	6889      	ldr	r1, [r1, #8]
  403996:	458c      	cmp	ip, r1
  403998:	d1f7      	bne.n	40398a <_malloc_r+0x36e>
  40399a:	68ca      	ldr	r2, [r1, #12]
  40399c:	687b      	ldr	r3, [r7, #4]
  40399e:	60e2      	str	r2, [r4, #12]
  4039a0:	60a1      	str	r1, [r4, #8]
  4039a2:	6094      	str	r4, [r2, #8]
  4039a4:	60cc      	str	r4, [r1, #12]
  4039a6:	e6bb      	b.n	403720 <_malloc_r+0x104>
  4039a8:	1963      	adds	r3, r4, r5
  4039aa:	f042 0701 	orr.w	r7, r2, #1
  4039ae:	f045 0501 	orr.w	r5, r5, #1
  4039b2:	6065      	str	r5, [r4, #4]
  4039b4:	4630      	mov	r0, r6
  4039b6:	614b      	str	r3, [r1, #20]
  4039b8:	610b      	str	r3, [r1, #16]
  4039ba:	f8c3 e00c 	str.w	lr, [r3, #12]
  4039be:	f8c3 e008 	str.w	lr, [r3, #8]
  4039c2:	605f      	str	r7, [r3, #4]
  4039c4:	509a      	str	r2, [r3, r2]
  4039c6:	3408      	adds	r4, #8
  4039c8:	f000 f8bc 	bl	403b44 <__malloc_unlock>
  4039cc:	e652      	b.n	403674 <_malloc_r+0x58>
  4039ce:	684b      	ldr	r3, [r1, #4]
  4039d0:	e6a6      	b.n	403720 <_malloc_r+0x104>
  4039d2:	f109 0901 	add.w	r9, r9, #1
  4039d6:	f019 0f03 	tst.w	r9, #3
  4039da:	f10c 0c08 	add.w	ip, ip, #8
  4039de:	f47f aeb1 	bne.w	403744 <_malloc_r+0x128>
  4039e2:	e02c      	b.n	403a3e <_malloc_r+0x422>
  4039e4:	f104 0308 	add.w	r3, r4, #8
  4039e8:	6964      	ldr	r4, [r4, #20]
  4039ea:	42a3      	cmp	r3, r4
  4039ec:	bf08      	it	eq
  4039ee:	3002      	addeq	r0, #2
  4039f0:	f43f ae69 	beq.w	4036c6 <_malloc_r+0xaa>
  4039f4:	e62e      	b.n	403654 <_malloc_r+0x38>
  4039f6:	441a      	add	r2, r3
  4039f8:	461c      	mov	r4, r3
  4039fa:	6851      	ldr	r1, [r2, #4]
  4039fc:	68db      	ldr	r3, [r3, #12]
  4039fe:	f854 5f08 	ldr.w	r5, [r4, #8]!
  403a02:	f041 0101 	orr.w	r1, r1, #1
  403a06:	6051      	str	r1, [r2, #4]
  403a08:	4630      	mov	r0, r6
  403a0a:	60eb      	str	r3, [r5, #12]
  403a0c:	609d      	str	r5, [r3, #8]
  403a0e:	f000 f899 	bl	403b44 <__malloc_unlock>
  403a12:	e62f      	b.n	403674 <_malloc_r+0x58>
  403a14:	305b      	adds	r0, #91	; 0x5b
  403a16:	0041      	lsls	r1, r0, #1
  403a18:	e640      	b.n	40369c <_malloc_r+0x80>
  403a1a:	099a      	lsrs	r2, r3, #6
  403a1c:	3238      	adds	r2, #56	; 0x38
  403a1e:	ea4f 0c42 	mov.w	ip, r2, lsl #1
  403a22:	e7aa      	b.n	40397a <_malloc_r+0x35e>
  403a24:	42bc      	cmp	r4, r7
  403a26:	4b45      	ldr	r3, [pc, #276]	; (403b3c <_malloc_r+0x520>)
  403a28:	f43f af0e 	beq.w	403848 <_malloc_r+0x22c>
  403a2c:	689c      	ldr	r4, [r3, #8]
  403a2e:	6862      	ldr	r2, [r4, #4]
  403a30:	f022 0203 	bic.w	r2, r2, #3
  403a34:	e768      	b.n	403908 <_malloc_r+0x2ec>
  403a36:	f8d8 8000 	ldr.w	r8, [r8]
  403a3a:	4598      	cmp	r8, r3
  403a3c:	d17c      	bne.n	403b38 <_malloc_r+0x51c>
  403a3e:	f010 0f03 	tst.w	r0, #3
  403a42:	f1a8 0308 	sub.w	r3, r8, #8
  403a46:	f100 30ff 	add.w	r0, r0, #4294967295
  403a4a:	d1f4      	bne.n	403a36 <_malloc_r+0x41a>
  403a4c:	687b      	ldr	r3, [r7, #4]
  403a4e:	ea23 0304 	bic.w	r3, r3, r4
  403a52:	607b      	str	r3, [r7, #4]
  403a54:	0064      	lsls	r4, r4, #1
  403a56:	429c      	cmp	r4, r3
  403a58:	f63f aeca 	bhi.w	4037f0 <_malloc_r+0x1d4>
  403a5c:	2c00      	cmp	r4, #0
  403a5e:	f43f aec7 	beq.w	4037f0 <_malloc_r+0x1d4>
  403a62:	4223      	tst	r3, r4
  403a64:	4648      	mov	r0, r9
  403a66:	f47f ae69 	bne.w	40373c <_malloc_r+0x120>
  403a6a:	0064      	lsls	r4, r4, #1
  403a6c:	4223      	tst	r3, r4
  403a6e:	f100 0004 	add.w	r0, r0, #4
  403a72:	d0fa      	beq.n	403a6a <_malloc_r+0x44e>
  403a74:	e662      	b.n	40373c <_malloc_r+0x120>
  403a76:	f5b0 7faa 	cmp.w	r0, #340	; 0x154
  403a7a:	d818      	bhi.n	403aae <_malloc_r+0x492>
  403a7c:	0be8      	lsrs	r0, r5, #15
  403a7e:	3077      	adds	r0, #119	; 0x77
  403a80:	0041      	lsls	r1, r0, #1
  403a82:	e60b      	b.n	40369c <_malloc_r+0x80>
  403a84:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  403a88:	e6fb      	b.n	403882 <_malloc_r+0x266>
  403a8a:	f8d8 3004 	ldr.w	r3, [r8, #4]
  403a8e:	1092      	asrs	r2, r2, #2
  403a90:	f04f 0c01 	mov.w	ip, #1
  403a94:	fa0c f202 	lsl.w	r2, ip, r2
  403a98:	4313      	orrs	r3, r2
  403a9a:	f8c8 3004 	str.w	r3, [r8, #4]
  403a9e:	460a      	mov	r2, r1
  403aa0:	e77d      	b.n	40399e <_malloc_r+0x382>
  403aa2:	2301      	movs	r3, #1
  403aa4:	f8c9 3004 	str.w	r3, [r9, #4]
  403aa8:	464c      	mov	r4, r9
  403aaa:	2200      	movs	r2, #0
  403aac:	e72c      	b.n	403908 <_malloc_r+0x2ec>
  403aae:	f240 5354 	movw	r3, #1364	; 0x554
  403ab2:	4298      	cmp	r0, r3
  403ab4:	d81c      	bhi.n	403af0 <_malloc_r+0x4d4>
  403ab6:	0ca8      	lsrs	r0, r5, #18
  403ab8:	307c      	adds	r0, #124	; 0x7c
  403aba:	0041      	lsls	r1, r0, #1
  403abc:	e5ee      	b.n	40369c <_malloc_r+0x80>
  403abe:	3210      	adds	r2, #16
  403ac0:	e6b4      	b.n	40382c <_malloc_r+0x210>
  403ac2:	2a54      	cmp	r2, #84	; 0x54
  403ac4:	d823      	bhi.n	403b0e <_malloc_r+0x4f2>
  403ac6:	0b1a      	lsrs	r2, r3, #12
  403ac8:	326e      	adds	r2, #110	; 0x6e
  403aca:	ea4f 0c42 	mov.w	ip, r2, lsl #1
  403ace:	e754      	b.n	40397a <_malloc_r+0x35e>
  403ad0:	68bc      	ldr	r4, [r7, #8]
  403ad2:	6862      	ldr	r2, [r4, #4]
  403ad4:	f022 0203 	bic.w	r2, r2, #3
  403ad8:	e716      	b.n	403908 <_malloc_r+0x2ec>
  403ada:	f3cb 000b 	ubfx	r0, fp, #0, #12
  403ade:	2800      	cmp	r0, #0
  403ae0:	f47f aeb9 	bne.w	403856 <_malloc_r+0x23a>
  403ae4:	4442      	add	r2, r8
  403ae6:	68bb      	ldr	r3, [r7, #8]
  403ae8:	f042 0201 	orr.w	r2, r2, #1
  403aec:	605a      	str	r2, [r3, #4]
  403aee:	e6fd      	b.n	4038ec <_malloc_r+0x2d0>
  403af0:	21fc      	movs	r1, #252	; 0xfc
  403af2:	207e      	movs	r0, #126	; 0x7e
  403af4:	e5d2      	b.n	40369c <_malloc_r+0x80>
  403af6:	2201      	movs	r2, #1
  403af8:	f04f 0a00 	mov.w	sl, #0
  403afc:	e6d4      	b.n	4038a8 <_malloc_r+0x28c>
  403afe:	f104 0108 	add.w	r1, r4, #8
  403b02:	4630      	mov	r0, r6
  403b04:	f000 f8a6 	bl	403c54 <_free_r>
  403b08:	f8da 1000 	ldr.w	r1, [sl]
  403b0c:	e6ee      	b.n	4038ec <_malloc_r+0x2d0>
  403b0e:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  403b12:	d804      	bhi.n	403b1e <_malloc_r+0x502>
  403b14:	0bda      	lsrs	r2, r3, #15
  403b16:	3277      	adds	r2, #119	; 0x77
  403b18:	ea4f 0c42 	mov.w	ip, r2, lsl #1
  403b1c:	e72d      	b.n	40397a <_malloc_r+0x35e>
  403b1e:	f240 5154 	movw	r1, #1364	; 0x554
  403b22:	428a      	cmp	r2, r1
  403b24:	d804      	bhi.n	403b30 <_malloc_r+0x514>
  403b26:	0c9a      	lsrs	r2, r3, #18
  403b28:	327c      	adds	r2, #124	; 0x7c
  403b2a:	ea4f 0c42 	mov.w	ip, r2, lsl #1
  403b2e:	e724      	b.n	40397a <_malloc_r+0x35e>
  403b30:	f04f 0cfc 	mov.w	ip, #252	; 0xfc
  403b34:	227e      	movs	r2, #126	; 0x7e
  403b36:	e720      	b.n	40397a <_malloc_r+0x35e>
  403b38:	687b      	ldr	r3, [r7, #4]
  403b3a:	e78b      	b.n	403a54 <_malloc_r+0x438>
  403b3c:	200004ec 	.word	0x200004ec

00403b40 <__malloc_lock>:
  403b40:	4770      	bx	lr
  403b42:	bf00      	nop

00403b44 <__malloc_unlock>:
  403b44:	4770      	bx	lr
  403b46:	bf00      	nop

00403b48 <_sbrk_r>:
  403b48:	b538      	push	{r3, r4, r5, lr}
  403b4a:	4c07      	ldr	r4, [pc, #28]	; (403b68 <_sbrk_r+0x20>)
  403b4c:	2300      	movs	r3, #0
  403b4e:	4605      	mov	r5, r0
  403b50:	4608      	mov	r0, r1
  403b52:	6023      	str	r3, [r4, #0]
  403b54:	f7ff f95e 	bl	402e14 <_sbrk>
  403b58:	1c43      	adds	r3, r0, #1
  403b5a:	d000      	beq.n	403b5e <_sbrk_r+0x16>
  403b5c:	bd38      	pop	{r3, r4, r5, pc}
  403b5e:	6823      	ldr	r3, [r4, #0]
  403b60:	2b00      	cmp	r3, #0
  403b62:	d0fb      	beq.n	403b5c <_sbrk_r+0x14>
  403b64:	602b      	str	r3, [r5, #0]
  403b66:	bd38      	pop	{r3, r4, r5, pc}
  403b68:	20000aac 	.word	0x20000aac

00403b6c <register_fini>:
  403b6c:	4b02      	ldr	r3, [pc, #8]	; (403b78 <register_fini+0xc>)
  403b6e:	b113      	cbz	r3, 403b76 <register_fini+0xa>
  403b70:	4802      	ldr	r0, [pc, #8]	; (403b7c <register_fini+0x10>)
  403b72:	f000 b805 	b.w	403b80 <atexit>
  403b76:	4770      	bx	lr
  403b78:	00000000 	.word	0x00000000
  403b7c:	00403b8d 	.word	0x00403b8d

00403b80 <atexit>:
  403b80:	4601      	mov	r1, r0
  403b82:	2000      	movs	r0, #0
  403b84:	4602      	mov	r2, r0
  403b86:	4603      	mov	r3, r0
  403b88:	f000 b93c 	b.w	403e04 <__register_exitproc>

00403b8c <__libc_fini_array>:
  403b8c:	b538      	push	{r3, r4, r5, lr}
  403b8e:	4b08      	ldr	r3, [pc, #32]	; (403bb0 <__libc_fini_array+0x24>)
  403b90:	4d08      	ldr	r5, [pc, #32]	; (403bb4 <__libc_fini_array+0x28>)
  403b92:	1aed      	subs	r5, r5, r3
  403b94:	10ac      	asrs	r4, r5, #2
  403b96:	bf18      	it	ne
  403b98:	18ed      	addne	r5, r5, r3
  403b9a:	d005      	beq.n	403ba8 <__libc_fini_array+0x1c>
  403b9c:	3c01      	subs	r4, #1
  403b9e:	f855 3d04 	ldr.w	r3, [r5, #-4]!
  403ba2:	4798      	blx	r3
  403ba4:	2c00      	cmp	r4, #0
  403ba6:	d1f9      	bne.n	403b9c <__libc_fini_array+0x10>
  403ba8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  403bac:	f000 b98e 	b.w	403ecc <_fini>
  403bb0:	00403ed8 	.word	0x00403ed8
  403bb4:	00403edc 	.word	0x00403edc

00403bb8 <_malloc_trim_r>:
  403bb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  403bba:	4f23      	ldr	r7, [pc, #140]	; (403c48 <_malloc_trim_r+0x90>)
  403bbc:	460c      	mov	r4, r1
  403bbe:	4606      	mov	r6, r0
  403bc0:	f7ff ffbe 	bl	403b40 <__malloc_lock>
  403bc4:	68bb      	ldr	r3, [r7, #8]
  403bc6:	685d      	ldr	r5, [r3, #4]
  403bc8:	f025 0503 	bic.w	r5, r5, #3
  403bcc:	1b29      	subs	r1, r5, r4
  403bce:	f601 71ef 	addw	r1, r1, #4079	; 0xfef
  403bd2:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  403bd6:	f021 010f 	bic.w	r1, r1, #15
  403bda:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  403bde:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  403be2:	db07      	blt.n	403bf4 <_malloc_trim_r+0x3c>
  403be4:	4630      	mov	r0, r6
  403be6:	2100      	movs	r1, #0
  403be8:	f7ff ffae 	bl	403b48 <_sbrk_r>
  403bec:	68bb      	ldr	r3, [r7, #8]
  403bee:	442b      	add	r3, r5
  403bf0:	4298      	cmp	r0, r3
  403bf2:	d004      	beq.n	403bfe <_malloc_trim_r+0x46>
  403bf4:	4630      	mov	r0, r6
  403bf6:	f7ff ffa5 	bl	403b44 <__malloc_unlock>
  403bfa:	2000      	movs	r0, #0
  403bfc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  403bfe:	4630      	mov	r0, r6
  403c00:	4261      	negs	r1, r4
  403c02:	f7ff ffa1 	bl	403b48 <_sbrk_r>
  403c06:	3001      	adds	r0, #1
  403c08:	d00d      	beq.n	403c26 <_malloc_trim_r+0x6e>
  403c0a:	4b10      	ldr	r3, [pc, #64]	; (403c4c <_malloc_trim_r+0x94>)
  403c0c:	68ba      	ldr	r2, [r7, #8]
  403c0e:	6819      	ldr	r1, [r3, #0]
  403c10:	1b2d      	subs	r5, r5, r4
  403c12:	f045 0501 	orr.w	r5, r5, #1
  403c16:	4630      	mov	r0, r6
  403c18:	1b09      	subs	r1, r1, r4
  403c1a:	6055      	str	r5, [r2, #4]
  403c1c:	6019      	str	r1, [r3, #0]
  403c1e:	f7ff ff91 	bl	403b44 <__malloc_unlock>
  403c22:	2001      	movs	r0, #1
  403c24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  403c26:	4630      	mov	r0, r6
  403c28:	2100      	movs	r1, #0
  403c2a:	f7ff ff8d 	bl	403b48 <_sbrk_r>
  403c2e:	68ba      	ldr	r2, [r7, #8]
  403c30:	1a83      	subs	r3, r0, r2
  403c32:	2b0f      	cmp	r3, #15
  403c34:	ddde      	ble.n	403bf4 <_malloc_trim_r+0x3c>
  403c36:	4c06      	ldr	r4, [pc, #24]	; (403c50 <_malloc_trim_r+0x98>)
  403c38:	4904      	ldr	r1, [pc, #16]	; (403c4c <_malloc_trim_r+0x94>)
  403c3a:	6824      	ldr	r4, [r4, #0]
  403c3c:	f043 0301 	orr.w	r3, r3, #1
  403c40:	1b00      	subs	r0, r0, r4
  403c42:	6053      	str	r3, [r2, #4]
  403c44:	6008      	str	r0, [r1, #0]
  403c46:	e7d5      	b.n	403bf4 <_malloc_trim_r+0x3c>
  403c48:	200004ec 	.word	0x200004ec
  403c4c:	20000a50 	.word	0x20000a50
  403c50:	200008f8 	.word	0x200008f8

00403c54 <_free_r>:
  403c54:	2900      	cmp	r1, #0
  403c56:	d04e      	beq.n	403cf6 <_free_r+0xa2>
  403c58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  403c5c:	460c      	mov	r4, r1
  403c5e:	4680      	mov	r8, r0
  403c60:	f7ff ff6e 	bl	403b40 <__malloc_lock>
  403c64:	f854 7c04 	ldr.w	r7, [r4, #-4]
  403c68:	4962      	ldr	r1, [pc, #392]	; (403df4 <_free_r+0x1a0>)
  403c6a:	f027 0201 	bic.w	r2, r7, #1
  403c6e:	f1a4 0508 	sub.w	r5, r4, #8
  403c72:	18ab      	adds	r3, r5, r2
  403c74:	688e      	ldr	r6, [r1, #8]
  403c76:	6858      	ldr	r0, [r3, #4]
  403c78:	429e      	cmp	r6, r3
  403c7a:	f020 0003 	bic.w	r0, r0, #3
  403c7e:	d05a      	beq.n	403d36 <_free_r+0xe2>
  403c80:	07fe      	lsls	r6, r7, #31
  403c82:	6058      	str	r0, [r3, #4]
  403c84:	d40b      	bmi.n	403c9e <_free_r+0x4a>
  403c86:	f854 7c08 	ldr.w	r7, [r4, #-8]
  403c8a:	1bed      	subs	r5, r5, r7
  403c8c:	f101 0e08 	add.w	lr, r1, #8
  403c90:	68ac      	ldr	r4, [r5, #8]
  403c92:	4574      	cmp	r4, lr
  403c94:	443a      	add	r2, r7
  403c96:	d067      	beq.n	403d68 <_free_r+0x114>
  403c98:	68ef      	ldr	r7, [r5, #12]
  403c9a:	60e7      	str	r7, [r4, #12]
  403c9c:	60bc      	str	r4, [r7, #8]
  403c9e:	181c      	adds	r4, r3, r0
  403ca0:	6864      	ldr	r4, [r4, #4]
  403ca2:	07e4      	lsls	r4, r4, #31
  403ca4:	d40c      	bmi.n	403cc0 <_free_r+0x6c>
  403ca6:	4f54      	ldr	r7, [pc, #336]	; (403df8 <_free_r+0x1a4>)
  403ca8:	689c      	ldr	r4, [r3, #8]
  403caa:	42bc      	cmp	r4, r7
  403cac:	4402      	add	r2, r0
  403cae:	d07c      	beq.n	403daa <_free_r+0x156>
  403cb0:	68d8      	ldr	r0, [r3, #12]
  403cb2:	60e0      	str	r0, [r4, #12]
  403cb4:	f042 0301 	orr.w	r3, r2, #1
  403cb8:	6084      	str	r4, [r0, #8]
  403cba:	606b      	str	r3, [r5, #4]
  403cbc:	50aa      	str	r2, [r5, r2]
  403cbe:	e003      	b.n	403cc8 <_free_r+0x74>
  403cc0:	f042 0301 	orr.w	r3, r2, #1
  403cc4:	606b      	str	r3, [r5, #4]
  403cc6:	50aa      	str	r2, [r5, r2]
  403cc8:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  403ccc:	d214      	bcs.n	403cf8 <_free_r+0xa4>
  403cce:	08d2      	lsrs	r2, r2, #3
  403cd0:	eb01 03c2 	add.w	r3, r1, r2, lsl #3
  403cd4:	6848      	ldr	r0, [r1, #4]
  403cd6:	689f      	ldr	r7, [r3, #8]
  403cd8:	60af      	str	r7, [r5, #8]
  403cda:	1092      	asrs	r2, r2, #2
  403cdc:	2401      	movs	r4, #1
  403cde:	fa04 f202 	lsl.w	r2, r4, r2
  403ce2:	4310      	orrs	r0, r2
  403ce4:	60eb      	str	r3, [r5, #12]
  403ce6:	6048      	str	r0, [r1, #4]
  403ce8:	609d      	str	r5, [r3, #8]
  403cea:	60fd      	str	r5, [r7, #12]
  403cec:	4640      	mov	r0, r8
  403cee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  403cf2:	f7ff bf27 	b.w	403b44 <__malloc_unlock>
  403cf6:	4770      	bx	lr
  403cf8:	0a53      	lsrs	r3, r2, #9
  403cfa:	2b04      	cmp	r3, #4
  403cfc:	d847      	bhi.n	403d8e <_free_r+0x13a>
  403cfe:	0993      	lsrs	r3, r2, #6
  403d00:	f103 0438 	add.w	r4, r3, #56	; 0x38
  403d04:	0060      	lsls	r0, r4, #1
  403d06:	eb01 0080 	add.w	r0, r1, r0, lsl #2
  403d0a:	493a      	ldr	r1, [pc, #232]	; (403df4 <_free_r+0x1a0>)
  403d0c:	6883      	ldr	r3, [r0, #8]
  403d0e:	4283      	cmp	r3, r0
  403d10:	d043      	beq.n	403d9a <_free_r+0x146>
  403d12:	6859      	ldr	r1, [r3, #4]
  403d14:	f021 0103 	bic.w	r1, r1, #3
  403d18:	4291      	cmp	r1, r2
  403d1a:	d902      	bls.n	403d22 <_free_r+0xce>
  403d1c:	689b      	ldr	r3, [r3, #8]
  403d1e:	4298      	cmp	r0, r3
  403d20:	d1f7      	bne.n	403d12 <_free_r+0xbe>
  403d22:	68da      	ldr	r2, [r3, #12]
  403d24:	60ea      	str	r2, [r5, #12]
  403d26:	60ab      	str	r3, [r5, #8]
  403d28:	4640      	mov	r0, r8
  403d2a:	6095      	str	r5, [r2, #8]
  403d2c:	60dd      	str	r5, [r3, #12]
  403d2e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  403d32:	f7ff bf07 	b.w	403b44 <__malloc_unlock>
  403d36:	07ff      	lsls	r7, r7, #31
  403d38:	4402      	add	r2, r0
  403d3a:	d407      	bmi.n	403d4c <_free_r+0xf8>
  403d3c:	f854 3c08 	ldr.w	r3, [r4, #-8]
  403d40:	1aed      	subs	r5, r5, r3
  403d42:	441a      	add	r2, r3
  403d44:	68a8      	ldr	r0, [r5, #8]
  403d46:	68eb      	ldr	r3, [r5, #12]
  403d48:	60c3      	str	r3, [r0, #12]
  403d4a:	6098      	str	r0, [r3, #8]
  403d4c:	4b2b      	ldr	r3, [pc, #172]	; (403dfc <_free_r+0x1a8>)
  403d4e:	681b      	ldr	r3, [r3, #0]
  403d50:	f042 0001 	orr.w	r0, r2, #1
  403d54:	429a      	cmp	r2, r3
  403d56:	6068      	str	r0, [r5, #4]
  403d58:	608d      	str	r5, [r1, #8]
  403d5a:	d3c7      	bcc.n	403cec <_free_r+0x98>
  403d5c:	4b28      	ldr	r3, [pc, #160]	; (403e00 <_free_r+0x1ac>)
  403d5e:	4640      	mov	r0, r8
  403d60:	6819      	ldr	r1, [r3, #0]
  403d62:	f7ff ff29 	bl	403bb8 <_malloc_trim_r>
  403d66:	e7c1      	b.n	403cec <_free_r+0x98>
  403d68:	1819      	adds	r1, r3, r0
  403d6a:	6849      	ldr	r1, [r1, #4]
  403d6c:	07c9      	lsls	r1, r1, #31
  403d6e:	d409      	bmi.n	403d84 <_free_r+0x130>
  403d70:	68d9      	ldr	r1, [r3, #12]
  403d72:	689b      	ldr	r3, [r3, #8]
  403d74:	4402      	add	r2, r0
  403d76:	f042 0001 	orr.w	r0, r2, #1
  403d7a:	60d9      	str	r1, [r3, #12]
  403d7c:	608b      	str	r3, [r1, #8]
  403d7e:	6068      	str	r0, [r5, #4]
  403d80:	50aa      	str	r2, [r5, r2]
  403d82:	e7b3      	b.n	403cec <_free_r+0x98>
  403d84:	f042 0301 	orr.w	r3, r2, #1
  403d88:	606b      	str	r3, [r5, #4]
  403d8a:	50aa      	str	r2, [r5, r2]
  403d8c:	e7ae      	b.n	403cec <_free_r+0x98>
  403d8e:	2b14      	cmp	r3, #20
  403d90:	d814      	bhi.n	403dbc <_free_r+0x168>
  403d92:	f103 045b 	add.w	r4, r3, #91	; 0x5b
  403d96:	0060      	lsls	r0, r4, #1
  403d98:	e7b5      	b.n	403d06 <_free_r+0xb2>
  403d9a:	684a      	ldr	r2, [r1, #4]
  403d9c:	10a4      	asrs	r4, r4, #2
  403d9e:	2001      	movs	r0, #1
  403da0:	40a0      	lsls	r0, r4
  403da2:	4302      	orrs	r2, r0
  403da4:	604a      	str	r2, [r1, #4]
  403da6:	461a      	mov	r2, r3
  403da8:	e7bc      	b.n	403d24 <_free_r+0xd0>
  403daa:	f042 0301 	orr.w	r3, r2, #1
  403dae:	614d      	str	r5, [r1, #20]
  403db0:	610d      	str	r5, [r1, #16]
  403db2:	60ec      	str	r4, [r5, #12]
  403db4:	60ac      	str	r4, [r5, #8]
  403db6:	606b      	str	r3, [r5, #4]
  403db8:	50aa      	str	r2, [r5, r2]
  403dba:	e797      	b.n	403cec <_free_r+0x98>
  403dbc:	2b54      	cmp	r3, #84	; 0x54
  403dbe:	d804      	bhi.n	403dca <_free_r+0x176>
  403dc0:	0b13      	lsrs	r3, r2, #12
  403dc2:	f103 046e 	add.w	r4, r3, #110	; 0x6e
  403dc6:	0060      	lsls	r0, r4, #1
  403dc8:	e79d      	b.n	403d06 <_free_r+0xb2>
  403dca:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  403dce:	d804      	bhi.n	403dda <_free_r+0x186>
  403dd0:	0bd3      	lsrs	r3, r2, #15
  403dd2:	f103 0477 	add.w	r4, r3, #119	; 0x77
  403dd6:	0060      	lsls	r0, r4, #1
  403dd8:	e795      	b.n	403d06 <_free_r+0xb2>
  403dda:	f240 5054 	movw	r0, #1364	; 0x554
  403dde:	4283      	cmp	r3, r0
  403de0:	d804      	bhi.n	403dec <_free_r+0x198>
  403de2:	0c93      	lsrs	r3, r2, #18
  403de4:	f103 047c 	add.w	r4, r3, #124	; 0x7c
  403de8:	0060      	lsls	r0, r4, #1
  403dea:	e78c      	b.n	403d06 <_free_r+0xb2>
  403dec:	20fc      	movs	r0, #252	; 0xfc
  403dee:	247e      	movs	r4, #126	; 0x7e
  403df0:	e789      	b.n	403d06 <_free_r+0xb2>
  403df2:	bf00      	nop
  403df4:	200004ec 	.word	0x200004ec
  403df8:	200004f4 	.word	0x200004f4
  403dfc:	200008f4 	.word	0x200008f4
  403e00:	20000a4c 	.word	0x20000a4c

00403e04 <__register_exitproc>:
  403e04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  403e08:	4c25      	ldr	r4, [pc, #148]	; (403ea0 <__register_exitproc+0x9c>)
  403e0a:	6825      	ldr	r5, [r4, #0]
  403e0c:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
  403e10:	4606      	mov	r6, r0
  403e12:	4688      	mov	r8, r1
  403e14:	4692      	mov	sl, r2
  403e16:	4699      	mov	r9, r3
  403e18:	b3cc      	cbz	r4, 403e8e <__register_exitproc+0x8a>
  403e1a:	6860      	ldr	r0, [r4, #4]
  403e1c:	281f      	cmp	r0, #31
  403e1e:	dc18      	bgt.n	403e52 <__register_exitproc+0x4e>
  403e20:	1c43      	adds	r3, r0, #1
  403e22:	b17e      	cbz	r6, 403e44 <__register_exitproc+0x40>
  403e24:	eb04 0580 	add.w	r5, r4, r0, lsl #2
  403e28:	2101      	movs	r1, #1
  403e2a:	f8c5 a088 	str.w	sl, [r5, #136]	; 0x88
  403e2e:	f8d4 7188 	ldr.w	r7, [r4, #392]	; 0x188
  403e32:	fa01 f200 	lsl.w	r2, r1, r0
  403e36:	4317      	orrs	r7, r2
  403e38:	2e02      	cmp	r6, #2
  403e3a:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
  403e3e:	f8c5 9108 	str.w	r9, [r5, #264]	; 0x108
  403e42:	d01e      	beq.n	403e82 <__register_exitproc+0x7e>
  403e44:	3002      	adds	r0, #2
  403e46:	6063      	str	r3, [r4, #4]
  403e48:	f844 8020 	str.w	r8, [r4, r0, lsl #2]
  403e4c:	2000      	movs	r0, #0
  403e4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  403e52:	4b14      	ldr	r3, [pc, #80]	; (403ea4 <__register_exitproc+0xa0>)
  403e54:	b303      	cbz	r3, 403e98 <__register_exitproc+0x94>
  403e56:	f44f 70c8 	mov.w	r0, #400	; 0x190
  403e5a:	f7ff fbd7 	bl	40360c <malloc>
  403e5e:	4604      	mov	r4, r0
  403e60:	b1d0      	cbz	r0, 403e98 <__register_exitproc+0x94>
  403e62:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
  403e66:	2700      	movs	r7, #0
  403e68:	e880 0088 	stmia.w	r0, {r3, r7}
  403e6c:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  403e70:	4638      	mov	r0, r7
  403e72:	2301      	movs	r3, #1
  403e74:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
  403e78:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
  403e7c:	2e00      	cmp	r6, #0
  403e7e:	d0e1      	beq.n	403e44 <__register_exitproc+0x40>
  403e80:	e7d0      	b.n	403e24 <__register_exitproc+0x20>
  403e82:	f8d4 118c 	ldr.w	r1, [r4, #396]	; 0x18c
  403e86:	430a      	orrs	r2, r1
  403e88:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
  403e8c:	e7da      	b.n	403e44 <__register_exitproc+0x40>
  403e8e:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
  403e92:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  403e96:	e7c0      	b.n	403e1a <__register_exitproc+0x16>
  403e98:	f04f 30ff 	mov.w	r0, #4294967295
  403e9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  403ea0:	00403eb4 	.word	0x00403eb4
  403ea4:	0040360d 	.word	0x0040360d
  403ea8:	30303030 	.word	0x30303030
  403eac:	00000031 	.word	0x00000031
  403eb0:	00000043 	.word	0x00000043

00403eb4 <_global_impure_ptr>:
  403eb4:	200000c0                                ... 

00403eb8 <_init>:
  403eb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  403eba:	bf00      	nop
  403ebc:	bcf8      	pop	{r3, r4, r5, r6, r7}
  403ebe:	bc08      	pop	{r3}
  403ec0:	469e      	mov	lr, r3
  403ec2:	4770      	bx	lr

00403ec4 <__init_array_start>:
  403ec4:	00403b6d 	.word	0x00403b6d

00403ec8 <__frame_dummy_init_array_entry>:
  403ec8:	004000f1                                ..@.

00403ecc <_fini>:
  403ecc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  403ece:	bf00      	nop
  403ed0:	bcf8      	pop	{r3, r4, r5, r6, r7}
  403ed2:	bc08      	pop	{r3}
  403ed4:	469e      	mov	lr, r3
  403ed6:	4770      	bx	lr

00403ed8 <__fini_array_start>:
  403ed8:	004000cd 	.word	0x004000cd
