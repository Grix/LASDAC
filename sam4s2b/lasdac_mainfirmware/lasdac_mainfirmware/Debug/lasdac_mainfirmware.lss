
lasdac_mainfirmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000318c  00400000  00400000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000004e0  20000000  0040318c  00010000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000bcc8  200004e0  0040366c  000104e0  2**2
                  ALLOC
  3 .stack        00003000  2000c1a8  0040f334  000104e0  2**0
                  ALLOC
  4 .ARM.attributes 0000002a  00000000  00000000  000104e0  2**0
                  CONTENTS, READONLY
  5 .comment      0000005b  00000000  00000000  0001050a  2**0
                  CONTENTS, READONLY
  6 .debug_info   0000d1fe  00000000  00000000  00010565  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000022eb  00000000  00000000  0001d763  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000562a  00000000  00000000  0001fa4e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000008a0  00000000  00000000  00025078  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000878  00000000  00000000  00025918  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00005877  00000000  00000000  00026190  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000b870  00000000  00000000  0002ba07  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000510df  00000000  00000000  00037277  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  0000149c  00000000  00000000  00088358  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <_sfixed>:
  400000:	2000f1a8 	.word	0x2000f1a8
  400004:	00402801 	.word	0x00402801
  400008:	004027fd 	.word	0x004027fd
  40000c:	004027fd 	.word	0x004027fd
  400010:	004027fd 	.word	0x004027fd
  400014:	004027fd 	.word	0x004027fd
  400018:	004027fd 	.word	0x004027fd
	...
  40002c:	004027fd 	.word	0x004027fd
  400030:	004027fd 	.word	0x004027fd
  400034:	00000000 	.word	0x00000000
  400038:	004027fd 	.word	0x004027fd
  40003c:	00402cc1 	.word	0x00402cc1
  400040:	004027fd 	.word	0x004027fd
  400044:	004027fd 	.word	0x004027fd
  400048:	004027fd 	.word	0x004027fd
  40004c:	004027fd 	.word	0x004027fd
  400050:	004027fd 	.word	0x004027fd
  400054:	004027fd 	.word	0x004027fd
  400058:	004027fd 	.word	0x004027fd
  40005c:	00000000 	.word	0x00000000
  400060:	004027fd 	.word	0x004027fd
  400064:	004027fd 	.word	0x004027fd
  400068:	00000000 	.word	0x00000000
  40006c:	00400859 	.word	0x00400859
  400070:	0040086d 	.word	0x0040086d
  400074:	00000000 	.word	0x00000000
  400078:	004027fd 	.word	0x004027fd
  40007c:	004027fd 	.word	0x004027fd
	...
  400088:	004027fd 	.word	0x004027fd
  40008c:	004027fd 	.word	0x004027fd
  400090:	004027fd 	.word	0x004027fd
  400094:	004027fd 	.word	0x004027fd
  400098:	004027fd 	.word	0x004027fd
  40009c:	004027fd 	.word	0x004027fd
  4000a0:	004027fd 	.word	0x004027fd
  4000a4:	004027fd 	.word	0x004027fd
	...
  4000b4:	004027fd 	.word	0x004027fd
  4000b8:	004027fd 	.word	0x004027fd
  4000bc:	004027fd 	.word	0x004027fd
  4000c0:	004027fd 	.word	0x004027fd
  4000c4:	004027fd 	.word	0x004027fd
  4000c8:	00400f79 	.word	0x00400f79

004000cc <__do_global_dtors_aux>:
  4000cc:	b510      	push	{r4, lr}
  4000ce:	4c05      	ldr	r4, [pc, #20]	; (4000e4 <__do_global_dtors_aux+0x18>)
  4000d0:	7823      	ldrb	r3, [r4, #0]
  4000d2:	b933      	cbnz	r3, 4000e2 <__do_global_dtors_aux+0x16>
  4000d4:	4b04      	ldr	r3, [pc, #16]	; (4000e8 <__do_global_dtors_aux+0x1c>)
  4000d6:	b113      	cbz	r3, 4000de <__do_global_dtors_aux+0x12>
  4000d8:	4804      	ldr	r0, [pc, #16]	; (4000ec <__do_global_dtors_aux+0x20>)
  4000da:	f3af 8000 	nop.w
  4000de:	2301      	movs	r3, #1
  4000e0:	7023      	strb	r3, [r4, #0]
  4000e2:	bd10      	pop	{r4, pc}
  4000e4:	200004e0 	.word	0x200004e0
  4000e8:	00000000 	.word	0x00000000
  4000ec:	0040318c 	.word	0x0040318c

004000f0 <frame_dummy>:
  4000f0:	4b08      	ldr	r3, [pc, #32]	; (400114 <frame_dummy+0x24>)
  4000f2:	b510      	push	{r4, lr}
  4000f4:	b11b      	cbz	r3, 4000fe <frame_dummy+0xe>
  4000f6:	4808      	ldr	r0, [pc, #32]	; (400118 <frame_dummy+0x28>)
  4000f8:	4908      	ldr	r1, [pc, #32]	; (40011c <frame_dummy+0x2c>)
  4000fa:	f3af 8000 	nop.w
  4000fe:	4808      	ldr	r0, [pc, #32]	; (400120 <frame_dummy+0x30>)
  400100:	6803      	ldr	r3, [r0, #0]
  400102:	b903      	cbnz	r3, 400106 <frame_dummy+0x16>
  400104:	bd10      	pop	{r4, pc}
  400106:	4b07      	ldr	r3, [pc, #28]	; (400124 <frame_dummy+0x34>)
  400108:	2b00      	cmp	r3, #0
  40010a:	d0fb      	beq.n	400104 <frame_dummy+0x14>
  40010c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  400110:	4718      	bx	r3
  400112:	bf00      	nop
  400114:	00000000 	.word	0x00000000
  400118:	0040318c 	.word	0x0040318c
  40011c:	200004e4 	.word	0x200004e4
  400120:	0040318c 	.word	0x0040318c
  400124:	00000000 	.word	0x00000000

00400128 <udi_vendor_disable>:
	return true;
}


void udi_vendor_disable(void)
{
  400128:	4770      	bx	lr
  40012a:	bf00      	nop

0040012c <udi_vendor_setup>:
				&& (0 != udd_g_ctrlreq.req.wLength)) {
			return UDI_VENDOR_SETUP_OUT_RECEIVED();
		}
	}
	return false; // Not supported request
}
  40012c:	2000      	movs	r0, #0
  40012e:	4770      	bx	lr

00400130 <udi_vendor_getsetting>:

uint8_t udi_vendor_getsetting(void)
{
	return udi_vendor_alternate_setting;
}
  400130:	4b01      	ldr	r3, [pc, #4]	; (400138 <udi_vendor_getsetting+0x8>)
  400132:	7818      	ldrb	r0, [r3, #0]
  400134:	4770      	bx	lr
  400136:	bf00      	nop
  400138:	200004fc 	.word	0x200004fc

0040013c <udi_vendor_enable>:
/**
 * \name Internal routines
 */
//@{
bool udi_vendor_enable(void)
{
  40013c:	b508      	push	{r3, lr}
	udi_vendor_alternate_setting = udc_get_interface_desc()->bAlternateSetting;
  40013e:	4b03      	ldr	r3, [pc, #12]	; (40014c <udi_vendor_enable+0x10>)
  400140:	4798      	blx	r3
  400142:	78c2      	ldrb	r2, [r0, #3]
  400144:	4b02      	ldr	r3, [pc, #8]	; (400150 <udi_vendor_enable+0x14>)
  400146:	701a      	strb	r2, [r3, #0]
		if (!UDI_VENDOR_ENABLE_EXT()) {
			return false;
		}
	}
	return true;
}
  400148:	2001      	movs	r0, #1
  40014a:	bd08      	pop	{r3, pc}
  40014c:	00400315 	.word	0x00400315
  400150:	200004fc 	.word	0x200004fc

00400154 <udi_vendor_interrupt_out_run>:
 *
 * \return \c 1 if function was successfully done, otherwise \c 0.
 */
bool udi_vendor_interrupt_out_run(uint8_t * buf, iram_size_t buf_size,
		udd_callback_trans_t callback)
{
  400154:	b510      	push	{r4, lr}
  400156:	b082      	sub	sp, #8
  400158:	4604      	mov	r4, r0
  40015a:	460b      	mov	r3, r1
	return udd_ep_run(UDI_VENDOR_EP_INTERRUPT_OUT,
  40015c:	9200      	str	r2, [sp, #0]
  40015e:	2006      	movs	r0, #6
  400160:	2100      	movs	r1, #0
  400162:	4622      	mov	r2, r4
  400164:	4c01      	ldr	r4, [pc, #4]	; (40016c <udi_vendor_interrupt_out_run+0x18>)
  400166:	47a0      	blx	r4
			false,
			buf,
			buf_size,
			callback);
}
  400168:	b002      	add	sp, #8
  40016a:	bd10      	pop	{r4, pc}
  40016c:	00401f55 	.word	0x00401f55

00400170 <udi_vendor_bulk_out_run>:
 *
 * \return \c 1 if function was successfully done, otherwise \c 0.
 */
bool udi_vendor_bulk_out_run(uint8_t * buf, iram_size_t buf_size,
		udd_callback_trans_t callback)
{
  400170:	b510      	push	{r4, lr}
  400172:	b082      	sub	sp, #8
  400174:	4604      	mov	r4, r0
  400176:	460b      	mov	r3, r1
	return udd_ep_run(UDI_VENDOR_EP_BULK_OUT,
  400178:	9200      	str	r2, [sp, #0]
  40017a:	2002      	movs	r0, #2
  40017c:	2100      	movs	r1, #0
  40017e:	4622      	mov	r2, r4
  400180:	4c01      	ldr	r4, [pc, #4]	; (400188 <udi_vendor_bulk_out_run+0x18>)
  400182:	47a0      	blx	r4
			false,
			buf,
			buf_size,
			callback);
}
  400184:	b002      	add	sp, #8
  400186:	bd10      	pop	{r4, pc}
  400188:	00401f55 	.word	0x00401f55

0040018c <udc_next_desc_in_iface>:
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
			udc_ptr_conf->desc +
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
  40018c:	4b0f      	ldr	r3, [pc, #60]	; (4001cc <udc_next_desc_in_iface+0x40>)
  40018e:	681b      	ldr	r3, [r3, #0]
  400190:	681a      	ldr	r2, [r3, #0]
 *
 * \return address after the last byte of USB Configuration descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
  400192:	8853      	ldrh	r3, [r2, #2]
  400194:	441a      	add	r2, r3
{
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_eof_desc;

	ptr_eof_desc = udc_get_eof_conf();
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
  400196:	7803      	ldrb	r3, [r0, #0]
  400198:	4418      	add	r0, r3
			desc->bLength);
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
  40019a:	4290      	cmp	r0, r2
  40019c:	d210      	bcs.n	4001c0 <udc_next_desc_in_iface+0x34>
		// If new interface descriptor is found,
		// then it is the end of the current global interface descriptor
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
  40019e:	7843      	ldrb	r3, [r0, #1]
  4001a0:	2b04      	cmp	r3, #4
  4001a2:	d00f      	beq.n	4001c4 <udc_next_desc_in_iface+0x38>
			break; // End of global interface descriptor
		}
		if (desc_id == desc->bDescriptorType) {
  4001a4:	428b      	cmp	r3, r1
  4001a6:	d105      	bne.n	4001b4 <udc_next_desc_in_iface+0x28>
  4001a8:	4770      	bx	lr
			desc->bLength);
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
		// If new interface descriptor is found,
		// then it is the end of the current global interface descriptor
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
  4001aa:	7843      	ldrb	r3, [r0, #1]
  4001ac:	2b04      	cmp	r3, #4
  4001ae:	d00b      	beq.n	4001c8 <udc_next_desc_in_iface+0x3c>
			break; // End of global interface descriptor
		}
		if (desc_id == desc->bDescriptorType) {
  4001b0:	428b      	cmp	r3, r1
  4001b2:	d00a      	beq.n	4001ca <udc_next_desc_in_iface+0x3e>
			return desc; // Specific descriptor found
		}
		// Go to next descriptor
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
  4001b4:	7803      	ldrb	r3, [r0, #0]
  4001b6:	4418      	add	r0, r3
	ptr_eof_desc = udc_get_eof_conf();
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
			desc->bLength);
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
  4001b8:	4290      	cmp	r0, r2
  4001ba:	d3f6      	bcc.n	4001aa <udc_next_desc_in_iface+0x1e>
		}
		// Go to next descriptor
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
				desc->bLength);
	}
	return NULL; // No specific descriptor found
  4001bc:	2000      	movs	r0, #0
  4001be:	4770      	bx	lr
  4001c0:	2000      	movs	r0, #0
  4001c2:	4770      	bx	lr
  4001c4:	2000      	movs	r0, #0
  4001c6:	4770      	bx	lr
  4001c8:	2000      	movs	r0, #0
}
  4001ca:	4770      	bx	lr
  4001cc:	20000500 	.word	0x20000500

004001d0 <udc_valid_address>:
/**
 * \brief Change the address of device
 * Callback called at the end of request set address
 */
static void udc_valid_address(void)
{
  4001d0:	b508      	push	{r3, lr}
	udd_set_address(udd_g_ctrlreq.req.wValue & 0x7F);
  4001d2:	4b03      	ldr	r3, [pc, #12]	; (4001e0 <udc_valid_address+0x10>)
  4001d4:	7898      	ldrb	r0, [r3, #2]
  4001d6:	f000 007f 	and.w	r0, r0, #127	; 0x7f
  4001da:	4b02      	ldr	r3, [pc, #8]	; (4001e4 <udc_valid_address+0x14>)
  4001dc:	4798      	blx	r3
  4001de:	bd08      	pop	{r3, pc}
  4001e0:	200005f0 	.word	0x200005f0
  4001e4:	00401b69 	.word	0x00401b69

004001e8 <udc_update_iface_desc>:
 */
static bool udc_update_iface_desc(uint8_t iface_num, uint8_t setting_num)
{
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_end_desc;

	if (0 == udc_num_configuration) {
  4001e8:	4b16      	ldr	r3, [pc, #88]	; (400244 <udc_update_iface_desc+0x5c>)
  4001ea:	781b      	ldrb	r3, [r3, #0]
  4001ec:	b30b      	cbz	r3, 400232 <udc_update_iface_desc+0x4a>
		return false;
	}

	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
  4001ee:	4b16      	ldr	r3, [pc, #88]	; (400248 <udc_update_iface_desc+0x60>)
  4001f0:	681b      	ldr	r3, [r3, #0]
  4001f2:	681b      	ldr	r3, [r3, #0]
  4001f4:	791a      	ldrb	r2, [r3, #4]
  4001f6:	4282      	cmp	r2, r0
  4001f8:	d91d      	bls.n	400236 <udc_update_iface_desc+0x4e>
 * \param setting_num   Setting number of interface to find
 *
 * \return 1 if found or 0 if not found
 */
static bool udc_update_iface_desc(uint8_t iface_num, uint8_t setting_num)
{
  4001fa:	b410      	push	{r4}
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
		return false;
	}

	// Start at the beginning of configuration descriptor
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
  4001fc:	4a13      	ldr	r2, [pc, #76]	; (40024c <udc_update_iface_desc+0x64>)
  4001fe:	6013      	str	r3, [r2, #0]
 *
 * \return address after the last byte of USB Configuration descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
  400200:	885c      	ldrh	r4, [r3, #2]
  400202:	441c      	add	r4, r3
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
			udc_ptr_conf->desc;

	// Check the end of configuration descriptor
	ptr_end_desc = udc_get_eof_conf();
	while (ptr_end_desc >
  400204:	42a3      	cmp	r3, r4
  400206:	d218      	bcs.n	40023a <udc_update_iface_desc+0x52>
			(UDC_DESC_STORAGE usb_conf_desc_t *) udc_ptr_iface) {
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
  400208:	785a      	ldrb	r2, [r3, #1]
  40020a:	2a04      	cmp	r2, #4
  40020c:	d109      	bne.n	400222 <udc_update_iface_desc+0x3a>
			// A interface descriptor is found
			// Check interface and alternate setting number
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
  40020e:	789a      	ldrb	r2, [r3, #2]
  400210:	4282      	cmp	r2, r0
  400212:	d106      	bne.n	400222 <udc_update_iface_desc+0x3a>
  400214:	78da      	ldrb	r2, [r3, #3]
  400216:	428a      	cmp	r2, r1
  400218:	d103      	bne.n	400222 <udc_update_iface_desc+0x3a>
  40021a:	4a0c      	ldr	r2, [pc, #48]	; (40024c <udc_update_iface_desc+0x64>)
  40021c:	6013      	str	r3, [r2, #0]
					(setting_num ==
					udc_ptr_iface->bAlternateSetting)) {
				return true; // Interface found
  40021e:	2001      	movs	r0, #1
  400220:	e00c      	b.n	40023c <udc_update_iface_desc+0x54>
			}
		}
		// Go to next descriptor
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
  400222:	781a      	ldrb	r2, [r3, #0]
  400224:	4413      	add	r3, r2
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
			udc_ptr_conf->desc;

	// Check the end of configuration descriptor
	ptr_end_desc = udc_get_eof_conf();
	while (ptr_end_desc >
  400226:	42a3      	cmp	r3, r4
  400228:	d3ee      	bcc.n	400208 <udc_update_iface_desc+0x20>
  40022a:	4a08      	ldr	r2, [pc, #32]	; (40024c <udc_update_iface_desc+0x64>)
  40022c:	6013      	str	r3, [r2, #0]
		// Go to next descriptor
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
				(uint8_t *) udc_ptr_iface +
				udc_ptr_iface->bLength);
	}
	return false; // Interface not found
  40022e:	2000      	movs	r0, #0
  400230:	e004      	b.n	40023c <udc_update_iface_desc+0x54>
static bool udc_update_iface_desc(uint8_t iface_num, uint8_t setting_num)
{
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_end_desc;

	if (0 == udc_num_configuration) {
		return false;
  400232:	2000      	movs	r0, #0
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
				(uint8_t *) udc_ptr_iface +
				udc_ptr_iface->bLength);
	}
	return false; // Interface not found
}
  400234:	4770      	bx	lr
	if (0 == udc_num_configuration) {
		return false;
	}

	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
		return false;
  400236:	2000      	movs	r0, #0
  400238:	4770      	bx	lr
		// Go to next descriptor
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
				(uint8_t *) udc_ptr_iface +
				udc_ptr_iface->bLength);
	}
	return false; // Interface not found
  40023a:	2000      	movs	r0, #0
}
  40023c:	f85d 4b04 	ldr.w	r4, [sp], #4
  400240:	4770      	bx	lr
  400242:	bf00      	nop
  400244:	20000508 	.word	0x20000508
  400248:	20000500 	.word	0x20000500
  40024c:	2000050c 	.word	0x2000050c

00400250 <udc_iface_disable>:
 * \param iface_num     Interface number to disable
 *
 * \return 1 if it is done or 0 if interface is not found
 */
static bool udc_iface_disable(uint8_t iface_num)
{
  400250:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  400254:	4604      	mov	r4, r0
	udi_api_t UDC_DESC_STORAGE *udi_api;

	// Select first alternate setting of the interface
	// to update udc_ptr_iface before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
  400256:	2100      	movs	r1, #0
  400258:	4b12      	ldr	r3, [pc, #72]	; (4002a4 <udc_iface_disable+0x54>)
  40025a:	4798      	blx	r3
  40025c:	4680      	mov	r8, r0
  40025e:	b1e8      	cbz	r0, 40029c <udc_iface_disable+0x4c>
		return false;
	}

	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
  400260:	4b11      	ldr	r3, [pc, #68]	; (4002a8 <udc_iface_disable+0x58>)
  400262:	681b      	ldr	r3, [r3, #0]
  400264:	685b      	ldr	r3, [r3, #4]
  400266:	f853 9024 	ldr.w	r9, [r3, r4, lsl #2]

#if (0!=USB_DEVICE_MAX_EP)
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
  40026a:	f8d9 300c 	ldr.w	r3, [r9, #12]
  40026e:	4798      	blx	r3
  400270:	4601      	mov	r1, r0
  400272:	4620      	mov	r0, r4
  400274:	4b0b      	ldr	r3, [pc, #44]	; (4002a4 <udc_iface_disable+0x54>)
  400276:	4798      	blx	r3
  400278:	4680      	mov	r8, r0
  40027a:	b178      	cbz	r0, 40029c <udc_iface_disable+0x4c>
	}

	// Start at the beginning of interface descriptor
	{
		usb_ep_desc_t UDC_DESC_STORAGE *ep_desc;
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
  40027c:	4b0b      	ldr	r3, [pc, #44]	; (4002ac <udc_iface_disable+0x5c>)
  40027e:	681c      	ldr	r4, [r3, #0]
		while (1) {
			// Search Endpoint descriptor included in global interface descriptor
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
  400280:	2605      	movs	r6, #5
  400282:	4d0b      	ldr	r5, [pc, #44]	; (4002b0 <udc_iface_disable+0x60>)
					ep_desc, USB_DT_ENDPOINT);
			if (NULL == ep_desc) {
				break;
			}
			// Free the endpoint used by the interface
			udd_ep_free(ep_desc->bEndpointAddress);
  400284:	4f0b      	ldr	r7, [pc, #44]	; (4002b4 <udc_iface_disable+0x64>)
	{
		usb_ep_desc_t UDC_DESC_STORAGE *ep_desc;
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
		while (1) {
			// Search Endpoint descriptor included in global interface descriptor
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
  400286:	4620      	mov	r0, r4
  400288:	4631      	mov	r1, r6
  40028a:	47a8      	blx	r5
					udc_next_desc_in_iface((UDC_DESC_STORAGE
					usb_conf_desc_t *)
					ep_desc, USB_DT_ENDPOINT);
			if (NULL == ep_desc) {
  40028c:	4604      	mov	r4, r0
  40028e:	b110      	cbz	r0, 400296 <udc_iface_disable+0x46>
				break;
			}
			// Free the endpoint used by the interface
			udd_ep_free(ep_desc->bEndpointAddress);
  400290:	7880      	ldrb	r0, [r0, #2]
  400292:	47b8      	blx	r7
		}
  400294:	e7f7      	b.n	400286 <udc_iface_disable+0x36>
	}
#endif

	// Disable interface
	udi_api->disable();
  400296:	f8d9 3004 	ldr.w	r3, [r9, #4]
  40029a:	4798      	blx	r3
	return true;
}
  40029c:	4640      	mov	r0, r8
  40029e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4002a2:	bf00      	nop
  4002a4:	004001e9 	.word	0x004001e9
  4002a8:	20000500 	.word	0x20000500
  4002ac:	2000050c 	.word	0x2000050c
  4002b0:	0040018d 	.word	0x0040018d
  4002b4:	00401cd1 	.word	0x00401cd1

004002b8 <udc_iface_enable>:
 * \param setting_num   Setting number to enable
 *
 * \return 1 if it is done or 0 if interface is not found
 */
static bool udc_iface_enable(uint8_t iface_num, uint8_t setting_num)
{
  4002b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4002bc:	4680      	mov	r8, r0
	// Select the interface descriptor
	if (!udc_update_iface_desc(iface_num, setting_num)) {
  4002be:	4b10      	ldr	r3, [pc, #64]	; (400300 <udc_iface_enable+0x48>)
  4002c0:	4798      	blx	r3
  4002c2:	4603      	mov	r3, r0
  4002c4:	b1c8      	cbz	r0, 4002fa <udc_iface_enable+0x42>

#if (0!=USB_DEVICE_MAX_EP)
	usb_ep_desc_t UDC_DESC_STORAGE *ep_desc;

	// Start at the beginning of the global interface descriptor
	ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
  4002c6:	4b0f      	ldr	r3, [pc, #60]	; (400304 <udc_iface_enable+0x4c>)
  4002c8:	681c      	ldr	r4, [r3, #0]
	while (1) {
		// Search Endpoint descriptor included in the global interface descriptor
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
  4002ca:	2605      	movs	r6, #5
  4002cc:	4d0e      	ldr	r5, [pc, #56]	; (400308 <udc_iface_enable+0x50>)
						usb_conf_desc_t *) ep_desc,
				USB_DT_ENDPOINT);
		if (NULL == ep_desc)
			break;
		// Alloc the endpoint used by the interface
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
  4002ce:	4f0f      	ldr	r7, [pc, #60]	; (40030c <udc_iface_enable+0x54>)

	// Start at the beginning of the global interface descriptor
	ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
	while (1) {
		// Search Endpoint descriptor included in the global interface descriptor
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
  4002d0:	4620      	mov	r0, r4
  4002d2:	4631      	mov	r1, r6
  4002d4:	47a8      	blx	r5
				udc_next_desc_in_iface((UDC_DESC_STORAGE
						usb_conf_desc_t *) ep_desc,
				USB_DT_ENDPOINT);
		if (NULL == ep_desc)
  4002d6:	4604      	mov	r4, r0
  4002d8:	b138      	cbz	r0, 4002ea <udc_iface_enable+0x32>
			break;
		// Alloc the endpoint used by the interface
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
  4002da:	7880      	ldrb	r0, [r0, #2]
  4002dc:	78e1      	ldrb	r1, [r4, #3]
  4002de:	88a2      	ldrh	r2, [r4, #4]
  4002e0:	47b8      	blx	r7
  4002e2:	4603      	mov	r3, r0
  4002e4:	2800      	cmp	r0, #0
  4002e6:	d1f3      	bne.n	4002d0 <udc_iface_enable+0x18>
  4002e8:	e007      	b.n	4002fa <udc_iface_enable+0x42>
			return false;
		}
	}
#endif
	// Enable the interface
	return udc_ptr_conf->udi_apis[iface_num]->enable();
  4002ea:	4b09      	ldr	r3, [pc, #36]	; (400310 <udc_iface_enable+0x58>)
  4002ec:	681b      	ldr	r3, [r3, #0]
  4002ee:	685b      	ldr	r3, [r3, #4]
  4002f0:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
  4002f4:	681b      	ldr	r3, [r3, #0]
  4002f6:	4798      	blx	r3
  4002f8:	4603      	mov	r3, r0
}
  4002fa:	4618      	mov	r0, r3
  4002fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400300:	004001e9 	.word	0x004001e9
  400304:	2000050c 	.word	0x2000050c
  400308:	0040018d 	.word	0x0040018d
  40030c:	00401bc9 	.word	0x00401bc9
  400310:	20000500 	.word	0x20000500

00400314 <udc_get_interface_desc>:
//! @}

usb_iface_desc_t UDC_DESC_STORAGE *udc_get_interface_desc(void)
{
	return udc_ptr_iface;
}
  400314:	4b01      	ldr	r3, [pc, #4]	; (40031c <udc_get_interface_desc+0x8>)
  400316:	6818      	ldr	r0, [r3, #0]
  400318:	4770      	bx	lr
  40031a:	bf00      	nop
  40031c:	2000050c 	.word	0x2000050c

00400320 <udc_start>:
}

/*! \brief Start the USB Device stack
 */
void udc_start(void)
{
  400320:	b508      	push	{r3, lr}
	udd_enable();
  400322:	4b01      	ldr	r3, [pc, #4]	; (400328 <udc_start+0x8>)
  400324:	4798      	blx	r3
  400326:	bd08      	pop	{r3, pc}
  400328:	00401ad9 	.word	0x00401ad9

0040032c <udc_reset>:
/**
 * \brief Reset the current configuration of the USB device,
 * This routines can be called by UDD when a RESET on the USB line occurs.
 */
void udc_reset(void)
{
  40032c:	b570      	push	{r4, r5, r6, lr}
	uint8_t iface_num;

	if (udc_num_configuration) {
  40032e:	4b0d      	ldr	r3, [pc, #52]	; (400364 <udc_reset+0x38>)
  400330:	781b      	ldrb	r3, [r3, #0]
  400332:	b183      	cbz	r3, 400356 <udc_reset+0x2a>
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
  400334:	4b0c      	ldr	r3, [pc, #48]	; (400368 <udc_reset+0x3c>)
  400336:	681b      	ldr	r3, [r3, #0]
  400338:	681b      	ldr	r3, [r3, #0]
void udc_reset(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
  40033a:	791b      	ldrb	r3, [r3, #4]
  40033c:	b15b      	cbz	r3, 400356 <udc_reset+0x2a>
  40033e:	2400      	movs	r4, #0
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			udc_iface_disable(iface_num);
  400340:	4e0a      	ldr	r6, [pc, #40]	; (40036c <udc_reset+0x40>)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
  400342:	4d09      	ldr	r5, [pc, #36]	; (400368 <udc_reset+0x3c>)
				iface_num++) {
			udc_iface_disable(iface_num);
  400344:	4620      	mov	r0, r4
  400346:	47b0      	blx	r6
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
  400348:	3401      	adds	r4, #1
  40034a:	b2e4      	uxtb	r4, r4
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
  40034c:	682b      	ldr	r3, [r5, #0]
  40034e:	681b      	ldr	r3, [r3, #0]
void udc_reset(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
  400350:	791b      	ldrb	r3, [r3, #4]
  400352:	42a3      	cmp	r3, r4
  400354:	d8f6      	bhi.n	400344 <udc_reset+0x18>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			udc_iface_disable(iface_num);
		}
	}
	udc_num_configuration = 0;
  400356:	2300      	movs	r3, #0
  400358:	4a02      	ldr	r2, [pc, #8]	; (400364 <udc_reset+0x38>)
  40035a:	7013      	strb	r3, [r2, #0]
	if (CPU_TO_LE16(USB_DEV_STATUS_REMOTEWAKEUP) & udc_device_status) {
		// Remote wakeup is enabled then disable it
		UDC_REMOTEWAKEUP_DISABLE();
	}
#endif
	udc_device_status =
  40035c:	4a04      	ldr	r2, [pc, #16]	; (400370 <udc_reset+0x44>)
  40035e:	8013      	strh	r3, [r2, #0]
  400360:	bd70      	pop	{r4, r5, r6, pc}
  400362:	bf00      	nop
  400364:	20000508 	.word	0x20000508
  400368:	20000500 	.word	0x20000500
  40036c:	00400251 	.word	0x00400251
  400370:	20000506 	.word	0x20000506

00400374 <udc_sof_notify>:
			CPU_TO_LE16(USB_DEV_STATUS_BUS_POWERED);
#endif
}

void udc_sof_notify(void)
{
  400374:	b538      	push	{r3, r4, r5, lr}
	uint8_t iface_num;

	if (udc_num_configuration) {
  400376:	4b0c      	ldr	r3, [pc, #48]	; (4003a8 <udc_sof_notify+0x34>)
  400378:	781b      	ldrb	r3, [r3, #0]
  40037a:	b19b      	cbz	r3, 4003a4 <udc_sof_notify+0x30>
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
  40037c:	4b0b      	ldr	r3, [pc, #44]	; (4003ac <udc_sof_notify+0x38>)
  40037e:	681b      	ldr	r3, [r3, #0]
  400380:	681a      	ldr	r2, [r3, #0]
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
  400382:	7912      	ldrb	r2, [r2, #4]
  400384:	b172      	cbz	r2, 4003a4 <udc_sof_notify+0x30>
  400386:	2400      	movs	r4, #0
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
  400388:	4d08      	ldr	r5, [pc, #32]	; (4003ac <udc_sof_notify+0x38>)
				iface_num++) {
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
  40038a:	685b      	ldr	r3, [r3, #4]
  40038c:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
  400390:	691b      	ldr	r3, [r3, #16]
  400392:	b103      	cbz	r3, 400396 <udc_sof_notify+0x22>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
  400394:	4798      	blx	r3
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
  400396:	3401      	adds	r4, #1
  400398:	b2e4      	uxtb	r4, r4
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
  40039a:	682b      	ldr	r3, [r5, #0]
  40039c:	681a      	ldr	r2, [r3, #0]
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
  40039e:	7912      	ldrb	r2, [r2, #4]
  4003a0:	42a2      	cmp	r2, r4
  4003a2:	d8f2      	bhi.n	40038a <udc_sof_notify+0x16>
  4003a4:	bd38      	pop	{r3, r4, r5, pc}
  4003a6:	bf00      	nop
  4003a8:	20000508 	.word	0x20000508
  4003ac:	20000500 	.word	0x20000500

004003b0 <udc_process_setup>:
 * sent to a specific application callback.
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
  4003b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
  4003b2:	4b81      	ldr	r3, [pc, #516]	; (4005b8 <udc_process_setup+0x208>)
  4003b4:	2200      	movs	r2, #0
  4003b6:	819a      	strh	r2, [r3, #12]
	udd_g_ctrlreq.callback = NULL;
  4003b8:	611a      	str	r2, [r3, #16]
	udd_g_ctrlreq.over_under_run = NULL;
  4003ba:	615a      	str	r2, [r3, #20]

	if (Udd_setup_is_in()) {
  4003bc:	781b      	ldrb	r3, [r3, #0]
  4003be:	f013 0f80 	tst.w	r3, #128	; 0x80
  4003c2:	f000 81f0 	beq.w	4007a6 <udc_process_setup+0x3f6>
		if (udd_g_ctrlreq.req.wLength == 0) {
  4003c6:	4a7c      	ldr	r2, [pc, #496]	; (4005b8 <udc_process_setup+0x208>)
  4003c8:	88d2      	ldrh	r2, [r2, #6]
  4003ca:	2a00      	cmp	r2, #0
  4003cc:	f040 81e7 	bne.w	40079e <udc_process_setup+0x3ee>
  4003d0:	e1e1      	b.n	400796 <udc_process_setup+0x3e6>
		// GET Standard Requests
		if (udd_g_ctrlreq.req.wLength == 0) {
			return false; // Error for USB host
		}

		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
  4003d2:	f013 031f 	ands.w	r3, r3, #31
  4003d6:	f040 8082 	bne.w	4004de <udc_process_setup+0x12e>
			// Standard Get Device request
			switch (udd_g_ctrlreq.req.bRequest) {
  4003da:	4977      	ldr	r1, [pc, #476]	; (4005b8 <udc_process_setup+0x208>)
  4003dc:	7849      	ldrb	r1, [r1, #1]
  4003de:	2906      	cmp	r1, #6
  4003e0:	d00b      	beq.n	4003fa <udc_process_setup+0x4a>
  4003e2:	2908      	cmp	r1, #8
  4003e4:	d073      	beq.n	4004ce <udc_process_setup+0x11e>
  4003e6:	2900      	cmp	r1, #0
  4003e8:	d179      	bne.n	4004de <udc_process_setup+0x12e>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_status(void)
{
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
  4003ea:	2a02      	cmp	r2, #2
  4003ec:	f040 8183 	bne.w	4006f6 <udc_process_setup+0x346>
		return false;
	}

	udd_set_setup_payload( (uint8_t *) & udc_device_status,
  4003f0:	4872      	ldr	r0, [pc, #456]	; (4005bc <udc_process_setup+0x20c>)
  4003f2:	2102      	movs	r1, #2
  4003f4:	4b72      	ldr	r3, [pc, #456]	; (4005c0 <udc_process_setup+0x210>)
  4003f6:	4798      	blx	r3
  4003f8:	e1dc      	b.n	4007b4 <udc_process_setup+0x404>
 */
static bool udc_req_std_dev_get_descriptor(void)
{
	uint8_t conf_num;

	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
  4003fa:	4b6f      	ldr	r3, [pc, #444]	; (4005b8 <udc_process_setup+0x208>)
  4003fc:	885a      	ldrh	r2, [r3, #2]

	// Check descriptor ID
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
  4003fe:	0a13      	lsrs	r3, r2, #8
  400400:	3b01      	subs	r3, #1
  400402:	2b0e      	cmp	r3, #14
  400404:	f200 816e 	bhi.w	4006e4 <udc_process_setup+0x334>
  400408:	e8df f013 	tbh	[pc, r3, lsl #1]
  40040c:	0016000f 	.word	0x0016000f
  400410:	016c0034 	.word	0x016c0034
  400414:	016c016c 	.word	0x016c016c
  400418:	016c016c 	.word	0x016c016c
  40041c:	016c016c 	.word	0x016c016c
  400420:	016c016c 	.word	0x016c016c
  400424:	016c016c 	.word	0x016c016c
  400428:	002a      	.short	0x002a
		} else
#endif
		{
			udd_set_setup_payload(
				(uint8_t *) udc_config.confdev_lsfs,
				udc_config.confdev_lsfs->bLength);
  40042a:	4b66      	ldr	r3, [pc, #408]	; (4005c4 <udc_process_setup+0x214>)
  40042c:	681b      	ldr	r3, [r3, #0]
				(uint8_t *) udc_config.confdev_hs,
				udc_config.confdev_hs->bLength);
		} else
#endif
		{
			udd_set_setup_payload(
  40042e:	4618      	mov	r0, r3
  400430:	7819      	ldrb	r1, [r3, #0]
  400432:	4b63      	ldr	r3, [pc, #396]	; (4005c0 <udc_process_setup+0x210>)
  400434:	4798      	blx	r3
  400436:	e041      	b.n	4004bc <udc_process_setup+0x10c>
 */
static bool udc_req_std_dev_get_descriptor(void)
{
	uint8_t conf_num;

	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
  400438:	b2d2      	uxtb	r2, r2
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
		} else
#endif
		{
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
  40043a:	4b62      	ldr	r3, [pc, #392]	; (4005c4 <udc_process_setup+0x214>)
  40043c:	681b      	ldr	r3, [r3, #0]
  40043e:	7c5b      	ldrb	r3, [r3, #17]
  400440:	4293      	cmp	r3, r2
  400442:	f240 8158 	bls.w	4006f6 <udc_process_setup+0x346>
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
  400446:	4b5f      	ldr	r3, [pc, #380]	; (4005c4 <udc_process_setup+0x214>)
  400448:	685b      	ldr	r3, [r3, #4]
  40044a:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
  40044e:	4618      	mov	r0, r3
  400450:	8859      	ldrh	r1, [r3, #2]
  400452:	4b5b      	ldr	r3, [pc, #364]	; (4005c0 <udc_process_setup+0x210>)
  400454:	4798      	blx	r3
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
		}
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
  400456:	4b58      	ldr	r3, [pc, #352]	; (4005b8 <udc_process_setup+0x208>)
  400458:	689b      	ldr	r3, [r3, #8]
  40045a:	2202      	movs	r2, #2
  40045c:	705a      	strb	r2, [r3, #1]
  40045e:	e02d      	b.n	4004bc <udc_process_setup+0x10c>
		break;
#endif

	case USB_DT_BOS:
		// Device BOS descriptor requested
		if (udc_config.conf_bos == NULL) {
  400460:	4b58      	ldr	r3, [pc, #352]	; (4005c4 <udc_process_setup+0x214>)
  400462:	689b      	ldr	r3, [r3, #8]
  400464:	2b00      	cmp	r3, #0
  400466:	f000 8146 	beq.w	4006f6 <udc_process_setup+0x346>
			return false;
		}
		udd_set_setup_payload( (uint8_t *) udc_config.conf_bos,
  40046a:	4618      	mov	r0, r3
  40046c:	8859      	ldrh	r1, [r3, #2]
  40046e:	4b54      	ldr	r3, [pc, #336]	; (4005c0 <udc_process_setup+0x210>)
  400470:	4798      	blx	r3
  400472:	e023      	b.n	4004bc <udc_process_setup+0x10c>
	uint8_t i;
	const uint8_t *str;
	uint8_t str_length = 0;

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
  400474:	b2d2      	uxtb	r2, r2
  400476:	2a03      	cmp	r2, #3
  400478:	f200 813d 	bhi.w	4006f6 <udc_process_setup+0x346>
  40047c:	e8df f012 	tbh	[pc, r2, lsl #1]
  400480:	000c0007 	.word	0x000c0007
  400484:	00040197 	.word	0x00040197
		str = udc_string_product_name;
		break;
#endif
#if defined USB_DEVICE_SERIAL_NAME || defined USB_DEVICE_GET_SERIAL_NAME_POINTER
	case 3:
		str_length = USB_DEVICE_SERIAL_NAME_SIZE;
  400488:	2205      	movs	r2, #5
		str = udc_get_string_serial_name();
  40048a:	4b4f      	ldr	r3, [pc, #316]	; (4005c8 <udc_process_setup+0x218>)
  40048c:	e006      	b.n	40049c <udc_process_setup+0xec>
	uint8_t str_length = 0;

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
	case 0:
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
  40048e:	484f      	ldr	r0, [pc, #316]	; (4005cc <udc_process_setup+0x21c>)
  400490:	2104      	movs	r1, #4
  400492:	4b4b      	ldr	r3, [pc, #300]	; (4005c0 <udc_process_setup+0x210>)
  400494:	4798      	blx	r3
  400496:	e011      	b.n	4004bc <udc_process_setup+0x10c>
		break;

#ifdef USB_DEVICE_MANUFACTURE_NAME
	case 1:
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
		str = udc_string_manufacturer_name;
  400498:	4b4d      	ldr	r3, [pc, #308]	; (4005d0 <udc_process_setup+0x220>)
				sizeof(udc_string_desc_languageid));
		break;

#ifdef USB_DEVICE_MANUFACTURE_NAME
	case 1:
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
  40049a:	2203      	movs	r2, #3
  40049c:	461c      	mov	r4, r3
  40049e:	484d      	ldr	r0, [pc, #308]	; (4005d4 <udc_process_setup+0x224>)
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
  4004a0:	f813 1b01 	ldrb.w	r1, [r3], #1
  4004a4:	f820 1f02 	strh.w	r1, [r0, #2]!
  4004a8:	1b19      	subs	r1, r3, r4
#endif
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
  4004aa:	b2c9      	uxtb	r1, r1
  4004ac:	4291      	cmp	r1, r2
  4004ae:	d3f7      	bcc.n	4004a0 <udc_process_setup+0xf0>
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
		}

		udc_string_desc.header.bLength = 2 + (str_length) * 2;
  4004b0:	0052      	lsls	r2, r2, #1
  4004b2:	1c91      	adds	r1, r2, #2
  4004b4:	4847      	ldr	r0, [pc, #284]	; (4005d4 <udc_process_setup+0x224>)
  4004b6:	7001      	strb	r1, [r0, #0]
		udd_set_setup_payload(
  4004b8:	4b41      	ldr	r3, [pc, #260]	; (4005c0 <udc_process_setup+0x210>)
  4004ba:	4798      	blx	r3
	default:
		// Unknown descriptor requested
		return false;
	}
	// if the descriptor is larger than length requested, then reduce it
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
  4004bc:	4b3e      	ldr	r3, [pc, #248]	; (4005b8 <udc_process_setup+0x208>)
  4004be:	88da      	ldrh	r2, [r3, #6]
  4004c0:	899b      	ldrh	r3, [r3, #12]
  4004c2:	4293      	cmp	r3, r2
  4004c4:	f240 8176 	bls.w	4007b4 <udc_process_setup+0x404>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
  4004c8:	4b3b      	ldr	r3, [pc, #236]	; (4005b8 <udc_process_setup+0x208>)
  4004ca:	819a      	strh	r2, [r3, #12]
  4004cc:	e172      	b.n	4007b4 <udc_process_setup+0x404>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_configuration(void)
{
	if (udd_g_ctrlreq.req.wLength != 1) {
  4004ce:	2a01      	cmp	r2, #1
  4004d0:	f040 8111 	bne.w	4006f6 <udc_process_setup+0x346>
		return false;
	}

	udd_set_setup_payload(&udc_num_configuration,1);
  4004d4:	4840      	ldr	r0, [pc, #256]	; (4005d8 <udc_process_setup+0x228>)
  4004d6:	2101      	movs	r1, #1
  4004d8:	4b39      	ldr	r3, [pc, #228]	; (4005c0 <udc_process_setup+0x210>)
  4004da:	4798      	blx	r3
  4004dc:	e16a      	b.n	4007b4 <udc_process_setup+0x404>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
  4004de:	2b01      	cmp	r3, #1
  4004e0:	d127      	bne.n	400532 <udc_process_setup+0x182>
			// Standard Get Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
  4004e2:	4935      	ldr	r1, [pc, #212]	; (4005b8 <udc_process_setup+0x208>)
  4004e4:	7849      	ldrb	r1, [r1, #1]
  4004e6:	290a      	cmp	r1, #10
  4004e8:	d123      	bne.n	400532 <udc_process_setup+0x182>
static bool udc_req_std_iface_get_setting(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (udd_g_ctrlreq.req.wLength != 1) {
  4004ea:	2a01      	cmp	r2, #1
  4004ec:	f040 8103 	bne.w	4006f6 <udc_process_setup+0x346>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
  4004f0:	4b39      	ldr	r3, [pc, #228]	; (4005d8 <udc_process_setup+0x228>)
  4004f2:	781b      	ldrb	r3, [r3, #0]
  4004f4:	2b00      	cmp	r3, #0
  4004f6:	f000 80fe 	beq.w	4006f6 <udc_process_setup+0x346>
		return false; // The device is not is configured state yet
	}

	// Check the interface number included in the request
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
  4004fa:	4b2f      	ldr	r3, [pc, #188]	; (4005b8 <udc_process_setup+0x208>)
  4004fc:	791c      	ldrb	r4, [r3, #4]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
  4004fe:	4b37      	ldr	r3, [pc, #220]	; (4005dc <udc_process_setup+0x22c>)
  400500:	681d      	ldr	r5, [r3, #0]
  400502:	682b      	ldr	r3, [r5, #0]
  400504:	791b      	ldrb	r3, [r3, #4]
  400506:	42a3      	cmp	r3, r4
  400508:	f240 80f5 	bls.w	4006f6 <udc_process_setup+0x346>
		return false;
	}

	// Select first alternate setting of the interface to update udc_ptr_iface
	// before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
  40050c:	4620      	mov	r0, r4
  40050e:	2100      	movs	r1, #0
  400510:	4b33      	ldr	r3, [pc, #204]	; (4005e0 <udc_process_setup+0x230>)
  400512:	4798      	blx	r3
  400514:	2800      	cmp	r0, #0
  400516:	f000 80ee 	beq.w	4006f6 <udc_process_setup+0x346>
		return false;
	}
	// Get alternate setting from UDI
	udi_api = udc_ptr_conf->udi_apis[iface_num];
  40051a:	686b      	ldr	r3, [r5, #4]
	udc_iface_setting = udi_api->getsetting();
  40051c:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
  400520:	68db      	ldr	r3, [r3, #12]
  400522:	4798      	blx	r3
  400524:	4b2f      	ldr	r3, [pc, #188]	; (4005e4 <udc_process_setup+0x234>)
  400526:	7018      	strb	r0, [r3, #0]

	// Link value to payload pointer of request
	udd_set_setup_payload(&udc_iface_setting,1);
  400528:	4618      	mov	r0, r3
  40052a:	2101      	movs	r1, #1
  40052c:	4b24      	ldr	r3, [pc, #144]	; (4005c0 <udc_process_setup+0x210>)
  40052e:	4798      	blx	r3
  400530:	e140      	b.n	4007b4 <udc_process_setup+0x404>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
  400532:	2b02      	cmp	r3, #2
  400534:	f040 80df 	bne.w	4006f6 <udc_process_setup+0x346>
			// Standard Get Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
  400538:	4b1f      	ldr	r3, [pc, #124]	; (4005b8 <udc_process_setup+0x208>)
  40053a:	785b      	ldrb	r3, [r3, #1]
  40053c:	2b00      	cmp	r3, #0
  40053e:	f040 80d3 	bne.w	4006e8 <udc_process_setup+0x338>
 */
static bool udc_req_std_ep_get_status(void)
{
	static le16_t udc_ep_status;

	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
  400542:	2a02      	cmp	r2, #2
  400544:	f040 80d7 	bne.w	4006f6 <udc_process_setup+0x346>
		return false;
	}

	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
  400548:	4b1b      	ldr	r3, [pc, #108]	; (4005b8 <udc_process_setup+0x208>)
  40054a:	7918      	ldrb	r0, [r3, #4]
  40054c:	4b26      	ldr	r3, [pc, #152]	; (4005e8 <udc_process_setup+0x238>)
  40054e:	4798      	blx	r3
  400550:	4b26      	ldr	r3, [pc, #152]	; (4005ec <udc_process_setup+0x23c>)
  400552:	8018      	strh	r0, [r3, #0]
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;

	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
  400554:	4618      	mov	r0, r3
  400556:	2102      	movs	r1, #2
  400558:	4b19      	ldr	r3, [pc, #100]	; (4005c0 <udc_process_setup+0x210>)
  40055a:	4798      	blx	r3
  40055c:	e12a      	b.n	4007b4 <udc_process_setup+0x404>
			}
		}
#endif
	} else {
		// SET Standard Requests
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
  40055e:	f013 031f 	ands.w	r3, r3, #31
  400562:	d17f      	bne.n	400664 <udc_process_setup+0x2b4>
			// Standard Set Device request
			switch (udd_g_ctrlreq.req.bRequest) {
  400564:	4a14      	ldr	r2, [pc, #80]	; (4005b8 <udc_process_setup+0x208>)
  400566:	7852      	ldrb	r2, [r2, #1]
  400568:	3a01      	subs	r2, #1
  40056a:	2a08      	cmp	r2, #8
  40056c:	d87a      	bhi.n	400664 <udc_process_setup+0x2b4>
  40056e:	e8df f012 	tbh	[pc, r2, lsl #1]
  400572:	0012      	.short	0x0012
  400574:	00bd0079 	.word	0x00bd0079
  400578:	00090079 	.word	0x00090079
  40057c:	00790079 	.word	0x00790079
  400580:	00410079 	.word	0x00410079
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_address(void)
{
	if (udd_g_ctrlreq.req.wLength) {
  400584:	4b0c      	ldr	r3, [pc, #48]	; (4005b8 <udc_process_setup+0x208>)
  400586:	88db      	ldrh	r3, [r3, #6]
  400588:	2b00      	cmp	r3, #0
  40058a:	f040 80b4 	bne.w	4006f6 <udc_process_setup+0x346>
		return false;
	}

	// The address must be changed at the end of setup request after the handshake
	// then we use a callback to change address
	udd_g_ctrlreq.callback = udc_valid_address;
  40058e:	4a18      	ldr	r2, [pc, #96]	; (4005f0 <udc_process_setup+0x240>)
  400590:	4b09      	ldr	r3, [pc, #36]	; (4005b8 <udc_process_setup+0x208>)
  400592:	611a      	str	r2, [r3, #16]
  400594:	e10e      	b.n	4007b4 <udc_process_setup+0x404>
 *
 * \return true if success
 */
static bool udc_req_std_dev_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
  400596:	4b08      	ldr	r3, [pc, #32]	; (4005b8 <udc_process_setup+0x208>)
  400598:	88db      	ldrh	r3, [r3, #6]
  40059a:	2b00      	cmp	r3, #0
  40059c:	f040 80ab 	bne.w	4006f6 <udc_process_setup+0x346>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
  4005a0:	4b05      	ldr	r3, [pc, #20]	; (4005b8 <udc_process_setup+0x208>)
  4005a2:	885b      	ldrh	r3, [r3, #2]
  4005a4:	2b01      	cmp	r3, #1
  4005a6:	f040 80a6 	bne.w	4006f6 <udc_process_setup+0x346>
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
  4005aa:	4a04      	ldr	r2, [pc, #16]	; (4005bc <udc_process_setup+0x20c>)
  4005ac:	8813      	ldrh	r3, [r2, #0]
  4005ae:	f023 0302 	bic.w	r3, r3, #2
  4005b2:	8013      	strh	r3, [r2, #0]
  4005b4:	e0fe      	b.n	4007b4 <udc_process_setup+0x404>
  4005b6:	bf00      	nop
  4005b8:	200005f0 	.word	0x200005f0
  4005bc:	20000506 	.word	0x20000506
  4005c0:	00401bbd 	.word	0x00401bbd
  4005c4:	2000003c 	.word	0x2000003c
  4005c8:	00403158 	.word	0x00403158
  4005cc:	20000030 	.word	0x20000030
  4005d0:	2000001c 	.word	0x2000001c
  4005d4:	20000020 	.word	0x20000020
  4005d8:	20000508 	.word	0x20000508
  4005dc:	20000500 	.word	0x20000500
  4005e0:	004001e9 	.word	0x004001e9
  4005e4:	20000504 	.word	0x20000504
  4005e8:	00401d39 	.word	0x00401d39
  4005ec:	200004fe 	.word	0x200004fe
  4005f0:	004001d1 	.word	0x004001d1
static bool udc_req_std_dev_set_configuration(void)
{
	uint8_t iface_num;

	// Check request length
	if (udd_g_ctrlreq.req.wLength) {
  4005f4:	4b71      	ldr	r3, [pc, #452]	; (4007bc <udc_process_setup+0x40c>)
  4005f6:	88db      	ldrh	r3, [r3, #6]
  4005f8:	2b00      	cmp	r3, #0
  4005fa:	d17c      	bne.n	4006f6 <udc_process_setup+0x346>
		return false;
	}
	// Authorize configuration only if the address is valid
	if (!udd_getaddress()) {
  4005fc:	4b70      	ldr	r3, [pc, #448]	; (4007c0 <udc_process_setup+0x410>)
  4005fe:	4798      	blx	r3
  400600:	2800      	cmp	r0, #0
  400602:	d078      	beq.n	4006f6 <udc_process_setup+0x346>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
  400604:	4b6d      	ldr	r3, [pc, #436]	; (4007bc <udc_process_setup+0x40c>)
  400606:	789a      	ldrb	r2, [r3, #2]
				udc_config.confdev_lsfs->bNumConfigurations) {
  400608:	4b6e      	ldr	r3, [pc, #440]	; (4007c4 <udc_process_setup+0x414>)
  40060a:	681b      	ldr	r3, [r3, #0]
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
  40060c:	7c5b      	ldrb	r3, [r3, #17]
  40060e:	429a      	cmp	r2, r3
  400610:	dc71      	bgt.n	4006f6 <udc_process_setup+0x346>
			return false;
		}
	}

	// Reset current configuration
	udc_reset();
  400612:	4b6d      	ldr	r3, [pc, #436]	; (4007c8 <udc_process_setup+0x418>)
  400614:	4798      	blx	r3

	// Enable new configuration
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
  400616:	4b69      	ldr	r3, [pc, #420]	; (4007bc <udc_process_setup+0x40c>)
  400618:	789b      	ldrb	r3, [r3, #2]
  40061a:	4a6c      	ldr	r2, [pc, #432]	; (4007cc <udc_process_setup+0x41c>)
  40061c:	7013      	strb	r3, [r2, #0]
	if (udc_num_configuration == 0) {
  40061e:	2b00      	cmp	r3, #0
  400620:	f000 80c8 	beq.w	4007b4 <udc_process_setup+0x404>
		udc_ptr_conf = &udc_config.conf_hs[udc_num_configuration - 1];
	} else
#endif
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
  400624:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
  400628:	3b01      	subs	r3, #1
  40062a:	4a66      	ldr	r2, [pc, #408]	; (4007c4 <udc_process_setup+0x414>)
  40062c:	6852      	ldr	r2, [r2, #4]
  40062e:	eb02 00c3 	add.w	r0, r2, r3, lsl #3
  400632:	4967      	ldr	r1, [pc, #412]	; (4007d0 <udc_process_setup+0x420>)
  400634:	6008      	str	r0, [r1, #0]
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
  400636:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
  40063a:	791b      	ldrb	r3, [r3, #4]
  40063c:	2b00      	cmp	r3, #0
  40063e:	f000 80b9 	beq.w	4007b4 <udc_process_setup+0x404>
  400642:	2400      	movs	r4, #0
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
  400644:	4626      	mov	r6, r4
  400646:	4d63      	ldr	r5, [pc, #396]	; (4007d4 <udc_process_setup+0x424>)
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
  400648:	460f      	mov	r7, r1
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
  40064a:	4620      	mov	r0, r4
  40064c:	4631      	mov	r1, r6
  40064e:	47a8      	blx	r5
  400650:	2800      	cmp	r0, #0
  400652:	d050      	beq.n	4006f6 <udc_process_setup+0x346>
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
  400654:	3401      	adds	r4, #1
  400656:	b2e4      	uxtb	r4, r4
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
  400658:	683b      	ldr	r3, [r7, #0]
  40065a:	681b      	ldr	r3, [r3, #0]
  40065c:	791b      	ldrb	r3, [r3, #4]
  40065e:	42a3      	cmp	r3, r4
  400660:	d8f3      	bhi.n	40064a <udc_process_setup+0x29a>
  400662:	e0a7      	b.n	4007b4 <udc_process_setup+0x404>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
  400664:	2b01      	cmp	r3, #1
  400666:	d119      	bne.n	40069c <udc_process_setup+0x2ec>
			// Standard Set Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
  400668:	4a54      	ldr	r2, [pc, #336]	; (4007bc <udc_process_setup+0x40c>)
  40066a:	7852      	ldrb	r2, [r2, #1]
  40066c:	2a0b      	cmp	r2, #11
  40066e:	d115      	bne.n	40069c <udc_process_setup+0x2ec>
 */
static bool udc_req_std_iface_set_setting(void)
{
	uint8_t iface_num, setting_num;

	if (udd_g_ctrlreq.req.wLength) {
  400670:	4b52      	ldr	r3, [pc, #328]	; (4007bc <udc_process_setup+0x40c>)
  400672:	88db      	ldrh	r3, [r3, #6]
  400674:	2b00      	cmp	r3, #0
  400676:	d13e      	bne.n	4006f6 <udc_process_setup+0x346>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
  400678:	4b54      	ldr	r3, [pc, #336]	; (4007cc <udc_process_setup+0x41c>)
  40067a:	781b      	ldrb	r3, [r3, #0]
  40067c:	2b00      	cmp	r3, #0
  40067e:	d03a      	beq.n	4006f6 <udc_process_setup+0x346>
		return false; // The device is not is configured state yet
	}

	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
  400680:	4b4e      	ldr	r3, [pc, #312]	; (4007bc <udc_process_setup+0x40c>)
  400682:	791c      	ldrb	r4, [r3, #4]
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
  400684:	885d      	ldrh	r5, [r3, #2]

	// Disable current setting
	if (!udc_iface_disable(iface_num)) {
  400686:	4620      	mov	r0, r4
  400688:	4b53      	ldr	r3, [pc, #332]	; (4007d8 <udc_process_setup+0x428>)
  40068a:	4798      	blx	r3
  40068c:	2800      	cmp	r0, #0
  40068e:	d032      	beq.n	4006f6 <udc_process_setup+0x346>
		return false;
	}

	// Enable new setting
	return udc_iface_enable(iface_num, setting_num);
  400690:	4620      	mov	r0, r4
  400692:	b2e9      	uxtb	r1, r5
  400694:	4b4f      	ldr	r3, [pc, #316]	; (4007d4 <udc_process_setup+0x424>)
  400696:	4798      	blx	r3
  400698:	4603      	mov	r3, r0
  40069a:	e02a      	b.n	4006f2 <udc_process_setup+0x342>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
  40069c:	2b02      	cmp	r3, #2
  40069e:	d12a      	bne.n	4006f6 <udc_process_setup+0x346>
			// Standard Set Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
  4006a0:	4b46      	ldr	r3, [pc, #280]	; (4007bc <udc_process_setup+0x40c>)
  4006a2:	785b      	ldrb	r3, [r3, #1]
  4006a4:	2b01      	cmp	r3, #1
  4006a6:	d002      	beq.n	4006ae <udc_process_setup+0x2fe>
  4006a8:	2b03      	cmp	r3, #3
  4006aa:	d00c      	beq.n	4006c6 <udc_process_setup+0x316>
  4006ac:	e020      	b.n	4006f0 <udc_process_setup+0x340>
 *
 * \return true if success
 */
static bool udc_req_std_ep_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
  4006ae:	4b43      	ldr	r3, [pc, #268]	; (4007bc <udc_process_setup+0x40c>)
  4006b0:	88db      	ldrh	r3, [r3, #6]
  4006b2:	bb03      	cbnz	r3, 4006f6 <udc_process_setup+0x346>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
  4006b4:	4b41      	ldr	r3, [pc, #260]	; (4007bc <udc_process_setup+0x40c>)
  4006b6:	885b      	ldrh	r3, [r3, #2]
  4006b8:	b9eb      	cbnz	r3, 4006f6 <udc_process_setup+0x346>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
  4006ba:	4b40      	ldr	r3, [pc, #256]	; (4007bc <udc_process_setup+0x40c>)
  4006bc:	7918      	ldrb	r0, [r3, #4]
  4006be:	4b47      	ldr	r3, [pc, #284]	; (4007dc <udc_process_setup+0x42c>)
  4006c0:	4798      	blx	r3
  4006c2:	4603      	mov	r3, r0
  4006c4:	e015      	b.n	4006f2 <udc_process_setup+0x342>
 * \return true if success
 */
#if (0!=USB_DEVICE_MAX_EP)
static bool udc_req_std_ep_set_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
  4006c6:	4b3d      	ldr	r3, [pc, #244]	; (4007bc <udc_process_setup+0x40c>)
  4006c8:	88db      	ldrh	r3, [r3, #6]
  4006ca:	b9a3      	cbnz	r3, 4006f6 <udc_process_setup+0x346>
		return false;
	}
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
  4006cc:	4b3b      	ldr	r3, [pc, #236]	; (4007bc <udc_process_setup+0x40c>)
  4006ce:	885b      	ldrh	r3, [r3, #2]
  4006d0:	b98b      	cbnz	r3, 4006f6 <udc_process_setup+0x346>
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
  4006d2:	4c3a      	ldr	r4, [pc, #232]	; (4007bc <udc_process_setup+0x40c>)
  4006d4:	7920      	ldrb	r0, [r4, #4]
  4006d6:	4b42      	ldr	r3, [pc, #264]	; (4007e0 <udc_process_setup+0x430>)
  4006d8:	4798      	blx	r3
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
  4006da:	7920      	ldrb	r0, [r4, #4]
  4006dc:	4b41      	ldr	r3, [pc, #260]	; (4007e4 <udc_process_setup+0x434>)
  4006de:	4798      	blx	r3
  4006e0:	4603      	mov	r3, r0
  4006e2:	e006      	b.n	4006f2 <udc_process_setup+0x342>
		}
		break;

	default:
		// Unknown descriptor requested
		return false;
  4006e4:	2300      	movs	r3, #0
  4006e6:	e004      	b.n	4006f2 <udc_process_setup+0x342>
				break;
			}
		}
#endif
	}
	return false;
  4006e8:	2300      	movs	r3, #0
  4006ea:	e002      	b.n	4006f2 <udc_process_setup+0x342>
			case USB_REQ_SET_ADDRESS:
				return udc_req_std_dev_set_address();
			case USB_REQ_CLEAR_FEATURE:
				return udc_req_std_dev_clear_feature();
			case USB_REQ_SET_FEATURE:
				return udc_req_std_dev_set_feature();
  4006ec:	2300      	movs	r3, #0
  4006ee:	e000      	b.n	4006f2 <udc_process_setup+0x342>
				break;
			}
		}
#endif
	}
	return false;
  4006f0:	2300      	movs	r3, #0
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
		if (udc_reqstd()) {
  4006f2:	2b00      	cmp	r3, #0
  4006f4:	d15f      	bne.n	4007b6 <udc_process_setup+0x406>
			return true;
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
  4006f6:	4b31      	ldr	r3, [pc, #196]	; (4007bc <udc_process_setup+0x40c>)
  4006f8:	781b      	ldrb	r3, [r3, #0]
  4006fa:	f003 031f 	and.w	r3, r3, #31
  4006fe:	2b01      	cmp	r3, #1
  400700:	d11e      	bne.n	400740 <udc_process_setup+0x390>
static bool udc_req_iface(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
  400702:	4b32      	ldr	r3, [pc, #200]	; (4007cc <udc_process_setup+0x41c>)
  400704:	781b      	ldrb	r3, [r3, #0]
  400706:	b1db      	cbz	r3, 400740 <udc_process_setup+0x390>
		return false; // The device is not is configured state yet
	}
	// Check interface number
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
  400708:	4b2c      	ldr	r3, [pc, #176]	; (4007bc <udc_process_setup+0x40c>)
  40070a:	791c      	ldrb	r4, [r3, #4]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
  40070c:	4b30      	ldr	r3, [pc, #192]	; (4007d0 <udc_process_setup+0x420>)
  40070e:	681d      	ldr	r5, [r3, #0]
  400710:	682b      	ldr	r3, [r5, #0]
  400712:	791b      	ldrb	r3, [r3, #4]
  400714:	42a3      	cmp	r3, r4
  400716:	d913      	bls.n	400740 <udc_process_setup+0x390>
	}

	//* To update udc_ptr_iface with the selected interface in request
	// Select first alternate setting of interface to update udc_ptr_iface
	// before calling udi_api->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
  400718:	4620      	mov	r0, r4
  40071a:	2100      	movs	r1, #0
  40071c:	4b32      	ldr	r3, [pc, #200]	; (4007e8 <udc_process_setup+0x438>)
  40071e:	4798      	blx	r3
  400720:	b170      	cbz	r0, 400740 <udc_process_setup+0x390>
		return false;
	}
	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
  400722:	686b      	ldr	r3, [r5, #4]
  400724:	f853 5024 	ldr.w	r5, [r3, r4, lsl #2]
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
  400728:	68eb      	ldr	r3, [r5, #12]
  40072a:	4798      	blx	r3
  40072c:	4601      	mov	r1, r0
  40072e:	4620      	mov	r0, r4
  400730:	4b2d      	ldr	r3, [pc, #180]	; (4007e8 <udc_process_setup+0x438>)
  400732:	4798      	blx	r3
  400734:	b120      	cbz	r0, 400740 <udc_process_setup+0x390>
		return false;
	}

	// Send the SETUP request to the UDI corresponding to the interface number
	return udi_api->setup();
  400736:	68ab      	ldr	r3, [r5, #8]
  400738:	4798      	blx	r3
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
		if (udc_req_iface()) {
  40073a:	4603      	mov	r3, r0
  40073c:	2800      	cmp	r0, #0
  40073e:	d13a      	bne.n	4007b6 <udc_process_setup+0x406>
			return true;
		}
	}

	// If endpoint request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
  400740:	4b1e      	ldr	r3, [pc, #120]	; (4007bc <udc_process_setup+0x40c>)
  400742:	781b      	ldrb	r3, [r3, #0]
  400744:	f003 031f 	and.w	r3, r3, #31
  400748:	2b02      	cmp	r3, #2
  40074a:	d126      	bne.n	40079a <udc_process_setup+0x3ea>
static bool udc_req_ep(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
  40074c:	4b1f      	ldr	r3, [pc, #124]	; (4007cc <udc_process_setup+0x41c>)
  40074e:	781b      	ldrb	r3, [r3, #0]
  400750:	b1eb      	cbz	r3, 40078e <udc_process_setup+0x3de>
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
  400752:	4b1f      	ldr	r3, [pc, #124]	; (4007d0 <udc_process_setup+0x420>)
  400754:	681a      	ldr	r2, [r3, #0]
  400756:	6813      	ldr	r3, [r2, #0]
  400758:	791b      	ldrb	r3, [r3, #4]
  40075a:	b1d3      	cbz	r3, 400792 <udc_process_setup+0x3e2>
  40075c:	2400      	movs	r4, #0
			iface_num++) {
		// Select the interface with the current alternate setting
		udi_api = udc_ptr_conf->udi_apis[iface_num];
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
  40075e:	4e22      	ldr	r6, [pc, #136]	; (4007e8 <udc_process_setup+0x438>)
	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
  400760:	4f1b      	ldr	r7, [pc, #108]	; (4007d0 <udc_process_setup+0x420>)
			iface_num++) {
		// Select the interface with the current alternate setting
		udi_api = udc_ptr_conf->udi_apis[iface_num];
  400762:	6853      	ldr	r3, [r2, #4]
  400764:	f853 5024 	ldr.w	r5, [r3, r4, lsl #2]
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
  400768:	68eb      	ldr	r3, [r5, #12]
  40076a:	4798      	blx	r3
  40076c:	4601      	mov	r1, r0
  40076e:	4620      	mov	r0, r4
  400770:	47b0      	blx	r6
  400772:	4603      	mov	r3, r0
  400774:	b1f8      	cbz	r0, 4007b6 <udc_process_setup+0x406>
			return false;
		}

		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
  400776:	68ab      	ldr	r3, [r5, #8]
  400778:	4798      	blx	r3
  40077a:	4603      	mov	r3, r0
  40077c:	b9d8      	cbnz	r0, 4007b6 <udc_process_setup+0x406>
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
  40077e:	3401      	adds	r4, #1
  400780:	b2e4      	uxtb	r4, r4
	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
  400782:	683a      	ldr	r2, [r7, #0]
  400784:	6811      	ldr	r1, [r2, #0]
  400786:	7909      	ldrb	r1, [r1, #4]
  400788:	42a1      	cmp	r1, r4
  40078a:	d8ea      	bhi.n	400762 <udc_process_setup+0x3b2>
  40078c:	e013      	b.n	4007b6 <udc_process_setup+0x406>
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
  40078e:	2300      	movs	r3, #0
  400790:	e011      	b.n	4007b6 <udc_process_setup+0x406>
		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
			return true;
		}
	}
	return false;
  400792:	2300      	movs	r3, #0
  400794:	e00f      	b.n	4007b6 <udc_process_setup+0x406>
	udd_g_ctrlreq.callback = NULL;
	udd_g_ctrlreq.over_under_run = NULL;

	if (Udd_setup_is_in()) {
		if (udd_g_ctrlreq.req.wLength == 0) {
			return false; // Error from USB host
  400796:	2300      	movs	r3, #0
  400798:	e00d      	b.n	4007b6 <udc_process_setup+0x406>
	// Here SETUP request unknown by UDC and UDIs
#ifdef USB_DEVICE_SPECIFIC_REQUEST
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
  40079a:	2300      	movs	r3, #0
  40079c:	e00b      	b.n	4007b6 <udc_process_setup+0x406>
			return false; // Error from USB host
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
  40079e:	f013 0f60 	tst.w	r3, #96	; 0x60
  4007a2:	d1a8      	bne.n	4006f6 <udc_process_setup+0x346>
  4007a4:	e615      	b.n	4003d2 <udc_process_setup+0x22>
  4007a6:	f013 0f60 	tst.w	r3, #96	; 0x60
  4007aa:	d1a4      	bne.n	4006f6 <udc_process_setup+0x346>
  4007ac:	e6d7      	b.n	40055e <udc_process_setup+0x1ae>
		str = udc_string_manufacturer_name;
		break;
#endif
#ifdef USB_DEVICE_PRODUCT_NAME
	case 2:
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
  4007ae:	2206      	movs	r2, #6
		str = udc_string_product_name;
  4007b0:	4b0e      	ldr	r3, [pc, #56]	; (4007ec <udc_process_setup+0x43c>)
  4007b2:	e673      	b.n	40049c <udc_process_setup+0xec>
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
		if (udc_reqstd()) {
			return true;
  4007b4:	2301      	movs	r3, #1
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
#endif
}
  4007b6:	4618      	mov	r0, r3
  4007b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4007ba:	bf00      	nop
  4007bc:	200005f0 	.word	0x200005f0
  4007c0:	00401ba1 	.word	0x00401ba1
  4007c4:	2000003c 	.word	0x2000003c
  4007c8:	0040032d 	.word	0x0040032d
  4007cc:	20000508 	.word	0x20000508
  4007d0:	20000500 	.word	0x20000500
  4007d4:	004002b9 	.word	0x004002b9
  4007d8:	00400251 	.word	0x00400251
  4007dc:	00401e65 	.word	0x00401e65
  4007e0:	004020c9 	.word	0x004020c9
  4007e4:	00401d79 	.word	0x00401d79
  4007e8:	004001e9 	.word	0x004001e9
  4007ec:	20000014 	.word	0x20000014

004007f0 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  4007f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4007f4:	4681      	mov	r9, r0
  4007f6:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  4007f8:	4b12      	ldr	r3, [pc, #72]	; (400844 <pio_handler_process+0x54>)
  4007fa:	4798      	blx	r3
  4007fc:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  4007fe:	4648      	mov	r0, r9
  400800:	4b11      	ldr	r3, [pc, #68]	; (400848 <pio_handler_process+0x58>)
  400802:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
  400804:	4005      	ands	r5, r0
  400806:	d013      	beq.n	400830 <pio_handler_process+0x40>
  400808:	4c10      	ldr	r4, [pc, #64]	; (40084c <pio_handler_process+0x5c>)
  40080a:	f104 0660 	add.w	r6, r4, #96	; 0x60
		/* Find triggering source */
		i = 0;
		while (status != 0) {
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
  40080e:	6823      	ldr	r3, [r4, #0]
  400810:	4543      	cmp	r3, r8
  400812:	d108      	bne.n	400826 <pio_handler_process+0x36>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  400814:	6861      	ldr	r1, [r4, #4]
  400816:	4229      	tst	r1, r5
  400818:	d005      	beq.n	400826 <pio_handler_process+0x36>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  40081a:	68e3      	ldr	r3, [r4, #12]
  40081c:	4640      	mov	r0, r8
  40081e:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
  400820:	6863      	ldr	r3, [r4, #4]
  400822:	ea25 0503 	bic.w	r5, r5, r3
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
  400826:	42b4      	cmp	r4, r6
  400828:	d002      	beq.n	400830 <pio_handler_process+0x40>
  40082a:	3410      	adds	r4, #16

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
  40082c:	2d00      	cmp	r5, #0
  40082e:	d1ee      	bne.n	40080e <pio_handler_process+0x1e>
		}
	}

	/* Check capture events */
#if (SAM3S || SAM4S || SAM4E)
	if (pio_capture_enable_flag) {
  400830:	4b07      	ldr	r3, [pc, #28]	; (400850 <pio_handler_process+0x60>)
  400832:	681b      	ldr	r3, [r3, #0]
  400834:	b123      	cbz	r3, 400840 <pio_handler_process+0x50>
		if (pio_capture_handler) {
  400836:	4b07      	ldr	r3, [pc, #28]	; (400854 <pio_handler_process+0x64>)
  400838:	681b      	ldr	r3, [r3, #0]
  40083a:	b10b      	cbz	r3, 400840 <pio_handler_process+0x50>
			pio_capture_handler(p_pio);
  40083c:	4648      	mov	r0, r9
  40083e:	4798      	blx	r3
  400840:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  400844:	00402471 	.word	0x00402471
  400848:	00402475 	.word	0x00402475
  40084c:	20000514 	.word	0x20000514
  400850:	20000608 	.word	0x20000608
  400854:	20000510 	.word	0x20000510

00400858 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  400858:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  40085a:	4802      	ldr	r0, [pc, #8]	; (400864 <PIOA_Handler+0xc>)
  40085c:	210b      	movs	r1, #11
  40085e:	4b02      	ldr	r3, [pc, #8]	; (400868 <PIOA_Handler+0x10>)
  400860:	4798      	blx	r3
  400862:	bd08      	pop	{r3, pc}
  400864:	400e0e00 	.word	0x400e0e00
  400868:	004007f1 	.word	0x004007f1

0040086c <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  40086c:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  40086e:	4802      	ldr	r0, [pc, #8]	; (400878 <PIOB_Handler+0xc>)
  400870:	210c      	movs	r1, #12
  400872:	4b02      	ldr	r3, [pc, #8]	; (40087c <PIOB_Handler+0x10>)
  400874:	4798      	blx	r3
  400876:	bd08      	pop	{r3, pc}
  400878:	400e1000 	.word	0x400e1000
  40087c:	004007f1 	.word	0x004007f1

00400880 <spi_enable_clock>:
 * \brief Enable SPI clock.
 *
 * \param p_spi Pointer to an SPI instance.
 */
void spi_enable_clock(Spi *p_spi)
{
  400880:	b508      	push	{r3, lr}
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  400882:	2015      	movs	r0, #21
  400884:	4b01      	ldr	r3, [pc, #4]	; (40088c <spi_enable_clock+0xc>)
  400886:	4798      	blx	r3
  400888:	bd08      	pop	{r3, pc}
  40088a:	bf00      	nop
  40088c:	004026a5 	.word	0x004026a5

00400890 <spi_set_peripheral_chip_select_value>:
 *                 \ref spi_enable_peripheral_select_decode,
 *                 \ref spi_disable_peripheral_select_decode.
 */
void spi_set_peripheral_chip_select_value(Spi *p_spi, uint32_t ul_value)
{
	p_spi->SPI_MR &= (~SPI_MR_PCS_Msk);
  400890:	6843      	ldr	r3, [r0, #4]
  400892:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
  400896:	6043      	str	r3, [r0, #4]
	p_spi->SPI_MR |= SPI_MR_PCS(ul_value);
  400898:	6843      	ldr	r3, [r0, #4]
  40089a:	0409      	lsls	r1, r1, #16
  40089c:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
  4008a0:	430b      	orrs	r3, r1
  4008a2:	6043      	str	r3, [r0, #4]
  4008a4:	4770      	bx	lr
  4008a6:	bf00      	nop

004008a8 <spi_set_delay_between_chip_select>:
 * \param p_spi Pointer to an SPI instance.
 * \param ul_delay Delay between chip selects (in number of MCK clocks).
 */
void spi_set_delay_between_chip_select(Spi *p_spi, uint32_t ul_delay)
{
	p_spi->SPI_MR &= (~SPI_MR_DLYBCS_Msk);
  4008a8:	6843      	ldr	r3, [r0, #4]
  4008aa:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
  4008ae:	6043      	str	r3, [r0, #4]
	p_spi->SPI_MR |= SPI_MR_DLYBCS(ul_delay);
  4008b0:	6843      	ldr	r3, [r0, #4]
  4008b2:	ea43 6101 	orr.w	r1, r3, r1, lsl #24
  4008b6:	6041      	str	r1, [r0, #4]
  4008b8:	4770      	bx	lr
  4008ba:	bf00      	nop

004008bc <spi_write>:
 * \retval SPI_OK on Success.
 * \retval SPI_ERROR_TIMEOUT on Time-out.
 */
spi_status_t spi_write(Spi *p_spi, uint16_t us_data,
		uint8_t uc_pcs, uint8_t uc_last)
{
  4008bc:	b430      	push	{r4, r5}
	uint32_t timeout = SPI_TIMEOUT;
	uint32_t value;

	while (!(p_spi->SPI_SR & SPI_SR_TDRE)) {
  4008be:	f643 2499 	movw	r4, #15001	; 0x3a99
  4008c2:	e001      	b.n	4008c8 <spi_write+0xc>
		if (!timeout--) {
  4008c4:	3c01      	subs	r4, #1
  4008c6:	d011      	beq.n	4008ec <spi_write+0x30>
		uint8_t uc_pcs, uint8_t uc_last)
{
	uint32_t timeout = SPI_TIMEOUT;
	uint32_t value;

	while (!(p_spi->SPI_SR & SPI_SR_TDRE)) {
  4008c8:	6905      	ldr	r5, [r0, #16]
  4008ca:	f015 0f02 	tst.w	r5, #2
  4008ce:	d0f9      	beq.n	4008c4 <spi_write+0x8>
 *
 * \return 1 for Variable mode, 0 for fixed mode.
 */
static inline uint32_t spi_get_peripheral_select_mode(Spi *p_spi)
{
	if (p_spi->SPI_MR & SPI_MR_PS) {
  4008d0:	6844      	ldr	r4, [r0, #4]
		if (!timeout--) {
			return SPI_ERROR_TIMEOUT;
		}
	}

	if (spi_get_peripheral_select_mode(p_spi)) {
  4008d2:	f014 0f02 	tst.w	r4, #2
  4008d6:	d006      	beq.n	4008e6 <spi_write+0x2a>
		value = SPI_TDR_TD(us_data) | SPI_TDR_PCS(uc_pcs);
  4008d8:	0412      	lsls	r2, r2, #16
  4008da:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
  4008de:	4311      	orrs	r1, r2
		if (uc_last) {
  4008e0:	b10b      	cbz	r3, 4008e6 <spi_write+0x2a>
			value |= SPI_TDR_LASTXFER;
  4008e2:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
		}
	} else {
		value = SPI_TDR_TD(us_data);
	}

	p_spi->SPI_TDR = value;
  4008e6:	60c1      	str	r1, [r0, #12]

	return SPI_OK;
  4008e8:	2000      	movs	r0, #0
  4008ea:	e000      	b.n	4008ee <spi_write+0x32>
	uint32_t timeout = SPI_TIMEOUT;
	uint32_t value;

	while (!(p_spi->SPI_SR & SPI_SR_TDRE)) {
		if (!timeout--) {
			return SPI_ERROR_TIMEOUT;
  4008ec:	2001      	movs	r0, #1
	}

	p_spi->SPI_TDR = value;

	return SPI_OK;
}
  4008ee:	bc30      	pop	{r4, r5}
  4008f0:	4770      	bx	lr
  4008f2:	bf00      	nop

004008f4 <spi_set_clock_polarity>:
 * \param ul_polarity Default clock state is logical one(high)/zero(low).
 */
void spi_set_clock_polarity(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_polarity)
{
	if (ul_polarity) {
  4008f4:	b132      	cbz	r2, 400904 <spi_set_clock_polarity+0x10>
  4008f6:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
  4008fa:	6b03      	ldr	r3, [r0, #48]	; 0x30
  4008fc:	f043 0301 	orr.w	r3, r3, #1
  400900:	6303      	str	r3, [r0, #48]	; 0x30
  400902:	4770      	bx	lr
  400904:	eb00 0081 	add.w	r0, r0, r1, lsl #2
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CPOL);
  400908:	6b03      	ldr	r3, [r0, #48]	; 0x30
  40090a:	f023 0301 	bic.w	r3, r3, #1
  40090e:	6303      	str	r3, [r0, #48]	; 0x30
  400910:	4770      	bx	lr
  400912:	bf00      	nop

00400914 <spi_set_clock_phase>:
 *  \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 *  \param ul_phase Data capture on the rising/falling edge of clock.
 */
void spi_set_clock_phase(Spi *p_spi, uint32_t ul_pcs_ch, uint32_t ul_phase)
{
	if (ul_phase) {
  400914:	b132      	cbz	r2, 400924 <spi_set_clock_phase+0x10>
  400916:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
  40091a:	6b03      	ldr	r3, [r0, #48]	; 0x30
  40091c:	f043 0302 	orr.w	r3, r3, #2
  400920:	6303      	str	r3, [r0, #48]	; 0x30
  400922:	4770      	bx	lr
  400924:	eb00 0081 	add.w	r0, r0, r1, lsl #2
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_NCPHA);
  400928:	6b03      	ldr	r3, [r0, #48]	; 0x30
  40092a:	f023 0302 	bic.w	r3, r3, #2
  40092e:	6303      	str	r3, [r0, #48]	; 0x30
  400930:	4770      	bx	lr
  400932:	bf00      	nop

00400934 <spi_configure_cs_behavior>:
 * \param ul_cs_behavior Behavior of the Chip Select after transfer.
 */
void spi_configure_cs_behavior(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_cs_behavior)
{
	if (ul_cs_behavior == SPI_CS_RISE_FORCED) {
  400934:	2a04      	cmp	r2, #4
  400936:	d10a      	bne.n	40094e <spi_configure_cs_behavior+0x1a>
  400938:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
  40093c:	6b03      	ldr	r3, [r0, #48]	; 0x30
  40093e:	f023 0308 	bic.w	r3, r3, #8
  400942:	6303      	str	r3, [r0, #48]	; 0x30
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSNAAT;
  400944:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400946:	f043 0304 	orr.w	r3, r3, #4
  40094a:	6303      	str	r3, [r0, #48]	; 0x30
  40094c:	4770      	bx	lr
	} else if (ul_cs_behavior == SPI_CS_RISE_NO_TX) {
  40094e:	b952      	cbnz	r2, 400966 <spi_configure_cs_behavior+0x32>
  400950:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
  400954:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400956:	f023 0308 	bic.w	r3, r3, #8
  40095a:	6303      	str	r3, [r0, #48]	; 0x30
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSNAAT);
  40095c:	6b03      	ldr	r3, [r0, #48]	; 0x30
  40095e:	f023 0304 	bic.w	r3, r3, #4
  400962:	6303      	str	r3, [r0, #48]	; 0x30
  400964:	4770      	bx	lr
	} else if (ul_cs_behavior == SPI_CS_KEEP_LOW) {
  400966:	2a08      	cmp	r2, #8
  400968:	d105      	bne.n	400976 <spi_configure_cs_behavior+0x42>
  40096a:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSAAT;
  40096e:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400970:	f043 0308 	orr.w	r3, r3, #8
  400974:	6303      	str	r3, [r0, #48]	; 0x30
  400976:	4770      	bx	lr

00400978 <spi_set_bits_per_transfer>:
 * \param ul_bits Number of bits (8~16), use the pattern defined
 *        in the device header file.
 */
void spi_set_bits_per_transfer(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_bits)
{
  400978:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_BITS_Msk);
  40097c:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  40097e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  400982:	630b      	str	r3, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= ul_bits;
  400984:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  400986:	431a      	orrs	r2, r3
  400988:	630a      	str	r2, [r1, #48]	; 0x30
  40098a:	4770      	bx	lr

0040098c <spi_set_baudrate_div>:
 * \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 * \param uc_baudrate_divider Baudrate divider from MCK.
 */
void spi_set_baudrate_div(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_baudrate_divider)
{
  40098c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_SCBR_Msk);
  400990:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  400992:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
  400996:	630b      	str	r3, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_SCBR(uc_baudrate_divider);
  400998:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  40099a:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
  40099e:	630a      	str	r2, [r1, #48]	; 0x30
  4009a0:	4770      	bx	lr
  4009a2:	bf00      	nop

004009a4 <spi_set_transfer_delay>:
 * \param uc_dlybs Delay before SPCK (in number of MCK clocks).
 * \param uc_dlybct Delay between consecutive transfers (in number of MCK clocks).
 */
void spi_set_transfer_delay(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_dlybs, uint8_t uc_dlybct)
{
  4009a4:	b410      	push	{r4}
  4009a6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	p_spi->SPI_CSR[ul_pcs_ch] &= ~(SPI_CSR_DLYBS_Msk | SPI_CSR_DLYBCT_Msk);
  4009aa:	6b08      	ldr	r0, [r1, #48]	; 0x30
  4009ac:	b280      	uxth	r0, r0
  4009ae:	6308      	str	r0, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_DLYBS(uc_dlybs)
  4009b0:	6b0c      	ldr	r4, [r1, #48]	; 0x30
  4009b2:	ea44 6303 	orr.w	r3, r4, r3, lsl #24
  4009b6:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
  4009ba:	630a      	str	r2, [r1, #48]	; 0x30
			| SPI_CSR_DLYBCT(uc_dlybct);
}
  4009bc:	f85d 4b04 	ldr.w	r4, [sp], #4
  4009c0:	4770      	bx	lr
  4009c2:	bf00      	nop

004009c4 <udd_ctrl_init>:
	cpu_irq_restore(flags);
}

static void udd_ctrl_init(void)
{
	udd_g_ctrlreq.callback = NULL;
  4009c4:	4a03      	ldr	r2, [pc, #12]	; (4009d4 <udd_ctrl_init+0x10>)
  4009c6:	2300      	movs	r3, #0
  4009c8:	6113      	str	r3, [r2, #16]
	udd_g_ctrlreq.over_under_run = NULL;
  4009ca:	6153      	str	r3, [r2, #20]
	udd_g_ctrlreq.payload_size = 0;
  4009cc:	8193      	strh	r3, [r2, #12]
	udd_ep_control_state = UDD_EPCTRL_SETUP;
  4009ce:	4a02      	ldr	r2, [pc, #8]	; (4009d8 <udd_ctrl_init+0x14>)
  4009d0:	7013      	strb	r3, [r2, #0]
  4009d2:	4770      	bx	lr
  4009d4:	200005f0 	.word	0x200005f0
  4009d8:	200005dc 	.word	0x200005dc

004009dc <udd_ctrl_stall_data>:
	udd_ack_bank0_received(0);
}


static void udd_ctrl_stall_data(void)
{
  4009dc:	b082      	sub	sp, #8
	// Stall all packets on IN & OUT control endpoint
	udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
  4009de:	2205      	movs	r2, #5
  4009e0:	4b0e      	ldr	r3, [pc, #56]	; (400a1c <udd_ctrl_stall_data+0x40>)
  4009e2:	701a      	strb	r2, [r3, #0]
	udd_enable_stall_handshake(0);
  4009e4:	4a0e      	ldr	r2, [pc, #56]	; (400a20 <udd_ctrl_stall_data+0x44>)
  4009e6:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4009e8:	9300      	str	r3, [sp, #0]
  4009ea:	9b00      	ldr	r3, [sp, #0]
  4009ec:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  4009f0:	9300      	str	r3, [sp, #0]
  4009f2:	9b00      	ldr	r3, [sp, #0]
  4009f4:	f043 0320 	orr.w	r3, r3, #32
  4009f8:	9300      	str	r3, [sp, #0]
  4009fa:	9b00      	ldr	r3, [sp, #0]
  4009fc:	6313      	str	r3, [r2, #48]	; 0x30
  4009fe:	2300      	movs	r3, #0
  400a00:	9301      	str	r3, [sp, #4]
  400a02:	9b01      	ldr	r3, [sp, #4]
  400a04:	2b13      	cmp	r3, #19
  400a06:	d806      	bhi.n	400a16 <udd_ctrl_stall_data+0x3a>

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
  400a08:	bf00      	nop
  400a0a:	9b01      	ldr	r3, [sp, #4]
  400a0c:	3301      	adds	r3, #1
  400a0e:	9301      	str	r3, [sp, #4]
  400a10:	9b01      	ldr	r3, [sp, #4]
  400a12:	2b13      	cmp	r3, #19
  400a14:	d9f8      	bls.n	400a08 <udd_ctrl_stall_data+0x2c>
}
  400a16:	b002      	add	sp, #8
  400a18:	4770      	bx	lr
  400a1a:	bf00      	nop
  400a1c:	200005dc 	.word	0x200005dc
  400a20:	40034000 	.word	0x40034000

00400a24 <udd_ctrl_send_zlp_in>:


static void udd_ctrl_send_zlp_in(void)
{
  400a24:	b082      	sub	sp, #8
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP;
  400a26:	2203      	movs	r2, #3
  400a28:	4b0e      	ldr	r3, [pc, #56]	; (400a64 <udd_ctrl_send_zlp_in+0x40>)
  400a2a:	701a      	strb	r2, [r3, #0]
	// Validate and send empty IN packet on control endpoint
	// Send ZLP on IN endpoint
	udd_set_transmit_ready(0);
  400a2c:	4a0e      	ldr	r2, [pc, #56]	; (400a68 <udd_ctrl_send_zlp_in+0x44>)
  400a2e:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400a30:	9300      	str	r3, [sp, #0]
  400a32:	9b00      	ldr	r3, [sp, #0]
  400a34:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  400a38:	9300      	str	r3, [sp, #0]
  400a3a:	9b00      	ldr	r3, [sp, #0]
  400a3c:	f043 0310 	orr.w	r3, r3, #16
  400a40:	9300      	str	r3, [sp, #0]
  400a42:	9b00      	ldr	r3, [sp, #0]
  400a44:	6313      	str	r3, [r2, #48]	; 0x30
  400a46:	2300      	movs	r3, #0
  400a48:	9301      	str	r3, [sp, #4]
  400a4a:	9b01      	ldr	r3, [sp, #4]
  400a4c:	2b13      	cmp	r3, #19
  400a4e:	d806      	bhi.n	400a5e <udd_ctrl_send_zlp_in+0x3a>
  400a50:	bf00      	nop
  400a52:	9b01      	ldr	r3, [sp, #4]
  400a54:	3301      	adds	r3, #1
  400a56:	9301      	str	r3, [sp, #4]
  400a58:	9b01      	ldr	r3, [sp, #4]
  400a5a:	2b13      	cmp	r3, #19
  400a5c:	d9f8      	bls.n	400a50 <udd_ctrl_send_zlp_in+0x2c>
}
  400a5e:	b002      	add	sp, #8
  400a60:	4770      	bx	lr
  400a62:	bf00      	nop
  400a64:	200005dc 	.word	0x200005dc
  400a68:	40034000 	.word	0x40034000

00400a6c <udd_ctrl_endofrequest>:
	// because the buffer of control endpoint is already free
}


static void udd_ctrl_endofrequest(void)
{
  400a6c:	b508      	push	{r3, lr}
	// If a callback is registered then call it
	if (udd_g_ctrlreq.callback) {
  400a6e:	4b02      	ldr	r3, [pc, #8]	; (400a78 <udd_ctrl_endofrequest+0xc>)
  400a70:	691b      	ldr	r3, [r3, #16]
  400a72:	b103      	cbz	r3, 400a76 <udd_ctrl_endofrequest+0xa>
		udd_g_ctrlreq.callback();
  400a74:	4798      	blx	r3
  400a76:	bd08      	pop	{r3, pc}
  400a78:	200005f0 	.word	0x200005f0

00400a7c <udd_ctrl_in_sent>:
	}
}


static void udd_ctrl_in_sent(void)
{
  400a7c:	b530      	push	{r4, r5, lr}
  400a7e:	b08b      	sub	sp, #44	; 0x2c
	uint16_t nb_remain;
	uint8_t i;
	uint8_t *ptr_src;
	irqflags_t flags;

	if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
  400a80:	4b75      	ldr	r3, [pc, #468]	; (400c58 <udd_ctrl_in_sent+0x1dc>)
  400a82:	781b      	ldrb	r3, [r3, #0]
  400a84:	2b03      	cmp	r3, #3
  400a86:	d11d      	bne.n	400ac4 <udd_ctrl_in_sent+0x48>
		// Ack
		udd_ack_in_sent(0);
  400a88:	4a74      	ldr	r2, [pc, #464]	; (400c5c <udd_ctrl_in_sent+0x1e0>)
  400a8a:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400a8c:	9300      	str	r3, [sp, #0]
  400a8e:	9b00      	ldr	r3, [sp, #0]
  400a90:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  400a94:	9300      	str	r3, [sp, #0]
  400a96:	9b00      	ldr	r3, [sp, #0]
  400a98:	f023 0301 	bic.w	r3, r3, #1
  400a9c:	9300      	str	r3, [sp, #0]
  400a9e:	9b00      	ldr	r3, [sp, #0]
  400aa0:	6313      	str	r3, [r2, #48]	; 0x30
  400aa2:	2300      	movs	r3, #0
  400aa4:	9301      	str	r3, [sp, #4]
  400aa6:	9b01      	ldr	r3, [sp, #4]
  400aa8:	2b13      	cmp	r3, #19
  400aaa:	d806      	bhi.n	400aba <udd_ctrl_in_sent+0x3e>
  400aac:	bf00      	nop
  400aae:	9b01      	ldr	r3, [sp, #4]
  400ab0:	3301      	adds	r3, #1
  400ab2:	9301      	str	r3, [sp, #4]
  400ab4:	9b01      	ldr	r3, [sp, #4]
  400ab6:	2b13      	cmp	r3, #19
  400ab8:	d9f8      	bls.n	400aac <udd_ctrl_in_sent+0x30>
		// ZLP on IN is sent, then valid end of setup request
		udd_ctrl_endofrequest();
  400aba:	4b69      	ldr	r3, [pc, #420]	; (400c60 <udd_ctrl_in_sent+0x1e4>)
  400abc:	4798      	blx	r3
		// Reinitializes control endpoint management
		udd_ctrl_init();
  400abe:	4b69      	ldr	r3, [pc, #420]	; (400c64 <udd_ctrl_in_sent+0x1e8>)
  400ac0:	4798      	blx	r3
		return;
  400ac2:	e0c6      	b.n	400c52 <udd_ctrl_in_sent+0x1d6>
	}
	Assert(udd_ep_control_state == UDD_EPCTRL_DATA_IN);

	nb_remain = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
  400ac4:	4b68      	ldr	r3, [pc, #416]	; (400c68 <udd_ctrl_in_sent+0x1ec>)
  400ac6:	881a      	ldrh	r2, [r3, #0]
  400ac8:	4b68      	ldr	r3, [pc, #416]	; (400c6c <udd_ctrl_in_sent+0x1f0>)
  400aca:	899c      	ldrh	r4, [r3, #12]
  400acc:	1aa4      	subs	r4, r4, r2
  400ace:	b2a4      	uxth	r4, r4
	if (0 == nb_remain) {
  400ad0:	2c00      	cmp	r4, #0
  400ad2:	d133      	bne.n	400b3c <udd_ctrl_in_sent+0xc0>
		// All content of current buffer payload are sent
		// Update number of total data sending by previous payload buffer
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
  400ad4:	4966      	ldr	r1, [pc, #408]	; (400c70 <udd_ctrl_in_sent+0x1f4>)
  400ad6:	880b      	ldrh	r3, [r1, #0]
  400ad8:	4413      	add	r3, r2
  400ada:	b29b      	uxth	r3, r3
  400adc:	800b      	strh	r3, [r1, #0]
		if ((udd_g_ctrlreq.req.wLength == udd_ctrl_prev_payload_nb_trans)
  400ade:	4a63      	ldr	r2, [pc, #396]	; (400c6c <udd_ctrl_in_sent+0x1f0>)
  400ae0:	88d2      	ldrh	r2, [r2, #6]
  400ae2:	429a      	cmp	r2, r3
  400ae4:	d002      	beq.n	400aec <udd_ctrl_in_sent+0x70>
				|| b_shortpacket) {
  400ae6:	4b63      	ldr	r3, [pc, #396]	; (400c74 <udd_ctrl_in_sent+0x1f8>)
  400ae8:	781b      	ldrb	r3, [r3, #0]
  400aea:	b1eb      	cbz	r3, 400b28 <udd_ctrl_in_sent+0xac>
}


static void udd_ctrl_send_zlp_out(void)
{
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
  400aec:	2204      	movs	r2, #4
  400aee:	4b5a      	ldr	r3, [pc, #360]	; (400c58 <udd_ctrl_in_sent+0x1dc>)
  400af0:	701a      	strb	r2, [r3, #0]
				|| b_shortpacket) {
			// All data requested are transfered or a short packet has been sent
			// then it is the end of data phase.
			// Generate an OUT ZLP for handshake phase.
			udd_ctrl_send_zlp_out();
			udd_ack_in_sent(0);
  400af2:	4a5a      	ldr	r2, [pc, #360]	; (400c5c <udd_ctrl_in_sent+0x1e0>)
  400af4:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400af6:	9302      	str	r3, [sp, #8]
  400af8:	9b02      	ldr	r3, [sp, #8]
  400afa:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  400afe:	9302      	str	r3, [sp, #8]
  400b00:	9b02      	ldr	r3, [sp, #8]
  400b02:	f023 0301 	bic.w	r3, r3, #1
  400b06:	9302      	str	r3, [sp, #8]
  400b08:	9b02      	ldr	r3, [sp, #8]
  400b0a:	6313      	str	r3, [r2, #48]	; 0x30
  400b0c:	2300      	movs	r3, #0
  400b0e:	9303      	str	r3, [sp, #12]
  400b10:	9b03      	ldr	r3, [sp, #12]
  400b12:	2b13      	cmp	r3, #19
  400b14:	f200 809d 	bhi.w	400c52 <udd_ctrl_in_sent+0x1d6>
  400b18:	bf00      	nop
  400b1a:	9b03      	ldr	r3, [sp, #12]
  400b1c:	3301      	adds	r3, #1
  400b1e:	9303      	str	r3, [sp, #12]
  400b20:	9b03      	ldr	r3, [sp, #12]
  400b22:	2b13      	cmp	r3, #19
  400b24:	d9f8      	bls.n	400b18 <udd_ctrl_in_sent+0x9c>
  400b26:	e094      	b.n	400c52 <udd_ctrl_in_sent+0x1d6>
			return;
		}
		// Need of new buffer because the data phase is not complete
		if ((!udd_g_ctrlreq.over_under_run)
  400b28:	4b50      	ldr	r3, [pc, #320]	; (400c6c <udd_ctrl_in_sent+0x1f0>)
  400b2a:	695b      	ldr	r3, [r3, #20]
  400b2c:	b16b      	cbz	r3, 400b4a <udd_ctrl_in_sent+0xce>
				|| (!udd_g_ctrlreq.over_under_run())) {
  400b2e:	4798      	blx	r3
  400b30:	b158      	cbz	r0, 400b4a <udd_ctrl_in_sent+0xce>
			// Underrun then send zlp on IN
			// Here nb_remain=0 and allows to send a IN ZLP
		} else {
			// A new payload buffer is given
			udd_ctrl_payload_nb_trans = 0;
  400b32:	2200      	movs	r2, #0
  400b34:	4b4c      	ldr	r3, [pc, #304]	; (400c68 <udd_ctrl_in_sent+0x1ec>)
  400b36:	801a      	strh	r2, [r3, #0]
			nb_remain = udd_g_ctrlreq.payload_size;
  400b38:	4b4c      	ldr	r3, [pc, #304]	; (400c6c <udd_ctrl_in_sent+0x1f0>)
  400b3a:	899c      	ldrh	r4, [r3, #12]
		}
	}
	// Continue transfer and send next data
	if (nb_remain >= USB_DEVICE_EP_CTRL_SIZE) {
  400b3c:	2c3f      	cmp	r4, #63	; 0x3f
  400b3e:	d904      	bls.n	400b4a <udd_ctrl_in_sent+0xce>
		nb_remain = USB_DEVICE_EP_CTRL_SIZE;
		b_shortpacket = false;
  400b40:	2200      	movs	r2, #0
  400b42:	4b4c      	ldr	r3, [pc, #304]	; (400c74 <udd_ctrl_in_sent+0x1f8>)
  400b44:	701a      	strb	r2, [r3, #0]
			nb_remain = udd_g_ctrlreq.payload_size;
		}
	}
	// Continue transfer and send next data
	if (nb_remain >= USB_DEVICE_EP_CTRL_SIZE) {
		nb_remain = USB_DEVICE_EP_CTRL_SIZE;
  400b46:	2440      	movs	r4, #64	; 0x40
  400b48:	e002      	b.n	400b50 <udd_ctrl_in_sent+0xd4>
		b_shortpacket = false;
	} else {
		b_shortpacket = true;
  400b4a:	2201      	movs	r2, #1
  400b4c:	4b49      	ldr	r3, [pc, #292]	; (400c74 <udd_ctrl_in_sent+0x1f8>)
  400b4e:	701a      	strb	r2, [r3, #0]
	}
	// Fill buffer of endpoint control
	ptr_src = udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans;
  400b50:	4b46      	ldr	r3, [pc, #280]	; (400c6c <udd_ctrl_in_sent+0x1f0>)
  400b52:	6899      	ldr	r1, [r3, #8]
  400b54:	4b44      	ldr	r3, [pc, #272]	; (400c68 <udd_ctrl_in_sent+0x1ec>)
  400b56:	881b      	ldrh	r3, [r3, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  400b58:	f3ef 8010 	mrs	r0, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
  400b5c:	fab0 f080 	clz	r0, r0
  400b60:	0940      	lsrs	r0, r0, #5
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
  400b62:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  400b64:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  400b68:	2500      	movs	r5, #0
  400b6a:	4a43      	ldr	r2, [pc, #268]	; (400c78 <udd_ctrl_in_sent+0x1fc>)
  400b6c:	7015      	strb	r5, [r2, #0]
	// a next setup reception in same endpoint 0 DPRAM.
	// Thereby, an OUT ZLP reception must check before IN data write
	// and if no OUT ZLP is received the data must be written quickly (800us)
	// before an eventually ZLP OUT and SETUP reception
	flags = cpu_irq_save();
	if (Is_udd_bank0_received(0)) {
  400b6e:	4a3b      	ldr	r2, [pc, #236]	; (400c5c <udd_ctrl_in_sent+0x1e0>)
  400b70:	6b12      	ldr	r2, [r2, #48]	; 0x30
  400b72:	f012 0f02 	tst.w	r2, #2
  400b76:	d101      	bne.n	400b7c <udd_ctrl_in_sent+0x100>
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
		udd_ack_in_sent(0);
		return; // Exit of IN DATA phase
	}
	// Write quickly the IN data
	for (i = 0; i < nb_remain; i++) {
  400b78:	bb24      	cbnz	r4, 400bc4 <udd_ctrl_in_sent+0x148>
  400b7a:	e02d      	b.n	400bd8 <udd_ctrl_in_sent+0x15c>
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  400b7c:	b128      	cbz	r0, 400b8a <udd_ctrl_in_sent+0x10e>
		cpu_irq_enable();
  400b7e:	2201      	movs	r2, #1
  400b80:	4b3d      	ldr	r3, [pc, #244]	; (400c78 <udd_ctrl_in_sent+0x1fc>)
  400b82:	701a      	strb	r2, [r3, #0]
  400b84:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
  400b88:	b662      	cpsie	i
	// before an eventually ZLP OUT and SETUP reception
	flags = cpu_irq_save();
	if (Is_udd_bank0_received(0)) {
		// IN DATA phase aborted by OUT ZLP
		cpu_irq_restore(flags);
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
  400b8a:	2204      	movs	r2, #4
  400b8c:	4b32      	ldr	r3, [pc, #200]	; (400c58 <udd_ctrl_in_sent+0x1dc>)
  400b8e:	701a      	strb	r2, [r3, #0]
		udd_ack_in_sent(0);
  400b90:	4a32      	ldr	r2, [pc, #200]	; (400c5c <udd_ctrl_in_sent+0x1e0>)
  400b92:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400b94:	9304      	str	r3, [sp, #16]
  400b96:	9b04      	ldr	r3, [sp, #16]
  400b98:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  400b9c:	9304      	str	r3, [sp, #16]
  400b9e:	9b04      	ldr	r3, [sp, #16]
  400ba0:	f023 0301 	bic.w	r3, r3, #1
  400ba4:	9304      	str	r3, [sp, #16]
  400ba6:	9b04      	ldr	r3, [sp, #16]
  400ba8:	6313      	str	r3, [r2, #48]	; 0x30
  400baa:	2300      	movs	r3, #0
  400bac:	9305      	str	r3, [sp, #20]
  400bae:	9b05      	ldr	r3, [sp, #20]
  400bb0:	2b13      	cmp	r3, #19
  400bb2:	d84e      	bhi.n	400c52 <udd_ctrl_in_sent+0x1d6>

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
  400bb4:	bf00      	nop
  400bb6:	9b05      	ldr	r3, [sp, #20]
  400bb8:	3301      	adds	r3, #1
  400bba:	9305      	str	r3, [sp, #20]
  400bbc:	9b05      	ldr	r3, [sp, #20]
  400bbe:	2b13      	cmp	r3, #19
  400bc0:	d9f8      	bls.n	400bb4 <udd_ctrl_in_sent+0x138>
  400bc2:	e046      	b.n	400c52 <udd_ctrl_in_sent+0x1d6>
		b_shortpacket = false;
	} else {
		b_shortpacket = true;
	}
	// Fill buffer of endpoint control
	ptr_src = udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans;
  400bc4:	4419      	add	r1, r3
  400bc6:	460a      	mov	r2, r1
		udd_ack_in_sent(0);
		return; // Exit of IN DATA phase
	}
	// Write quickly the IN data
	for (i = 0; i < nb_remain; i++) {
		udd_endpoint_fifo_write(0, *ptr_src++);
  400bc8:	4d24      	ldr	r5, [pc, #144]	; (400c5c <udd_ctrl_in_sent+0x1e0>)
  400bca:	f812 3b01 	ldrb.w	r3, [r2], #1
  400bce:	652b      	str	r3, [r5, #80]	; 0x50
  400bd0:	1a53      	subs	r3, r2, r1
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
		udd_ack_in_sent(0);
		return; // Exit of IN DATA phase
	}
	// Write quickly the IN data
	for (i = 0; i < nb_remain; i++) {
  400bd2:	b2db      	uxtb	r3, r3
  400bd4:	42a3      	cmp	r3, r4
  400bd6:	d3f8      	bcc.n	400bca <udd_ctrl_in_sent+0x14e>
		udd_endpoint_fifo_write(0, *ptr_src++);
	}
	udd_ctrl_payload_nb_trans += nb_remain;
  400bd8:	4a23      	ldr	r2, [pc, #140]	; (400c68 <udd_ctrl_in_sent+0x1ec>)
  400bda:	8813      	ldrh	r3, [r2, #0]
  400bdc:	441c      	add	r4, r3
  400bde:	8014      	strh	r4, [r2, #0]
	// Validate and send the data available in the control endpoint buffer
	udd_set_transmit_ready(0);
  400be0:	4a1e      	ldr	r2, [pc, #120]	; (400c5c <udd_ctrl_in_sent+0x1e0>)
  400be2:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400be4:	9306      	str	r3, [sp, #24]
  400be6:	9b06      	ldr	r3, [sp, #24]
  400be8:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  400bec:	9306      	str	r3, [sp, #24]
  400bee:	9b06      	ldr	r3, [sp, #24]
  400bf0:	f043 0310 	orr.w	r3, r3, #16
  400bf4:	9306      	str	r3, [sp, #24]
  400bf6:	9b06      	ldr	r3, [sp, #24]
  400bf8:	6313      	str	r3, [r2, #48]	; 0x30
  400bfa:	2300      	movs	r3, #0
  400bfc:	9307      	str	r3, [sp, #28]
  400bfe:	9b07      	ldr	r3, [sp, #28]
  400c00:	2b13      	cmp	r3, #19
  400c02:	d806      	bhi.n	400c12 <udd_ctrl_in_sent+0x196>
  400c04:	bf00      	nop
  400c06:	9b07      	ldr	r3, [sp, #28]
  400c08:	3301      	adds	r3, #1
  400c0a:	9307      	str	r3, [sp, #28]
  400c0c:	9b07      	ldr	r3, [sp, #28]
  400c0e:	2b13      	cmp	r3, #19
  400c10:	d9f8      	bls.n	400c04 <udd_ctrl_in_sent+0x188>
	udd_ack_in_sent(0);
  400c12:	4a12      	ldr	r2, [pc, #72]	; (400c5c <udd_ctrl_in_sent+0x1e0>)
  400c14:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400c16:	9308      	str	r3, [sp, #32]
  400c18:	9b08      	ldr	r3, [sp, #32]
  400c1a:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  400c1e:	9308      	str	r3, [sp, #32]
  400c20:	9b08      	ldr	r3, [sp, #32]
  400c22:	f023 0301 	bic.w	r3, r3, #1
  400c26:	9308      	str	r3, [sp, #32]
  400c28:	9b08      	ldr	r3, [sp, #32]
  400c2a:	6313      	str	r3, [r2, #48]	; 0x30
  400c2c:	2300      	movs	r3, #0
  400c2e:	9309      	str	r3, [sp, #36]	; 0x24
  400c30:	9b09      	ldr	r3, [sp, #36]	; 0x24
  400c32:	2b13      	cmp	r3, #19
  400c34:	d806      	bhi.n	400c44 <udd_ctrl_in_sent+0x1c8>
  400c36:	bf00      	nop
  400c38:	9b09      	ldr	r3, [sp, #36]	; 0x24
  400c3a:	3301      	adds	r3, #1
  400c3c:	9309      	str	r3, [sp, #36]	; 0x24
  400c3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
  400c40:	2b13      	cmp	r3, #19
  400c42:	d9f8      	bls.n	400c36 <udd_ctrl_in_sent+0x1ba>
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  400c44:	b128      	cbz	r0, 400c52 <udd_ctrl_in_sent+0x1d6>
		cpu_irq_enable();
  400c46:	2201      	movs	r2, #1
  400c48:	4b0b      	ldr	r3, [pc, #44]	; (400c78 <udd_ctrl_in_sent+0x1fc>)
  400c4a:	701a      	strb	r2, [r3, #0]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  400c4c:	f3bf 8f5f 	dmb	sy
  400c50:	b662      	cpsie	i

	// In case of abort of DATA IN phase, no need to enable nak OUT interrupt
	// because OUT endpoint is already free and ZLP OUT accepted.
	cpu_irq_restore(flags);
}
  400c52:	b00b      	add	sp, #44	; 0x2c
  400c54:	bd30      	pop	{r4, r5, pc}
  400c56:	bf00      	nop
  400c58:	200005dc 	.word	0x200005dc
  400c5c:	40034000 	.word	0x40034000
  400c60:	00400a6d 	.word	0x00400a6d
  400c64:	004009c5 	.word	0x004009c5
  400c68:	200005da 	.word	0x200005da
  400c6c:	200005f0 	.word	0x200005f0
  400c70:	20000586 	.word	0x20000586
  400c74:	20000584 	.word	0x20000584
  400c78:	20000097 	.word	0x20000097

00400c7c <udd_ep_finish_job>:
}


static void udd_ep_finish_job(udd_ep_job_t * ptr_job, int status,
		uint8_t ep_num)
{
  400c7c:	b538      	push	{r3, r4, r5, lr}
  400c7e:	4603      	mov	r3, r0
	if (ptr_job->busy == false) {
  400c80:	7c44      	ldrb	r4, [r0, #17]
  400c82:	f014 0f10 	tst.w	r4, #16
  400c86:	d015      	beq.n	400cb4 <udd_ep_finish_job+0x38>
		return; // No on-going job
	}
	ptr_job->busy = false;
  400c88:	7c44      	ldrb	r4, [r0, #17]
  400c8a:	f36f 1404 	bfc	r4, #4, #1
  400c8e:	7444      	strb	r4, [r0, #17]
	if (NULL == ptr_job->call_trans) {
  400c90:	6805      	ldr	r5, [r0, #0]
  400c92:	b17d      	cbz	r5, 400cb4 <udd_ep_finish_job+0x38>
		return; // No callback linked to job
	}
	if (Is_udd_endpoint_type_in(ep_num)) {
  400c94:	f102 040c 	add.w	r4, r2, #12
  400c98:	4807      	ldr	r0, [pc, #28]	; (400cb8 <udd_ep_finish_job+0x3c>)
  400c9a:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
  400c9e:	f410 6f80 	tst.w	r0, #1024	; 0x400
		ep_num |= USB_EP_DIR_IN;
  400ca2:	bf18      	it	ne
  400ca4:	f042 0280 	orrne.w	r2, r2, #128	; 0x80
	}	
	ptr_job->call_trans((status == UDD_EP_TRANSFER_ABORT) ?
  400ca8:	2901      	cmp	r1, #1
  400caa:	bf14      	ite	ne
  400cac:	2000      	movne	r0, #0
  400cae:	2001      	moveq	r0, #1
  400cb0:	6899      	ldr	r1, [r3, #8]
  400cb2:	47a8      	blx	r5
  400cb4:	bd38      	pop	{r3, r4, r5, pc}
  400cb6:	bf00      	nop
  400cb8:	40034000 	.word	0x40034000

00400cbc <udd_ep_ack_out_received>:
		UDD_EP_TRANSFER_ABORT : UDD_EP_TRANSFER_OK, ptr_job->buf_size, ep_num);
}


static void udd_ep_ack_out_received(udd_ep_id_t ep)
{
  400cbc:	b430      	push	{r4, r5}
  400cbe:	b084      	sub	sp, #16
	bool bank0_received, bank1_received;
	udd_ep_job_t *ptr_job = &udd_ep_job[ep - 1];
  400cc0:	1e42      	subs	r2, r0, #1
  400cc2:	0083      	lsls	r3, r0, #2
  400cc4:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
  400cc8:	f503 3340 	add.w	r3, r3, #196608	; 0x30000

	bank0_received = Is_udd_bank0_received(ep);
  400ccc:	6b19      	ldr	r1, [r3, #48]	; 0x30
	bank1_received = Is_udd_bank1_received(ep);
  400cce:	6b1c      	ldr	r4, [r3, #48]	; 0x30

	if (bank0_received && bank1_received) {
  400cd0:	f011 0f02 	tst.w	r1, #2
  400cd4:	d00c      	beq.n	400cf0 <udd_ep_ack_out_received+0x34>
  400cd6:	f014 0f40 	tst.w	r4, #64	; 0x40
  400cda:	d113      	bne.n	400d04 <udd_ep_ack_out_received+0x48>
		// The only way is to use ptr_job->bank
	} else if (bank0_received) {
		// Must be bank0
		ptr_job->bank = 0;
  400cdc:	eb02 0182 	add.w	r1, r2, r2, lsl #2
  400ce0:	4c32      	ldr	r4, [pc, #200]	; (400dac <udd_ep_ack_out_received+0xf0>)
  400ce2:	eb04 0181 	add.w	r1, r4, r1, lsl #2
  400ce6:	7c4c      	ldrb	r4, [r1, #17]
  400ce8:	f36f 0483 	bfc	r4, #2, #2
  400cec:	744c      	strb	r4, [r1, #17]
  400cee:	e009      	b.n	400d04 <udd_ep_ack_out_received+0x48>
	} else {
		// Must be bank1
		ptr_job->bank = 1;
  400cf0:	eb02 0182 	add.w	r1, r2, r2, lsl #2
  400cf4:	4c2d      	ldr	r4, [pc, #180]	; (400dac <udd_ep_ack_out_received+0xf0>)
  400cf6:	eb04 0181 	add.w	r1, r4, r1, lsl #2
  400cfa:	7c4c      	ldrb	r4, [r1, #17]
  400cfc:	2501      	movs	r5, #1
  400cfe:	f365 0483 	bfi	r4, r5, #2, #2
  400d02:	744c      	strb	r4, [r1, #17]
	}
	if (ptr_job->bank == 0) {
  400d04:	eb02 0182 	add.w	r1, r2, r2, lsl #2
  400d08:	4c28      	ldr	r4, [pc, #160]	; (400dac <udd_ep_ack_out_received+0xf0>)
  400d0a:	eb04 0181 	add.w	r1, r4, r1, lsl #2
  400d0e:	7c49      	ldrb	r1, [r1, #17]
  400d10:	f011 0f0c 	tst.w	r1, #12
  400d14:	d125      	bne.n	400d62 <udd_ep_ack_out_received+0xa6>
		udd_ack_bank0_received(ep);
  400d16:	6b19      	ldr	r1, [r3, #48]	; 0x30
  400d18:	9100      	str	r1, [sp, #0]
  400d1a:	9900      	ldr	r1, [sp, #0]
  400d1c:	f041 014f 	orr.w	r1, r1, #79	; 0x4f
  400d20:	9100      	str	r1, [sp, #0]
  400d22:	9900      	ldr	r1, [sp, #0]
  400d24:	f021 0102 	bic.w	r1, r1, #2
  400d28:	9100      	str	r1, [sp, #0]
  400d2a:	9900      	ldr	r1, [sp, #0]
  400d2c:	6319      	str	r1, [r3, #48]	; 0x30
  400d2e:	2300      	movs	r3, #0
  400d30:	9301      	str	r3, [sp, #4]
  400d32:	9b01      	ldr	r3, [sp, #4]
  400d34:	2b13      	cmp	r3, #19
  400d36:	d806      	bhi.n	400d46 <udd_ep_ack_out_received+0x8a>

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
  400d38:	bf00      	nop
  400d3a:	9b01      	ldr	r3, [sp, #4]
  400d3c:	3301      	adds	r3, #1
  400d3e:	9301      	str	r3, [sp, #4]
  400d40:	9b01      	ldr	r3, [sp, #4]
  400d42:	2b13      	cmp	r3, #19
  400d44:	d9f8      	bls.n	400d38 <udd_ep_ack_out_received+0x7c>
		if (udd_get_endpoint_bank_max_nbr(ep) > 1) {
  400d46:	b368      	cbz	r0, 400da4 <udd_ep_ack_out_received+0xe8>
  400d48:	2803      	cmp	r0, #3
  400d4a:	d02b      	beq.n	400da4 <udd_ep_ack_out_received+0xe8>
			ptr_job->bank = 1;
  400d4c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  400d50:	4b16      	ldr	r3, [pc, #88]	; (400dac <udd_ep_ack_out_received+0xf0>)
  400d52:	eb03 0382 	add.w	r3, r3, r2, lsl #2
  400d56:	7c5a      	ldrb	r2, [r3, #17]
  400d58:	2101      	movs	r1, #1
  400d5a:	f361 0283 	bfi	r2, r1, #2, #2
  400d5e:	745a      	strb	r2, [r3, #17]
  400d60:	e020      	b.n	400da4 <udd_ep_ack_out_received+0xe8>
		}
	} else {
		udd_ack_bank1_received(ep);
  400d62:	6b19      	ldr	r1, [r3, #48]	; 0x30
  400d64:	9102      	str	r1, [sp, #8]
  400d66:	9902      	ldr	r1, [sp, #8]
  400d68:	f041 014f 	orr.w	r1, r1, #79	; 0x4f
  400d6c:	9102      	str	r1, [sp, #8]
  400d6e:	9902      	ldr	r1, [sp, #8]
  400d70:	f021 0140 	bic.w	r1, r1, #64	; 0x40
  400d74:	9102      	str	r1, [sp, #8]
  400d76:	9902      	ldr	r1, [sp, #8]
  400d78:	6319      	str	r1, [r3, #48]	; 0x30
  400d7a:	2300      	movs	r3, #0
  400d7c:	9303      	str	r3, [sp, #12]
  400d7e:	9b03      	ldr	r3, [sp, #12]
  400d80:	2b13      	cmp	r3, #19
  400d82:	d806      	bhi.n	400d92 <udd_ep_ack_out_received+0xd6>
  400d84:	bf00      	nop
  400d86:	9b03      	ldr	r3, [sp, #12]
  400d88:	3301      	adds	r3, #1
  400d8a:	9303      	str	r3, [sp, #12]
  400d8c:	9b03      	ldr	r3, [sp, #12]
  400d8e:	2b13      	cmp	r3, #19
  400d90:	d9f8      	bls.n	400d84 <udd_ep_ack_out_received+0xc8>
		ptr_job->bank = 0;
  400d92:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  400d96:	4b05      	ldr	r3, [pc, #20]	; (400dac <udd_ep_ack_out_received+0xf0>)
  400d98:	eb03 0282 	add.w	r2, r3, r2, lsl #2
  400d9c:	7c53      	ldrb	r3, [r2, #17]
  400d9e:	f36f 0383 	bfc	r3, #2, #2
  400da2:	7453      	strb	r3, [r2, #17]
	}
}
  400da4:	b004      	add	sp, #16
  400da6:	bc30      	pop	{r4, r5}
  400da8:	4770      	bx	lr
  400daa:	bf00      	nop
  400dac:	20000588 	.word	0x20000588

00400db0 <udd_ep_in_sent>:
	return is_short_pkt;
}


static bool udd_ep_in_sent(udd_ep_id_t ep, bool b_tx)
{
  400db0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  400db4:	b083      	sub	sp, #12
	bool b_shortpacket;
	udd_ep_job_t *ptr_job = &udd_ep_job[ep - 1];
  400db6:	4686      	mov	lr, r0
  400db8:	1e46      	subs	r6, r0, #1

	// All banks are full
	if (ptr_job->bank >= udd_get_endpoint_bank_max_nbr(ep)) {
  400dba:	eb06 0286 	add.w	r2, r6, r6, lsl #2
  400dbe:	4b6c      	ldr	r3, [pc, #432]	; (400f70 <udd_ep_in_sent+0x1c0>)
  400dc0:	eb03 0382 	add.w	r3, r3, r2, lsl #2
  400dc4:	f893 8011 	ldrb.w	r8, [r3, #17]
  400dc8:	f3c8 0881 	ubfx	r8, r8, #2, #2
  400dcc:	b120      	cbz	r0, 400dd8 <udd_ep_in_sent+0x28>
  400dce:	2803      	cmp	r0, #3
  400dd0:	bf0c      	ite	eq
  400dd2:	2301      	moveq	r3, #1
  400dd4:	2302      	movne	r3, #2
  400dd6:	e000      	b.n	400dda <udd_ep_in_sent+0x2a>
  400dd8:	2301      	movs	r3, #1
  400dda:	4543      	cmp	r3, r8
  400ddc:	f340 80be 	ble.w	400f5c <udd_ep_in_sent+0x1ac>
		return true; // Data pending
	}

	// No more data in buffer
	if (ptr_job->buf_cnt >= ptr_job->buf_size && !ptr_job->b_shortpacket) {
  400de0:	eb06 0386 	add.w	r3, r6, r6, lsl #2
  400de4:	4a62      	ldr	r2, [pc, #392]	; (400f70 <udd_ep_in_sent+0x1c0>)
  400de6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  400dea:	68da      	ldr	r2, [r3, #12]
  400dec:	689b      	ldr	r3, [r3, #8]
  400dee:	429a      	cmp	r2, r3
  400df0:	d309      	bcc.n	400e06 <udd_ep_in_sent+0x56>
  400df2:	eb06 0486 	add.w	r4, r6, r6, lsl #2
  400df6:	4d5e      	ldr	r5, [pc, #376]	; (400f70 <udd_ep_in_sent+0x1c0>)
  400df8:	eb05 0484 	add.w	r4, r5, r4, lsl #2
  400dfc:	7c64      	ldrb	r4, [r4, #17]
  400dfe:	f014 0f40 	tst.w	r4, #64	; 0x40
  400e02:	f000 80ad 	beq.w	400f60 <udd_ep_in_sent+0x1b0>


static bool udd_ep_write_fifo(udd_ep_id_t ep)
{
	udd_ep_job_t *ptr_job = &udd_ep_job[ep - 1];
	uint8_t *ptr_src = &ptr_job->buf[ptr_job->buf_cnt];
  400e06:	eb06 0786 	add.w	r7, r6, r6, lsl #2
  400e0a:	4c59      	ldr	r4, [pc, #356]	; (400f70 <udd_ep_in_sent+0x1c0>)
  400e0c:	eb04 0787 	add.w	r7, r4, r7, lsl #2
  400e10:	687c      	ldr	r4, [r7, #4]
  400e12:	4414      	add	r4, r2
	uint32_t nb_remain = ptr_job->buf_size - ptr_job->buf_cnt;
  400e14:	1a9d      	subs	r5, r3, r2
	uint32_t pkt_size = ptr_job->size;
  400e16:	8a3b      	ldrh	r3, [r7, #16]
  400e18:	f3c3 0709 	ubfx	r7, r3, #0, #10
	bool is_short_pkt = false;

	// Packet size
	if (nb_remain < pkt_size) {
  400e1c:	42bd      	cmp	r5, r7
		pkt_size = nb_remain;
  400e1e:	bf3a      	itte	cc
  400e20:	462f      	movcc	r7, r5
		is_short_pkt = true;
  400e22:	f04f 0c01 	movcc.w	ip, #1
{
	udd_ep_job_t *ptr_job = &udd_ep_job[ep - 1];
	uint8_t *ptr_src = &ptr_job->buf[ptr_job->buf_cnt];
	uint32_t nb_remain = ptr_job->buf_size - ptr_job->buf_cnt;
	uint32_t pkt_size = ptr_job->size;
	bool is_short_pkt = false;
  400e26:	f04f 0c00 	movcs.w	ip, #0
		pkt_size = nb_remain;
		is_short_pkt = true;
	}

	// Modify job information
	ptr_job->buf_cnt += pkt_size;
  400e2a:	eb06 0386 	add.w	r3, r6, r6, lsl #2
  400e2e:	4d50      	ldr	r5, [pc, #320]	; (400f70 <udd_ep_in_sent+0x1c0>)
  400e30:	eb05 0383 	add.w	r3, r5, r3, lsl #2
  400e34:	443a      	add	r2, r7
  400e36:	60da      	str	r2, [r3, #12]

	// Speed block data transfer to FIFO (DPRAM)
	for (; pkt_size >= 8; pkt_size -= 8) {
  400e38:	2f07      	cmp	r7, #7
  400e3a:	d933      	bls.n	400ea4 <udd_ep_in_sent+0xf4>
  400e3c:	f104 0308 	add.w	r3, r4, #8
  400e40:	463d      	mov	r5, r7
  400e42:	0082      	lsls	r2, r0, #2
  400e44:	f102 2240 	add.w	r2, r2, #1073758208	; 0x40004000
  400e48:	f502 3240 	add.w	r2, r2, #196608	; 0x30000
		udd_endpoint_fifo_write(ep, *ptr_src++);
  400e4c:	f813 9c08 	ldrb.w	r9, [r3, #-8]
  400e50:	f8c2 9050 	str.w	r9, [r2, #80]	; 0x50
		udd_endpoint_fifo_write(ep, *ptr_src++);
  400e54:	f813 9c07 	ldrb.w	r9, [r3, #-7]
  400e58:	f8c2 9050 	str.w	r9, [r2, #80]	; 0x50
		udd_endpoint_fifo_write(ep, *ptr_src++);
  400e5c:	f813 9c06 	ldrb.w	r9, [r3, #-6]
  400e60:	f8c2 9050 	str.w	r9, [r2, #80]	; 0x50
		udd_endpoint_fifo_write(ep, *ptr_src++);
  400e64:	f813 9c05 	ldrb.w	r9, [r3, #-5]
  400e68:	f8c2 9050 	str.w	r9, [r2, #80]	; 0x50
		udd_endpoint_fifo_write(ep, *ptr_src++);
  400e6c:	f813 9c04 	ldrb.w	r9, [r3, #-4]
  400e70:	f8c2 9050 	str.w	r9, [r2, #80]	; 0x50
		udd_endpoint_fifo_write(ep, *ptr_src++);
  400e74:	f813 9c03 	ldrb.w	r9, [r3, #-3]
  400e78:	f8c2 9050 	str.w	r9, [r2, #80]	; 0x50
		udd_endpoint_fifo_write(ep, *ptr_src++);
  400e7c:	f813 9c02 	ldrb.w	r9, [r3, #-2]
  400e80:	f8c2 9050 	str.w	r9, [r2, #80]	; 0x50
		udd_endpoint_fifo_write(ep, *ptr_src++);
  400e84:	f813 9c01 	ldrb.w	r9, [r3, #-1]
  400e88:	f8c2 9050 	str.w	r9, [r2, #80]	; 0x50

	// Modify job information
	ptr_job->buf_cnt += pkt_size;

	// Speed block data transfer to FIFO (DPRAM)
	for (; pkt_size >= 8; pkt_size -= 8) {
  400e8c:	3d08      	subs	r5, #8
  400e8e:	3308      	adds	r3, #8
  400e90:	2d07      	cmp	r5, #7
  400e92:	d8db      	bhi.n	400e4c <udd_ep_in_sent+0x9c>
  400e94:	f1a7 0308 	sub.w	r3, r7, #8
  400e98:	f023 0307 	bic.w	r3, r3, #7
  400e9c:	3308      	adds	r3, #8
  400e9e:	441c      	add	r4, r3
  400ea0:	f007 0707 	and.w	r7, r7, #7
		udd_endpoint_fifo_write(ep, *ptr_src++);
		udd_endpoint_fifo_write(ep, *ptr_src++);
		udd_endpoint_fifo_write(ep, *ptr_src++);
	}
	// Normal speed data transfer to FIFO (DPRAM)
	for (; pkt_size; pkt_size--) {
  400ea4:	b14f      	cbz	r7, 400eba <udd_ep_in_sent+0x10a>
  400ea6:	19e3      	adds	r3, r4, r7
		udd_endpoint_fifo_write(ep, *ptr_src++);
  400ea8:	4f32      	ldr	r7, [pc, #200]	; (400f74 <udd_ep_in_sent+0x1c4>)
  400eaa:	f814 5b01 	ldrb.w	r5, [r4], #1
  400eae:	f10e 0214 	add.w	r2, lr, #20
  400eb2:	f847 5022 	str.w	r5, [r7, r2, lsl #2]
		udd_endpoint_fifo_write(ep, *ptr_src++);
		udd_endpoint_fifo_write(ep, *ptr_src++);
		udd_endpoint_fifo_write(ep, *ptr_src++);
	}
	// Normal speed data transfer to FIFO (DPRAM)
	for (; pkt_size; pkt_size--) {
  400eb6:	429c      	cmp	r4, r3
  400eb8:	d1f7      	bne.n	400eaa <udd_ep_in_sent+0xfa>
		udd_endpoint_fifo_write(ep, *ptr_src++);
	}

	// Add to buffered banks
	ptr_job->bank++;
  400eba:	eb06 0386 	add.w	r3, r6, r6, lsl #2
  400ebe:	4a2c      	ldr	r2, [pc, #176]	; (400f70 <udd_ep_in_sent+0x1c0>)
  400ec0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  400ec4:	f108 0801 	add.w	r8, r8, #1
  400ec8:	7c5a      	ldrb	r2, [r3, #17]
  400eca:	f368 0283 	bfi	r2, r8, #2, #2
  400ece:	745a      	strb	r2, [r3, #17]

	// Fill FIFO
	b_shortpacket = udd_ep_write_fifo(ep);

	// Data is ready to send
	if (b_tx) {
  400ed0:	b1e1      	cbz	r1, 400f0c <udd_ep_in_sent+0x15c>
  400ed2:	0080      	lsls	r0, r0, #2
  400ed4:	f100 2040 	add.w	r0, r0, #1073758208	; 0x40004000
  400ed8:	f500 3040 	add.w	r0, r0, #196608	; 0x30000
		udd_set_transmit_ready(ep);
  400edc:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400ede:	9300      	str	r3, [sp, #0]
  400ee0:	9b00      	ldr	r3, [sp, #0]
  400ee2:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  400ee6:	9300      	str	r3, [sp, #0]
  400ee8:	9b00      	ldr	r3, [sp, #0]
  400eea:	f043 0310 	orr.w	r3, r3, #16
  400eee:	9300      	str	r3, [sp, #0]
  400ef0:	9b00      	ldr	r3, [sp, #0]
  400ef2:	6303      	str	r3, [r0, #48]	; 0x30
  400ef4:	2300      	movs	r3, #0
  400ef6:	9301      	str	r3, [sp, #4]
  400ef8:	9b01      	ldr	r3, [sp, #4]
  400efa:	2b13      	cmp	r3, #19
  400efc:	d806      	bhi.n	400f0c <udd_ep_in_sent+0x15c>
  400efe:	bf00      	nop
  400f00:	9b01      	ldr	r3, [sp, #4]
  400f02:	3301      	adds	r3, #1
  400f04:	9301      	str	r3, [sp, #4]
  400f06:	9b01      	ldr	r3, [sp, #4]
  400f08:	2b13      	cmp	r3, #19
  400f0a:	d9f8      	bls.n	400efe <udd_ep_in_sent+0x14e>
	}
	// Short PKT? no need to send it again.
	if (b_shortpacket) {
  400f0c:	f1bc 0f00 	cmp.w	ip, #0
  400f10:	d008      	beq.n	400f24 <udd_ep_in_sent+0x174>
		ptr_job->b_shortpacket = false;
  400f12:	eb06 0386 	add.w	r3, r6, r6, lsl #2
  400f16:	4a16      	ldr	r2, [pc, #88]	; (400f70 <udd_ep_in_sent+0x1c0>)
  400f18:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  400f1c:	7c5a      	ldrb	r2, [r3, #17]
  400f1e:	f36f 1286 	bfc	r2, #6, #1
  400f22:	745a      	strb	r2, [r3, #17]
	}
	// All transfer done, including ZLP, Finish Job
	if ((ptr_job->buf_cnt >= ptr_job->buf_size)
  400f24:	eb06 0386 	add.w	r3, r6, r6, lsl #2
  400f28:	4a11      	ldr	r2, [pc, #68]	; (400f70 <udd_ep_in_sent+0x1c0>)
  400f2a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  400f2e:	68da      	ldr	r2, [r3, #12]
  400f30:	689b      	ldr	r3, [r3, #8]
  400f32:	429a      	cmp	r2, r3
  400f34:	d316      	bcc.n	400f64 <udd_ep_in_sent+0x1b4>
			&& (!ptr_job->b_shortpacket)) {
  400f36:	eb06 0386 	add.w	r3, r6, r6, lsl #2
  400f3a:	4a0d      	ldr	r2, [pc, #52]	; (400f70 <udd_ep_in_sent+0x1c0>)
  400f3c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  400f40:	7c5b      	ldrb	r3, [r3, #17]
  400f42:	f013 0f40 	tst.w	r3, #64	; 0x40
  400f46:	d10f      	bne.n	400f68 <udd_ep_in_sent+0x1b8>
		ptr_job->b_buf_end = true;
  400f48:	eb06 0686 	add.w	r6, r6, r6, lsl #2
  400f4c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
  400f50:	7c73      	ldrb	r3, [r6, #17]
  400f52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  400f56:	7473      	strb	r3, [r6, #17]
		return false;
  400f58:	2000      	movs	r0, #0
  400f5a:	e006      	b.n	400f6a <udd_ep_in_sent+0x1ba>
	bool b_shortpacket;
	udd_ep_job_t *ptr_job = &udd_ep_job[ep - 1];

	// All banks are full
	if (ptr_job->bank >= udd_get_endpoint_bank_max_nbr(ep)) {
		return true; // Data pending
  400f5c:	2001      	movs	r0, #1
  400f5e:	e004      	b.n	400f6a <udd_ep_in_sent+0x1ba>
	}

	// No more data in buffer
	if (ptr_job->buf_cnt >= ptr_job->buf_size && !ptr_job->b_shortpacket) {
		return false;
  400f60:	2000      	movs	r0, #0
  400f62:	e002      	b.n	400f6a <udd_ep_in_sent+0x1ba>
	if ((ptr_job->buf_cnt >= ptr_job->buf_size)
			&& (!ptr_job->b_shortpacket)) {
		ptr_job->b_buf_end = true;
		return false;
	}
	return true; // Pending
  400f64:	2001      	movs	r0, #1
  400f66:	e000      	b.n	400f6a <udd_ep_in_sent+0x1ba>
  400f68:	2001      	movs	r0, #1
}
  400f6a:	b003      	add	sp, #12
  400f6c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  400f70:	20000588 	.word	0x20000588
  400f74:	40034000 	.word	0x40034000

00400f78 <UDP_Handler>:
 * - control endpoint events (setup reception, end of data transfer, underflow, overflow, stall)
 * - bulk/interrupt/isochronous endpoints events (end of data transfer)
 *
 */
ISR(UDD_USB_INT_FUN)
{
  400f78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  400f7c:	b0b1      	sub	sp, #196	; 0xc4
	/* For fast wakeup clocks restore
	 * In WAIT mode, clocks are switched to FASTRC.
	 * After wakeup clocks should be restored, before that ISR should not
	 * be served.
	 */
	if (!pmc_is_wakeup_clocks_restored() && !Is_udd_suspend()) {
  400f7e:	4b95      	ldr	r3, [pc, #596]	; (4011d4 <UDP_Handler+0x25c>)
  400f80:	4798      	blx	r3
  400f82:	b960      	cbnz	r0, 400f9e <UDP_Handler+0x26>
  400f84:	4b94      	ldr	r3, [pc, #592]	; (4011d8 <UDP_Handler+0x260>)
  400f86:	69db      	ldr	r3, [r3, #28]
  400f88:	f413 7f80 	tst.w	r3, #256	; 0x100
  400f8c:	d107      	bne.n	400f9e <UDP_Handler+0x26>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
  400f8e:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  400f90:	f3bf 8f5f 	dmb	sy
		cpu_irq_disable();
  400f94:	2200      	movs	r2, #0
  400f96:	4b91      	ldr	r3, [pc, #580]	; (4011dc <UDP_Handler+0x264>)
  400f98:	701a      	strb	r2, [r3, #0]
		return;
  400f9a:	f000 bd54 	b.w	401a46 <UDP_Handler+0xace>
	}

	/* The UDP peripheral clock in the Power Management Controller (PMC)
	   must be enabled before any read/write operations to the UDP registers
	   including the UDP_TXVC register. */
	udd_enable_periph_ck();
  400f9e:	2022      	movs	r0, #34	; 0x22
  400fa0:	4b8f      	ldr	r3, [pc, #572]	; (4011e0 <UDP_Handler+0x268>)
  400fa2:	4798      	blx	r3

	if (Is_udd_sof_interrupt_enabled() && Is_udd_sof()) {
  400fa4:	4b8c      	ldr	r3, [pc, #560]	; (4011d8 <UDP_Handler+0x260>)
  400fa6:	699b      	ldr	r3, [r3, #24]
  400fa8:	f413 6f00 	tst.w	r3, #2048	; 0x800
  400fac:	d00c      	beq.n	400fc8 <UDP_Handler+0x50>
  400fae:	4b8a      	ldr	r3, [pc, #552]	; (4011d8 <UDP_Handler+0x260>)
  400fb0:	69db      	ldr	r3, [r3, #28]
  400fb2:	f413 6f00 	tst.w	r3, #2048	; 0x800
  400fb6:	d007      	beq.n	400fc8 <UDP_Handler+0x50>
		udd_ack_sof();
  400fb8:	f44f 6200 	mov.w	r2, #2048	; 0x800
  400fbc:	4b86      	ldr	r3, [pc, #536]	; (4011d8 <UDP_Handler+0x260>)
  400fbe:	621a      	str	r2, [r3, #32]
		udc_sof_notify();
  400fc0:	4b88      	ldr	r3, [pc, #544]	; (4011e4 <UDP_Handler+0x26c>)
  400fc2:	4798      	blx	r3
#ifdef UDC_SOF_EVENT
		UDC_SOF_EVENT();
#endif
		goto udd_interrupt_sof_end;
  400fc4:	f000 bd3f 	b.w	401a46 <UDP_Handler+0xace>
}


static bool udd_ctrl_interrupt(void)
{
	if (!Is_udd_endpoint_interrupt(0))
  400fc8:	4b83      	ldr	r3, [pc, #524]	; (4011d8 <UDP_Handler+0x260>)
  400fca:	69db      	ldr	r3, [r3, #28]
  400fcc:	f013 0f01 	tst.w	r3, #1
  400fd0:	f000 81f2 	beq.w	4013b8 <UDP_Handler+0x440>
		return false; // No interrupt events on control endpoint

	// Search event on control endpoint
	if (Is_udd_setup_received(0)) {
  400fd4:	4b80      	ldr	r3, [pc, #512]	; (4011d8 <UDP_Handler+0x260>)
  400fd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400fd8:	f013 0f04 	tst.w	r3, #4
  400fdc:	f000 80c0 	beq.w	401160 <UDP_Handler+0x1e8>

static void udd_ctrl_setup_received(void)
{
	uint8_t i;

	if (UDD_EPCTRL_SETUP != udd_ep_control_state) {
  400fe0:	4b81      	ldr	r3, [pc, #516]	; (4011e8 <UDP_Handler+0x270>)
  400fe2:	781b      	ldrb	r3, [r3, #0]
  400fe4:	b11b      	cbz	r3, 400fee <UDP_Handler+0x76>
		// May be a hidden DATA or ZLP phase
		// or protocol abort
		udd_ctrl_endofrequest();
  400fe6:	4b81      	ldr	r3, [pc, #516]	; (4011ec <UDP_Handler+0x274>)
  400fe8:	4798      	blx	r3

		// Reinitializes control endpoint management
		udd_ctrl_init();
  400fea:	4b81      	ldr	r3, [pc, #516]	; (4011f0 <UDP_Handler+0x278>)
  400fec:	4798      	blx	r3
	}
	// Fill setup request structure
	if (8 != udd_byte_count(0)) {
  400fee:	4b7a      	ldr	r3, [pc, #488]	; (4011d8 <UDP_Handler+0x260>)
  400ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400ff2:	f3c3 430a 	ubfx	r3, r3, #16, #11
  400ff6:	2b08      	cmp	r3, #8
  400ff8:	d01c      	beq.n	401034 <UDP_Handler+0xbc>
		udd_ack_setup_received(0);
  400ffa:	4a77      	ldr	r2, [pc, #476]	; (4011d8 <UDP_Handler+0x260>)
  400ffc:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400ffe:	9302      	str	r3, [sp, #8]
  401000:	9b02      	ldr	r3, [sp, #8]
  401002:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  401006:	9302      	str	r3, [sp, #8]
  401008:	9b02      	ldr	r3, [sp, #8]
  40100a:	f023 0304 	bic.w	r3, r3, #4
  40100e:	9302      	str	r3, [sp, #8]
  401010:	9b02      	ldr	r3, [sp, #8]
  401012:	6313      	str	r3, [r2, #48]	; 0x30
  401014:	2300      	movs	r3, #0
  401016:	9303      	str	r3, [sp, #12]
  401018:	9b03      	ldr	r3, [sp, #12]
  40101a:	2b13      	cmp	r3, #19
  40101c:	d806      	bhi.n	40102c <UDP_Handler+0xb4>

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
  40101e:	bf00      	nop
  401020:	9b03      	ldr	r3, [sp, #12]
  401022:	3301      	adds	r3, #1
  401024:	9303      	str	r3, [sp, #12]
  401026:	9b03      	ldr	r3, [sp, #12]
  401028:	2b13      	cmp	r3, #19
  40102a:	d9f8      	bls.n	40101e <UDP_Handler+0xa6>
		udd_ctrl_stall_data();
  40102c:	4b71      	ldr	r3, [pc, #452]	; (4011f4 <UDP_Handler+0x27c>)
  40102e:	4798      	blx	r3
  401030:	f000 bd09 	b.w	401a46 <UDP_Handler+0xace>
  401034:	4b70      	ldr	r3, [pc, #448]	; (4011f8 <UDP_Handler+0x280>)
  401036:	f103 0008 	add.w	r0, r3, #8
		return; // Error data number doesn't correspond to SETUP packet
	}
	for (i = 0; i < 8; i++) {
		((uint8_t *) & udd_g_ctrlreq.req)[i] =
			udd_endpoint_fifo_read(0);
  40103a:	4967      	ldr	r1, [pc, #412]	; (4011d8 <UDP_Handler+0x260>)
  40103c:	6d0a      	ldr	r2, [r1, #80]	; 0x50
		udd_ack_setup_received(0);
		udd_ctrl_stall_data();
		return; // Error data number doesn't correspond to SETUP packet
	}
	for (i = 0; i < 8; i++) {
		((uint8_t *) & udd_g_ctrlreq.req)[i] =
  40103e:	f803 2f01 	strb.w	r2, [r3, #1]!
	if (8 != udd_byte_count(0)) {
		udd_ack_setup_received(0);
		udd_ctrl_stall_data();
		return; // Error data number doesn't correspond to SETUP packet
	}
	for (i = 0; i < 8; i++) {
  401042:	4283      	cmp	r3, r0
  401044:	d1fa      	bne.n	40103c <UDP_Handler+0xc4>
	udd_g_ctrlreq.req.wValue = le16_to_cpu(udd_g_ctrlreq.req.wValue);
	udd_g_ctrlreq.req.wIndex = le16_to_cpu(udd_g_ctrlreq.req.wIndex);
	udd_g_ctrlreq.req.wLength = le16_to_cpu(udd_g_ctrlreq.req.wLength);

	// Decode setup request
	if (udc_process_setup() == false) {
  401046:	4b6d      	ldr	r3, [pc, #436]	; (4011fc <UDP_Handler+0x284>)
  401048:	4798      	blx	r3
  40104a:	b9e0      	cbnz	r0, 401086 <UDP_Handler+0x10e>
		// Setup request unknown then stall it
		udd_ack_setup_received(0);
  40104c:	4a62      	ldr	r2, [pc, #392]	; (4011d8 <UDP_Handler+0x260>)
  40104e:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401050:	9304      	str	r3, [sp, #16]
  401052:	9b04      	ldr	r3, [sp, #16]
  401054:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  401058:	9304      	str	r3, [sp, #16]
  40105a:	9b04      	ldr	r3, [sp, #16]
  40105c:	f023 0304 	bic.w	r3, r3, #4
  401060:	9304      	str	r3, [sp, #16]
  401062:	9b04      	ldr	r3, [sp, #16]
  401064:	6313      	str	r3, [r2, #48]	; 0x30
  401066:	2300      	movs	r3, #0
  401068:	9305      	str	r3, [sp, #20]
  40106a:	9b05      	ldr	r3, [sp, #20]
  40106c:	2b13      	cmp	r3, #19
  40106e:	d806      	bhi.n	40107e <UDP_Handler+0x106>
  401070:	bf00      	nop
  401072:	9b05      	ldr	r3, [sp, #20]
  401074:	3301      	adds	r3, #1
  401076:	9305      	str	r3, [sp, #20]
  401078:	9b05      	ldr	r3, [sp, #20]
  40107a:	2b13      	cmp	r3, #19
  40107c:	d9f8      	bls.n	401070 <UDP_Handler+0xf8>
		udd_ctrl_stall_data();
  40107e:	4b5d      	ldr	r3, [pc, #372]	; (4011f4 <UDP_Handler+0x27c>)
  401080:	4798      	blx	r3
  401082:	f000 bce0 	b.w	401a46 <UDP_Handler+0xace>
		return;
	}

	if (Udd_setup_is_in()) {
  401086:	4b5e      	ldr	r3, [pc, #376]	; (401200 <UDP_Handler+0x288>)
  401088:	f993 3000 	ldrsb.w	r3, [r3]
  40108c:	2b00      	cmp	r3, #0
  40108e:	da3d      	bge.n	40110c <UDP_Handler+0x194>
		// Set DIR
		udd_set_endpoint_direction_in(0);
  401090:	4a51      	ldr	r2, [pc, #324]	; (4011d8 <UDP_Handler+0x260>)
  401092:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401094:	9306      	str	r3, [sp, #24]
  401096:	9b06      	ldr	r3, [sp, #24]
  401098:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  40109c:	9306      	str	r3, [sp, #24]
  40109e:	9b06      	ldr	r3, [sp, #24]
  4010a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  4010a4:	9306      	str	r3, [sp, #24]
  4010a6:	9b06      	ldr	r3, [sp, #24]
  4010a8:	6313      	str	r3, [r2, #48]	; 0x30
  4010aa:	2300      	movs	r3, #0
  4010ac:	9307      	str	r3, [sp, #28]
  4010ae:	9b07      	ldr	r3, [sp, #28]
  4010b0:	2b13      	cmp	r3, #19
  4010b2:	d806      	bhi.n	4010c2 <UDP_Handler+0x14a>
  4010b4:	bf00      	nop
  4010b6:	9b07      	ldr	r3, [sp, #28]
  4010b8:	3301      	adds	r3, #1
  4010ba:	9307      	str	r3, [sp, #28]
  4010bc:	9b07      	ldr	r3, [sp, #28]
  4010be:	2b13      	cmp	r3, #19
  4010c0:	d9f8      	bls.n	4010b4 <UDP_Handler+0x13c>
		udd_ack_setup_received(0);
  4010c2:	4a45      	ldr	r2, [pc, #276]	; (4011d8 <UDP_Handler+0x260>)
  4010c4:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4010c6:	9308      	str	r3, [sp, #32]
  4010c8:	9b08      	ldr	r3, [sp, #32]
  4010ca:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  4010ce:	9308      	str	r3, [sp, #32]
  4010d0:	9b08      	ldr	r3, [sp, #32]
  4010d2:	f023 0304 	bic.w	r3, r3, #4
  4010d6:	9308      	str	r3, [sp, #32]
  4010d8:	9b08      	ldr	r3, [sp, #32]
  4010da:	6313      	str	r3, [r2, #48]	; 0x30
  4010dc:	2300      	movs	r3, #0
  4010de:	9309      	str	r3, [sp, #36]	; 0x24
  4010e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4010e2:	2b13      	cmp	r3, #19
  4010e4:	d806      	bhi.n	4010f4 <UDP_Handler+0x17c>
  4010e6:	bf00      	nop
  4010e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4010ea:	3301      	adds	r3, #1
  4010ec:	9309      	str	r3, [sp, #36]	; 0x24
  4010ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4010f0:	2b13      	cmp	r3, #19
  4010f2:	d9f8      	bls.n	4010e6 <UDP_Handler+0x16e>
		// IN data phase requested
		udd_ctrl_prev_payload_nb_trans = 0;
  4010f4:	2300      	movs	r3, #0
  4010f6:	4a43      	ldr	r2, [pc, #268]	; (401204 <UDP_Handler+0x28c>)
  4010f8:	8013      	strh	r3, [r2, #0]
		udd_ctrl_payload_nb_trans = 0;
  4010fa:	4a43      	ldr	r2, [pc, #268]	; (401208 <UDP_Handler+0x290>)
  4010fc:	8013      	strh	r3, [r2, #0]
		udd_ep_control_state = UDD_EPCTRL_DATA_IN;
  4010fe:	2202      	movs	r2, #2
  401100:	4b39      	ldr	r3, [pc, #228]	; (4011e8 <UDP_Handler+0x270>)
  401102:	701a      	strb	r2, [r3, #0]
		udd_ctrl_in_sent(); // Send first data transfer
  401104:	4b41      	ldr	r3, [pc, #260]	; (40120c <UDP_Handler+0x294>)
  401106:	4798      	blx	r3
  401108:	f000 bc9d 	b.w	401a46 <UDP_Handler+0xace>
	} else {
		udd_ack_setup_received(0);
  40110c:	4a32      	ldr	r2, [pc, #200]	; (4011d8 <UDP_Handler+0x260>)
  40110e:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401110:	930a      	str	r3, [sp, #40]	; 0x28
  401112:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  401114:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  401118:	930a      	str	r3, [sp, #40]	; 0x28
  40111a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40111c:	f023 0304 	bic.w	r3, r3, #4
  401120:	930a      	str	r3, [sp, #40]	; 0x28
  401122:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  401124:	6313      	str	r3, [r2, #48]	; 0x30
  401126:	2300      	movs	r3, #0
  401128:	930b      	str	r3, [sp, #44]	; 0x2c
  40112a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40112c:	2b13      	cmp	r3, #19
  40112e:	d806      	bhi.n	40113e <UDP_Handler+0x1c6>
  401130:	bf00      	nop
  401132:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  401134:	3301      	adds	r3, #1
  401136:	930b      	str	r3, [sp, #44]	; 0x2c
  401138:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40113a:	2b13      	cmp	r3, #19
  40113c:	d9f8      	bls.n	401130 <UDP_Handler+0x1b8>
		if (0 == udd_g_ctrlreq.req.wLength) {
  40113e:	4b30      	ldr	r3, [pc, #192]	; (401200 <UDP_Handler+0x288>)
  401140:	88db      	ldrh	r3, [r3, #6]
  401142:	b91b      	cbnz	r3, 40114c <UDP_Handler+0x1d4>
			// No data phase requested
			// Send IN ZLP to ACK setup request
			udd_ctrl_send_zlp_in();
  401144:	4b32      	ldr	r3, [pc, #200]	; (401210 <UDP_Handler+0x298>)
  401146:	4798      	blx	r3
  401148:	f000 bc7d 	b.w	401a46 <UDP_Handler+0xace>
			return;
		}
		// OUT data phase requested
		udd_ctrl_prev_payload_nb_trans = 0;
  40114c:	2300      	movs	r3, #0
  40114e:	4a2d      	ldr	r2, [pc, #180]	; (401204 <UDP_Handler+0x28c>)
  401150:	8013      	strh	r3, [r2, #0]
		udd_ctrl_payload_nb_trans = 0;
  401152:	4a2d      	ldr	r2, [pc, #180]	; (401208 <UDP_Handler+0x290>)
  401154:	8013      	strh	r3, [r2, #0]
		udd_ep_control_state = UDD_EPCTRL_DATA_OUT;
  401156:	2201      	movs	r2, #1
  401158:	4b23      	ldr	r3, [pc, #140]	; (4011e8 <UDP_Handler+0x270>)
  40115a:	701a      	strb	r2, [r3, #0]
  40115c:	f000 bc73 	b.w	401a46 <UDP_Handler+0xace>
	if (Is_udd_setup_received(0)) {
		// SETUP packet received
		udd_ctrl_setup_received();
		return true;
	}
	if (Is_udd_in_sent(0)) {
  401160:	4b1d      	ldr	r3, [pc, #116]	; (4011d8 <UDP_Handler+0x260>)
  401162:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401164:	f013 0f01 	tst.w	r3, #1
  401168:	d003      	beq.n	401172 <UDP_Handler+0x1fa>
		// IN packet sent
		udd_ctrl_in_sent();
  40116a:	4b28      	ldr	r3, [pc, #160]	; (40120c <UDP_Handler+0x294>)
  40116c:	4798      	blx	r3
  40116e:	f000 bc6a 	b.w	401a46 <UDP_Handler+0xace>
		return true;
	}
	if (Is_udd_bank0_received(0)) {
  401172:	4b19      	ldr	r3, [pc, #100]	; (4011d8 <UDP_Handler+0x260>)
  401174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401176:	f013 0f02 	tst.w	r3, #2
  40117a:	f000 8118 	beq.w	4013ae <UDP_Handler+0x436>
static void udd_ctrl_out_received(void)
{
	uint8_t i;
	uint16_t nb_data;

	if (UDD_EPCTRL_DATA_OUT != udd_ep_control_state) {
  40117e:	4b1a      	ldr	r3, [pc, #104]	; (4011e8 <UDP_Handler+0x270>)
  401180:	781b      	ldrb	r3, [r3, #0]
  401182:	2b01      	cmp	r3, #1
  401184:	d046      	beq.n	401214 <UDP_Handler+0x29c>
		if ((UDD_EPCTRL_DATA_IN == udd_ep_control_state)
  401186:	2b02      	cmp	r3, #2
  401188:	d001      	beq.n	40118e <UDP_Handler+0x216>
				|| (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP ==
  40118a:	2b04      	cmp	r3, #4
  40118c:	d102      	bne.n	401194 <UDP_Handler+0x21c>
				udd_ep_control_state)) {
			// End of SETUP request:
			// - Data IN Phase aborted,
			// - or last Data IN Phase hidden by ZLP OUT sending quickly,
			// - or ZLP OUT received normally.
			udd_ctrl_endofrequest();
  40118e:	4b17      	ldr	r3, [pc, #92]	; (4011ec <UDP_Handler+0x274>)
  401190:	4798      	blx	r3
  401192:	e001      	b.n	401198 <UDP_Handler+0x220>
		} else {
			// Protocol error during SETUP request
			udd_ctrl_stall_data();
  401194:	4b17      	ldr	r3, [pc, #92]	; (4011f4 <UDP_Handler+0x27c>)
  401196:	4798      	blx	r3
		}
		udd_ack_bank0_received(0);
  401198:	4a0f      	ldr	r2, [pc, #60]	; (4011d8 <UDP_Handler+0x260>)
  40119a:	6b13      	ldr	r3, [r2, #48]	; 0x30
  40119c:	930c      	str	r3, [sp, #48]	; 0x30
  40119e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  4011a0:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  4011a4:	930c      	str	r3, [sp, #48]	; 0x30
  4011a6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  4011a8:	f023 0302 	bic.w	r3, r3, #2
  4011ac:	930c      	str	r3, [sp, #48]	; 0x30
  4011ae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  4011b0:	6313      	str	r3, [r2, #48]	; 0x30
  4011b2:	2300      	movs	r3, #0
  4011b4:	930d      	str	r3, [sp, #52]	; 0x34
  4011b6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4011b8:	2b13      	cmp	r3, #19
  4011ba:	d806      	bhi.n	4011ca <UDP_Handler+0x252>
  4011bc:	bf00      	nop
  4011be:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4011c0:	3301      	adds	r3, #1
  4011c2:	930d      	str	r3, [sp, #52]	; 0x34
  4011c4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4011c6:	2b13      	cmp	r3, #19
  4011c8:	d9f8      	bls.n	4011bc <UDP_Handler+0x244>
		// Reinitializes control endpoint management
		udd_ctrl_init();
  4011ca:	4b09      	ldr	r3, [pc, #36]	; (4011f0 <UDP_Handler+0x278>)
  4011cc:	4798      	blx	r3
  4011ce:	f000 bc3a 	b.w	401a46 <UDP_Handler+0xace>
  4011d2:	bf00      	nop
  4011d4:	00402781 	.word	0x00402781
  4011d8:	40034000 	.word	0x40034000
  4011dc:	20000097 	.word	0x20000097
  4011e0:	004026a5 	.word	0x004026a5
  4011e4:	00400375 	.word	0x00400375
  4011e8:	200005dc 	.word	0x200005dc
  4011ec:	00400a6d 	.word	0x00400a6d
  4011f0:	004009c5 	.word	0x004009c5
  4011f4:	004009dd 	.word	0x004009dd
  4011f8:	200005ef 	.word	0x200005ef
  4011fc:	004003b1 	.word	0x004003b1
  401200:	200005f0 	.word	0x200005f0
  401204:	20000586 	.word	0x20000586
  401208:	200005da 	.word	0x200005da
  40120c:	00400a7d 	.word	0x00400a7d
  401210:	00400a25 	.word	0x00400a25
		return;
	}
	// Read data received during OUT phase
	nb_data = udd_byte_count(0);
  401214:	4b92      	ldr	r3, [pc, #584]	; (401460 <UDP_Handler+0x4e8>)
  401216:	6b19      	ldr	r1, [r3, #48]	; 0x30
  401218:	f3c1 410a 	ubfx	r1, r1, #16, #11
	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_nb_trans + nb_data)) {
  40121c:	4b91      	ldr	r3, [pc, #580]	; (401464 <UDP_Handler+0x4ec>)
  40121e:	899b      	ldrh	r3, [r3, #12]
  401220:	4a91      	ldr	r2, [pc, #580]	; (401468 <UDP_Handler+0x4f0>)
  401222:	8815      	ldrh	r5, [r2, #0]
  401224:	186a      	adds	r2, r5, r1
  401226:	4293      	cmp	r3, r2
		// Reinitializes control endpoint management
		udd_ctrl_init();
		return;
	}
	// Read data received during OUT phase
	nb_data = udd_byte_count(0);
  401228:	bfae      	itee	ge
  40122a:	b289      	uxthge	r1, r1
	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_nb_trans + nb_data)) {
		// Payload buffer too small
		nb_data = udd_g_ctrlreq.payload_size -
  40122c:	1b5b      	sublt	r3, r3, r5
  40122e:	b299      	uxthlt	r1, r3
				udd_ctrl_payload_nb_trans;
	}
	uint8_t *ptr_dest = udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans;
  401230:	4b8c      	ldr	r3, [pc, #560]	; (401464 <UDP_Handler+0x4ec>)
  401232:	6898      	ldr	r0, [r3, #8]
  401234:	4428      	add	r0, r5
	for (i = 0; i < nb_data; i++) {
  401236:	b1a9      	cbz	r1, 401264 <UDP_Handler+0x2ec>
  401238:	4602      	mov	r2, r0
		*ptr_dest++ = udd_endpoint_fifo_read(0);
  40123a:	4c89      	ldr	r4, [pc, #548]	; (401460 <UDP_Handler+0x4e8>)
  40123c:	6d23      	ldr	r3, [r4, #80]	; 0x50
  40123e:	f802 3b01 	strb.w	r3, [r2], #1
  401242:	1a13      	subs	r3, r2, r0
		// Payload buffer too small
		nb_data = udd_g_ctrlreq.payload_size -
				udd_ctrl_payload_nb_trans;
	}
	uint8_t *ptr_dest = udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans;
	for (i = 0; i < nb_data; i++) {
  401244:	b2db      	uxtb	r3, r3
  401246:	428b      	cmp	r3, r1
  401248:	d3f8      	bcc.n	40123c <UDP_Handler+0x2c4>
		*ptr_dest++ = udd_endpoint_fifo_read(0);
	}
	udd_ctrl_payload_nb_trans += nb_data;
  40124a:	440d      	add	r5, r1
  40124c:	b2ad      	uxth	r5, r5
  40124e:	4b86      	ldr	r3, [pc, #536]	; (401468 <UDP_Handler+0x4f0>)
  401250:	801d      	strh	r5, [r3, #0]

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data)
  401252:	2940      	cmp	r1, #64	; 0x40
  401254:	d106      	bne.n	401264 <UDP_Handler+0x2ec>
			|| (udd_g_ctrlreq.req.wLength <=
  401256:	4b83      	ldr	r3, [pc, #524]	; (401464 <UDP_Handler+0x4ec>)
  401258:	88da      	ldrh	r2, [r3, #6]
			(udd_ctrl_prev_payload_nb_trans +
  40125a:	4b84      	ldr	r3, [pc, #528]	; (40146c <UDP_Handler+0x4f4>)
  40125c:	881b      	ldrh	r3, [r3, #0]
  40125e:	442b      	add	r3, r5
		*ptr_dest++ = udd_endpoint_fifo_read(0);
	}
	udd_ctrl_payload_nb_trans += nb_data;

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data)
			|| (udd_g_ctrlreq.req.wLength <=
  401260:	429a      	cmp	r2, r3
  401262:	dc3e      	bgt.n	4012e2 <UDP_Handler+0x36a>
			(udd_ctrl_prev_payload_nb_trans +
			udd_ctrl_payload_nb_trans))) {
		// End of reception because it is a short packet
		// Before send ZLP, call intermediate callback
		// in case of data receive generate a stall
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_nb_trans;
  401264:	4b7f      	ldr	r3, [pc, #508]	; (401464 <UDP_Handler+0x4ec>)
  401266:	819d      	strh	r5, [r3, #12]
		if (NULL != udd_g_ctrlreq.over_under_run) {
  401268:	695b      	ldr	r3, [r3, #20]
  40126a:	b1f3      	cbz	r3, 4012aa <UDP_Handler+0x332>
			if (!udd_g_ctrlreq.over_under_run()) {
  40126c:	4798      	blx	r3
  40126e:	b9e0      	cbnz	r0, 4012aa <UDP_Handler+0x332>
				// Stall ZLP
				udd_ctrl_stall_data();
  401270:	4b7f      	ldr	r3, [pc, #508]	; (401470 <UDP_Handler+0x4f8>)
  401272:	4798      	blx	r3
				// Ack reception of OUT to replace NAK by a STALL
				udd_ack_bank0_received(0);
  401274:	4a7a      	ldr	r2, [pc, #488]	; (401460 <UDP_Handler+0x4e8>)
  401276:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401278:	930e      	str	r3, [sp, #56]	; 0x38
  40127a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40127c:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  401280:	930e      	str	r3, [sp, #56]	; 0x38
  401282:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  401284:	f023 0302 	bic.w	r3, r3, #2
  401288:	930e      	str	r3, [sp, #56]	; 0x38
  40128a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40128c:	6313      	str	r3, [r2, #48]	; 0x30
  40128e:	2300      	movs	r3, #0
  401290:	930f      	str	r3, [sp, #60]	; 0x3c
  401292:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  401294:	2b13      	cmp	r3, #19
  401296:	f200 83d6 	bhi.w	401a46 <UDP_Handler+0xace>
  40129a:	bf00      	nop
  40129c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  40129e:	3301      	adds	r3, #1
  4012a0:	930f      	str	r3, [sp, #60]	; 0x3c
  4012a2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  4012a4:	2b13      	cmp	r3, #19
  4012a6:	d9f8      	bls.n	40129a <UDP_Handler+0x322>
  4012a8:	e3cd      	b.n	401a46 <UDP_Handler+0xace>
				return;
			}
		}
		// Send IN ZLP to ACK setup request
		udd_ack_bank0_received(0);
  4012aa:	4a6d      	ldr	r2, [pc, #436]	; (401460 <UDP_Handler+0x4e8>)
  4012ac:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4012ae:	9310      	str	r3, [sp, #64]	; 0x40
  4012b0:	9b10      	ldr	r3, [sp, #64]	; 0x40
  4012b2:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  4012b6:	9310      	str	r3, [sp, #64]	; 0x40
  4012b8:	9b10      	ldr	r3, [sp, #64]	; 0x40
  4012ba:	f023 0302 	bic.w	r3, r3, #2
  4012be:	9310      	str	r3, [sp, #64]	; 0x40
  4012c0:	9b10      	ldr	r3, [sp, #64]	; 0x40
  4012c2:	6313      	str	r3, [r2, #48]	; 0x30
  4012c4:	2300      	movs	r3, #0
  4012c6:	9311      	str	r3, [sp, #68]	; 0x44
  4012c8:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4012ca:	2b13      	cmp	r3, #19
  4012cc:	d806      	bhi.n	4012dc <UDP_Handler+0x364>
  4012ce:	bf00      	nop
  4012d0:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4012d2:	3301      	adds	r3, #1
  4012d4:	9311      	str	r3, [sp, #68]	; 0x44
  4012d6:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4012d8:	2b13      	cmp	r3, #19
  4012da:	d9f8      	bls.n	4012ce <UDP_Handler+0x356>
		udd_ctrl_send_zlp_in();
  4012dc:	4b65      	ldr	r3, [pc, #404]	; (401474 <UDP_Handler+0x4fc>)
  4012de:	4798      	blx	r3
  4012e0:	e3b1      	b.n	401a46 <UDP_Handler+0xace>
		return;
	}

	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_nb_trans) {
  4012e2:	4b60      	ldr	r3, [pc, #384]	; (401464 <UDP_Handler+0x4ec>)
  4012e4:	899b      	ldrh	r3, [r3, #12]
  4012e6:	42ab      	cmp	r3, r5
  4012e8:	d146      	bne.n	401378 <UDP_Handler+0x400>
		// Overrun then request a new payload buffer
		if (!udd_g_ctrlreq.over_under_run) {
  4012ea:	4b5e      	ldr	r3, [pc, #376]	; (401464 <UDP_Handler+0x4ec>)
  4012ec:	695b      	ldr	r3, [r3, #20]
  4012ee:	b9e3      	cbnz	r3, 40132a <UDP_Handler+0x3b2>
			// No callback available to request a new payload buffer
			udd_ctrl_stall_data();
  4012f0:	4b5f      	ldr	r3, [pc, #380]	; (401470 <UDP_Handler+0x4f8>)
  4012f2:	4798      	blx	r3
			// Ack reception of OUT to replace NAK by a STALL
			udd_ack_bank0_received(0);
  4012f4:	4a5a      	ldr	r2, [pc, #360]	; (401460 <UDP_Handler+0x4e8>)
  4012f6:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4012f8:	9312      	str	r3, [sp, #72]	; 0x48
  4012fa:	9b12      	ldr	r3, [sp, #72]	; 0x48
  4012fc:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  401300:	9312      	str	r3, [sp, #72]	; 0x48
  401302:	9b12      	ldr	r3, [sp, #72]	; 0x48
  401304:	f023 0302 	bic.w	r3, r3, #2
  401308:	9312      	str	r3, [sp, #72]	; 0x48
  40130a:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40130c:	6313      	str	r3, [r2, #48]	; 0x30
  40130e:	2300      	movs	r3, #0
  401310:	9313      	str	r3, [sp, #76]	; 0x4c
  401312:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  401314:	2b13      	cmp	r3, #19
  401316:	f200 8396 	bhi.w	401a46 <UDP_Handler+0xace>
  40131a:	bf00      	nop
  40131c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  40131e:	3301      	adds	r3, #1
  401320:	9313      	str	r3, [sp, #76]	; 0x4c
  401322:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  401324:	2b13      	cmp	r3, #19
  401326:	d9f8      	bls.n	40131a <UDP_Handler+0x3a2>
  401328:	e38d      	b.n	401a46 <UDP_Handler+0xace>
			return;
		}
		if (!udd_g_ctrlreq.over_under_run()) {
  40132a:	4798      	blx	r3
  40132c:	b9e0      	cbnz	r0, 401368 <UDP_Handler+0x3f0>
			// No new payload buffer delivered
			udd_ctrl_stall_data();
  40132e:	4b50      	ldr	r3, [pc, #320]	; (401470 <UDP_Handler+0x4f8>)
  401330:	4798      	blx	r3
			// Ack reception of OUT to replace NAK by a STALL
			udd_ack_bank0_received(0);
  401332:	4a4b      	ldr	r2, [pc, #300]	; (401460 <UDP_Handler+0x4e8>)
  401334:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401336:	9314      	str	r3, [sp, #80]	; 0x50
  401338:	9b14      	ldr	r3, [sp, #80]	; 0x50
  40133a:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  40133e:	9314      	str	r3, [sp, #80]	; 0x50
  401340:	9b14      	ldr	r3, [sp, #80]	; 0x50
  401342:	f023 0302 	bic.w	r3, r3, #2
  401346:	9314      	str	r3, [sp, #80]	; 0x50
  401348:	9b14      	ldr	r3, [sp, #80]	; 0x50
  40134a:	6313      	str	r3, [r2, #48]	; 0x30
  40134c:	2300      	movs	r3, #0
  40134e:	9315      	str	r3, [sp, #84]	; 0x54
  401350:	9b15      	ldr	r3, [sp, #84]	; 0x54
  401352:	2b13      	cmp	r3, #19
  401354:	f200 8377 	bhi.w	401a46 <UDP_Handler+0xace>
  401358:	bf00      	nop
  40135a:	9b15      	ldr	r3, [sp, #84]	; 0x54
  40135c:	3301      	adds	r3, #1
  40135e:	9315      	str	r3, [sp, #84]	; 0x54
  401360:	9b15      	ldr	r3, [sp, #84]	; 0x54
  401362:	2b13      	cmp	r3, #19
  401364:	d9f8      	bls.n	401358 <UDP_Handler+0x3e0>
  401366:	e36e      	b.n	401a46 <UDP_Handler+0xace>
			return;
		}
		// New payload buffer available
		// Update number of total data received
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
  401368:	4940      	ldr	r1, [pc, #256]	; (40146c <UDP_Handler+0x4f4>)
  40136a:	4a3f      	ldr	r2, [pc, #252]	; (401468 <UDP_Handler+0x4f0>)
  40136c:	8810      	ldrh	r0, [r2, #0]
  40136e:	880b      	ldrh	r3, [r1, #0]
  401370:	4403      	add	r3, r0
  401372:	800b      	strh	r3, [r1, #0]
		// Reinit reception on payload buffer
		udd_ctrl_payload_nb_trans = 0;
  401374:	2300      	movs	r3, #0
  401376:	8013      	strh	r3, [r2, #0]
	}
	// Free buffer of control endpoint to authorize next reception
	udd_ack_bank0_received(0);
  401378:	4a39      	ldr	r2, [pc, #228]	; (401460 <UDP_Handler+0x4e8>)
  40137a:	6b13      	ldr	r3, [r2, #48]	; 0x30
  40137c:	9316      	str	r3, [sp, #88]	; 0x58
  40137e:	9b16      	ldr	r3, [sp, #88]	; 0x58
  401380:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  401384:	9316      	str	r3, [sp, #88]	; 0x58
  401386:	9b16      	ldr	r3, [sp, #88]	; 0x58
  401388:	f023 0302 	bic.w	r3, r3, #2
  40138c:	9316      	str	r3, [sp, #88]	; 0x58
  40138e:	9b16      	ldr	r3, [sp, #88]	; 0x58
  401390:	6313      	str	r3, [r2, #48]	; 0x30
  401392:	2300      	movs	r3, #0
  401394:	9317      	str	r3, [sp, #92]	; 0x5c
  401396:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  401398:	2b13      	cmp	r3, #19
  40139a:	f200 8354 	bhi.w	401a46 <UDP_Handler+0xace>
  40139e:	bf00      	nop
  4013a0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  4013a2:	3301      	adds	r3, #1
  4013a4:	9317      	str	r3, [sp, #92]	; 0x5c
  4013a6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  4013a8:	2b13      	cmp	r3, #19
  4013aa:	d9f8      	bls.n	40139e <UDP_Handler+0x426>
  4013ac:	e34b      	b.n	401a46 <UDP_Handler+0xace>
	if (Is_udd_bank0_received(0)) {
		// OUT packet received
		udd_ctrl_out_received();
		return true;
	}
	if (Is_udd_stall(0)) {
  4013ae:	4b2c      	ldr	r3, [pc, #176]	; (401460 <UDP_Handler+0x4e8>)
  4013b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4013b2:	f013 0f08 	tst.w	r3, #8
  4013b6:	d106      	bne.n	4013c6 <UDP_Handler+0x44e>
  4013b8:	4f2f      	ldr	r7, [pc, #188]	; (401478 <UDP_Handler+0x500>)
		// Payload buffer too small
		nb_data = udd_g_ctrlreq.payload_size -
				udd_ctrl_payload_nb_trans;
	}
	uint8_t *ptr_dest = udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans;
	for (i = 0; i < nb_data; i++) {
  4013ba:	4639      	mov	r1, r7
  4013bc:	2301      	movs	r3, #1
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
		// Check RXRDY and TXEMPTY event for none DMA endpoints
		if (!Is_udd_endpoint_interrupt_enabled(ep)) {
  4013be:	f8df e0a0 	ldr.w	lr, [pc, #160]	; 401460 <UDP_Handler+0x4e8>
  4013c2:	4618      	mov	r0, r3
  4013c4:	e01a      	b.n	4013fc <UDP_Handler+0x484>
		udd_ctrl_out_received();
		return true;
	}
	if (Is_udd_stall(0)) {
		// STALLed
		udd_ack_stall(0);
  4013c6:	4a26      	ldr	r2, [pc, #152]	; (401460 <UDP_Handler+0x4e8>)
  4013c8:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4013ca:	9300      	str	r3, [sp, #0]
  4013cc:	9b00      	ldr	r3, [sp, #0]
  4013ce:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  4013d2:	9300      	str	r3, [sp, #0]
  4013d4:	9b00      	ldr	r3, [sp, #0]
  4013d6:	f023 0308 	bic.w	r3, r3, #8
  4013da:	9300      	str	r3, [sp, #0]
  4013dc:	9b00      	ldr	r3, [sp, #0]
  4013de:	6313      	str	r3, [r2, #48]	; 0x30
  4013e0:	2300      	movs	r3, #0
  4013e2:	9301      	str	r3, [sp, #4]
  4013e4:	9b01      	ldr	r3, [sp, #4]
  4013e6:	2b13      	cmp	r3, #19
  4013e8:	f200 832d 	bhi.w	401a46 <UDP_Handler+0xace>
  4013ec:	bf00      	nop
  4013ee:	9b01      	ldr	r3, [sp, #4]
  4013f0:	3301      	adds	r3, #1
  4013f2:	9301      	str	r3, [sp, #4]
  4013f4:	9b01      	ldr	r3, [sp, #4]
  4013f6:	2b13      	cmp	r3, #19
  4013f8:	d9f8      	bls.n	4013ec <UDP_Handler+0x474>
  4013fa:	e324      	b.n	401a46 <UDP_Handler+0xace>
  4013fc:	b2de      	uxtb	r6, r3
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
		// Check RXRDY and TXEMPTY event for none DMA endpoints
		if (!Is_udd_endpoint_interrupt_enabled(ep)) {
  4013fe:	f8de 2018 	ldr.w	r2, [lr, #24]
  401402:	461d      	mov	r5, r3
  401404:	fa00 f403 	lsl.w	r4, r0, r3
  401408:	4214      	tst	r4, r2
  40140a:	f000 8220 	beq.w	40184e <UDP_Handler+0x8d6>
  40140e:	f103 38ff 	add.w	r8, r3, #4294967295
			continue;
		}

		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];
  401412:	4689      	mov	r9, r1
  401414:	009a      	lsls	r2, r3, #2
  401416:	f102 2240 	add.w	r2, r2, #1073758208	; 0x40004000
  40141a:	f502 3240 	add.w	r2, r2, #196608	; 0x30000

		// RXOUT: Full packet received
		if (Is_udd_any_bank_received(ep)) {
  40141e:	f8d2 c030 	ldr.w	ip, [r2, #48]	; 0x30
  401422:	f01c 0f42 	tst.w	ip, #66	; 0x42
  401426:	d052      	beq.n	4014ce <UDP_Handler+0x556>

static void udd_ep_out_received(udd_ep_id_t ep)
{
	udd_ep_job_t *ptr_job = &udd_ep_job[ep - 1];
	uint32_t nb_data = 0, i;
	uint32_t nb_remain = ptr_job->buf_size - ptr_job->buf_cnt;
  401428:	eb08 0388 	add.w	r3, r8, r8, lsl #2
  40142c:	4a12      	ldr	r2, [pc, #72]	; (401478 <UDP_Handler+0x500>)
  40142e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  401432:	689a      	ldr	r2, [r3, #8]
  401434:	68d9      	ldr	r1, [r3, #12]
	uint32_t pkt_size = ptr_job->size;
  401436:	f8b3 a010 	ldrh.w	sl, [r3, #16]
  40143a:	f3ca 0a09 	ubfx	sl, sl, #0, #10
	uint8_t *ptr_dst = &ptr_job->buf[ptr_job->buf_cnt];
  40143e:	685b      	ldr	r3, [r3, #4]
  401440:	00ad      	lsls	r5, r5, #2
  401442:	f105 2540 	add.w	r5, r5, #1073758208	; 0x40004000
  401446:	f505 3540 	add.w	r5, r5, #196608	; 0x30000
	bool b_full = false, b_short;

	// Read byte count
	nb_data = udd_byte_count(ep);
  40144a:	6b2f      	ldr	r7, [r5, #48]	; 0x30
  40144c:	f3c7 470a 	ubfx	r7, r7, #16, #11
	b_short = (nb_data < pkt_size);

	// Copy data if there is
	if (nb_data > 0) {
  401450:	2f00      	cmp	r7, #0
  401452:	f000 82ed 	beq.w	401a30 <UDP_Handler+0xab8>

static void udd_ep_out_received(udd_ep_id_t ep)
{
	udd_ep_job_t *ptr_job = &udd_ep_job[ep - 1];
	uint32_t nb_data = 0, i;
	uint32_t nb_remain = ptr_job->buf_size - ptr_job->buf_cnt;
  401456:	1a50      	subs	r0, r2, r1
	nb_data = udd_byte_count(ep);
	b_short = (nb_data < pkt_size);

	// Copy data if there is
	if (nb_data > 0) {
		if (nb_data >= nb_remain) {
  401458:	42b8      	cmp	r0, r7
  40145a:	f240 82dd 	bls.w	401a18 <UDP_Handler+0xaa0>
  40145e:	e2cc      	b.n	4019fa <UDP_Handler+0xa82>
  401460:	40034000 	.word	0x40034000
  401464:	200005f0 	.word	0x200005f0
  401468:	200005da 	.word	0x200005da
  40146c:	20000586 	.word	0x20000586
  401470:	004009dd 	.word	0x004009dd
  401474:	00400a25 	.word	0x00400a25
  401478:	20000588 	.word	0x20000588
			nb_data = nb_remain;
			b_full = true;
  40147c:	f04f 0b01 	mov.w	fp, #1
{
	udd_ep_job_t *ptr_job = &udd_ep_job[ep - 1];
	uint32_t nb_data = 0, i;
	uint32_t nb_remain = ptr_job->buf_size - ptr_job->buf_cnt;
	uint32_t pkt_size = ptr_job->size;
	uint8_t *ptr_dst = &ptr_job->buf[ptr_job->buf_cnt];
  401480:	4419      	add	r1, r3
  401482:	460b      	mov	r3, r1
		// Modify job information
		ptr_job->buf_cnt += nb_data;

		// Copy FIFO (DPRAM) to buffer
		for (i = 0; i < nb_data; i++) {
			*ptr_dst++ = udd_endpoint_fifo_read(ep);
  401484:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  401486:	f803 2b01 	strb.w	r2, [r3], #1
  40148a:	1a5a      	subs	r2, r3, r1
		}
		// Modify job information
		ptr_job->buf_cnt += nb_data;

		// Copy FIFO (DPRAM) to buffer
		for (i = 0; i < nb_data; i++) {
  40148c:	4290      	cmp	r0, r2
  40148e:	d8f9      	bhi.n	401484 <UDP_Handler+0x50c>
			*ptr_dst++ = udd_endpoint_fifo_read(ep);
		}
	}
	// Clear FIFO Status
	udd_ep_ack_out_received(ep);
  401490:	4630      	mov	r0, r6
  401492:	4ba5      	ldr	r3, [pc, #660]	; (401728 <UDP_Handler+0x7b0>)
  401494:	4798      	blx	r3
	// Finish job on error or short packet
	if ((b_full || b_short) &&
  401496:	f1bb 0f00 	cmp.w	fp, #0
  40149a:	d102      	bne.n	4014a2 <UDP_Handler+0x52a>
  40149c:	45ba      	cmp	sl, r7
  40149e:	f240 82d2 	bls.w	401a46 <UDP_Handler+0xace>
			!Is_udd_endpoint_stall_requested(ep)) {
  4014a2:	6b2b      	ldr	r3, [r5, #48]	; 0x30
		}
	}
	// Clear FIFO Status
	udd_ep_ack_out_received(ep);
	// Finish job on error or short packet
	if ((b_full || b_short) &&
  4014a4:	f013 0f20 	tst.w	r3, #32
  4014a8:	f040 82cd 	bne.w	401a46 <UDP_Handler+0xace>
			!Is_udd_endpoint_stall_requested(ep)) {
		udd_disable_endpoint_interrupt(ep);
  4014ac:	4b9f      	ldr	r3, [pc, #636]	; (40172c <UDP_Handler+0x7b4>)
  4014ae:	615c      	str	r4, [r3, #20]
		ptr_job->buf_size = ptr_job->buf_cnt; // buf_size is passed to callback as XFR count
  4014b0:	4b9f      	ldr	r3, [pc, #636]	; (401730 <UDP_Handler+0x7b8>)
  4014b2:	ea4f 0288 	mov.w	r2, r8, lsl #2
  4014b6:	eb02 0108 	add.w	r1, r2, r8
  4014ba:	eb03 0181 	add.w	r1, r3, r1, lsl #2
  4014be:	68cb      	ldr	r3, [r1, #12]
  4014c0:	608b      	str	r3, [r1, #8]
		udd_ep_finish_job(ptr_job, UDD_EP_TRANSFER_OK, ep);
  4014c2:	4648      	mov	r0, r9
  4014c4:	2100      	movs	r1, #0
  4014c6:	4632      	mov	r2, r6
  4014c8:	4b9a      	ldr	r3, [pc, #616]	; (401734 <UDP_Handler+0x7bc>)
  4014ca:	4798      	blx	r3
  4014cc:	e2bb      	b.n	401a46 <UDP_Handler+0xace>
		if (Is_udd_any_bank_received(ep)) {
			udd_ep_out_received(ep);
			return true;
		}
		// TXIN: packet sent
		if (Is_udd_in_sent(ep)) {
  4014ce:	f8d2 c030 	ldr.w	ip, [r2, #48]	; 0x30
  4014d2:	f01c 0f01 	tst.w	ip, #1
  4014d6:	f000 8190 	beq.w	4017fa <UDP_Handler+0x882>

			ptr_job->bank--;
  4014da:	eb08 0288 	add.w	r2, r8, r8, lsl #2
  4014de:	4b94      	ldr	r3, [pc, #592]	; (401730 <UDP_Handler+0x7b8>)
  4014e0:	eb03 0282 	add.w	r2, r3, r2, lsl #2
  4014e4:	7c53      	ldrb	r3, [r2, #17]
  4014e6:	f3c3 0181 	ubfx	r1, r3, #2, #2
  4014ea:	3103      	adds	r1, #3
  4014ec:	f361 0383 	bfi	r3, r1, #2, #2
  4014f0:	7453      	strb	r3, [r2, #17]
			// Stall when all banks free
			if (ptr_job->b_stall_requested) {
  4014f2:	7c53      	ldrb	r3, [r2, #17]
  4014f4:	f013 0f20 	tst.w	r3, #32
  4014f8:	d078      	beq.n	4015ec <UDP_Handler+0x674>
				if (ptr_job->bank) {
  4014fa:	f013 0f0c 	tst.w	r3, #12
  4014fe:	d036      	beq.n	40156e <UDP_Handler+0x5f6>
  401500:	00aa      	lsls	r2, r5, #2
  401502:	f102 2240 	add.w	r2, r2, #1073758208	; 0x40004000
  401506:	f502 3240 	add.w	r2, r2, #196608	; 0x30000
					// Send remaining
					udd_set_transmit_ready(ep);
  40150a:	6b13      	ldr	r3, [r2, #48]	; 0x30
  40150c:	9318      	str	r3, [sp, #96]	; 0x60
  40150e:	9b18      	ldr	r3, [sp, #96]	; 0x60
  401510:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  401514:	9318      	str	r3, [sp, #96]	; 0x60
  401516:	9b18      	ldr	r3, [sp, #96]	; 0x60
  401518:	f043 0310 	orr.w	r3, r3, #16
  40151c:	9318      	str	r3, [sp, #96]	; 0x60
  40151e:	9b18      	ldr	r3, [sp, #96]	; 0x60
  401520:	6313      	str	r3, [r2, #48]	; 0x30
  401522:	2300      	movs	r3, #0
  401524:	9319      	str	r3, [sp, #100]	; 0x64
  401526:	9b19      	ldr	r3, [sp, #100]	; 0x64
  401528:	2b13      	cmp	r3, #19
  40152a:	d806      	bhi.n	40153a <UDP_Handler+0x5c2>
  40152c:	bf00      	nop
  40152e:	9b19      	ldr	r3, [sp, #100]	; 0x64
  401530:	3301      	adds	r3, #1
  401532:	9319      	str	r3, [sp, #100]	; 0x64
  401534:	9b19      	ldr	r3, [sp, #100]	; 0x64
  401536:	2b13      	cmp	r3, #19
  401538:	d9f8      	bls.n	40152c <UDP_Handler+0x5b4>
					udd_ack_in_sent(ep);
  40153a:	6b13      	ldr	r3, [r2, #48]	; 0x30
  40153c:	931a      	str	r3, [sp, #104]	; 0x68
  40153e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
  401540:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  401544:	931a      	str	r3, [sp, #104]	; 0x68
  401546:	9b1a      	ldr	r3, [sp, #104]	; 0x68
  401548:	f023 0301 	bic.w	r3, r3, #1
  40154c:	931a      	str	r3, [sp, #104]	; 0x68
  40154e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
  401550:	6313      	str	r3, [r2, #48]	; 0x30
  401552:	2300      	movs	r3, #0
  401554:	931b      	str	r3, [sp, #108]	; 0x6c
  401556:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
  401558:	2b13      	cmp	r3, #19
  40155a:	f200 8274 	bhi.w	401a46 <UDP_Handler+0xace>
  40155e:	bf00      	nop
  401560:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
  401562:	3301      	adds	r3, #1
  401564:	931b      	str	r3, [sp, #108]	; 0x6c
  401566:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
  401568:	2b13      	cmp	r3, #19
  40156a:	d9f8      	bls.n	40155e <UDP_Handler+0x5e6>
  40156c:	e26b      	b.n	401a46 <UDP_Handler+0xace>
  40156e:	00aa      	lsls	r2, r5, #2
  401570:	f102 2240 	add.w	r2, r2, #1073758208	; 0x40004000
  401574:	f502 3240 	add.w	r2, r2, #196608	; 0x30000
				} else {
					// Ack last packet
					udd_ack_in_sent(ep);
  401578:	6b13      	ldr	r3, [r2, #48]	; 0x30
  40157a:	931c      	str	r3, [sp, #112]	; 0x70
  40157c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
  40157e:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  401582:	931c      	str	r3, [sp, #112]	; 0x70
  401584:	9b1c      	ldr	r3, [sp, #112]	; 0x70
  401586:	f023 0301 	bic.w	r3, r3, #1
  40158a:	931c      	str	r3, [sp, #112]	; 0x70
  40158c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
  40158e:	6313      	str	r3, [r2, #48]	; 0x30
  401590:	2300      	movs	r3, #0
  401592:	931d      	str	r3, [sp, #116]	; 0x74
  401594:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  401596:	2b13      	cmp	r3, #19
  401598:	d806      	bhi.n	4015a8 <UDP_Handler+0x630>
  40159a:	bf00      	nop
  40159c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  40159e:	3301      	adds	r3, #1
  4015a0:	931d      	str	r3, [sp, #116]	; 0x74
  4015a2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  4015a4:	2b13      	cmp	r3, #19
  4015a6:	d9f8      	bls.n	40159a <UDP_Handler+0x622>
					// Enable stall
					udd_enable_stall_handshake(ep);
  4015a8:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4015aa:	931e      	str	r3, [sp, #120]	; 0x78
  4015ac:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  4015ae:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  4015b2:	931e      	str	r3, [sp, #120]	; 0x78
  4015b4:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  4015b6:	f043 0320 	orr.w	r3, r3, #32
  4015ba:	931e      	str	r3, [sp, #120]	; 0x78
  4015bc:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  4015be:	6313      	str	r3, [r2, #48]	; 0x30
  4015c0:	2300      	movs	r3, #0
  4015c2:	931f      	str	r3, [sp, #124]	; 0x7c
  4015c4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  4015c6:	2b13      	cmp	r3, #19
  4015c8:	d806      	bhi.n	4015d8 <UDP_Handler+0x660>
  4015ca:	bf00      	nop
  4015cc:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  4015ce:	3301      	adds	r3, #1
  4015d0:	931f      	str	r3, [sp, #124]	; 0x7c
  4015d2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  4015d4:	2b13      	cmp	r3, #19
  4015d6:	d9f8      	bls.n	4015ca <UDP_Handler+0x652>
					// Halt executed
					ptr_job->b_stall_requested = false;
  4015d8:	eb08 0888 	add.w	r8, r8, r8, lsl #2
  4015dc:	4b54      	ldr	r3, [pc, #336]	; (401730 <UDP_Handler+0x7b8>)
  4015de:	eb03 0388 	add.w	r3, r3, r8, lsl #2
  4015e2:	7c5a      	ldrb	r2, [r3, #17]
  4015e4:	f36f 1245 	bfc	r2, #5, #1
  4015e8:	745a      	strb	r2, [r3, #17]
  4015ea:	e22c      	b.n	401a46 <UDP_Handler+0xace>
				}
				return true;
			}
			// Finish Job when buffer end
			if (ptr_job->b_buf_end) {
  4015ec:	f013 0f80 	tst.w	r3, #128	; 0x80
  4015f0:	d00f      	beq.n	401612 <UDP_Handler+0x69a>
				ptr_job->b_buf_end = false;
  4015f2:	eb08 0288 	add.w	r2, r8, r8, lsl #2
  4015f6:	4b4e      	ldr	r3, [pc, #312]	; (401730 <UDP_Handler+0x7b8>)
  4015f8:	eb03 0382 	add.w	r3, r3, r2, lsl #2
  4015fc:	7c59      	ldrb	r1, [r3, #17]
  4015fe:	f36f 11c7 	bfc	r1, #7, #1
  401602:	7459      	strb	r1, [r3, #17]
				ptr_job->buf_size = ptr_job->buf_cnt; // buf_size is passed to callback as XFR count
  401604:	68da      	ldr	r2, [r3, #12]
  401606:	609a      	str	r2, [r3, #8]
				udd_ep_finish_job(ptr_job, UDD_EP_TRANSFER_OK, ep);
  401608:	4648      	mov	r0, r9
  40160a:	2100      	movs	r1, #0
  40160c:	4632      	mov	r2, r6
  40160e:	4b49      	ldr	r3, [pc, #292]	; (401734 <UDP_Handler+0x7bc>)
  401610:	4798      	blx	r3
			}
			if (ptr_job->buf_cnt >= ptr_job->buf_size &&
  401612:	eb08 0388 	add.w	r3, r8, r8, lsl #2
  401616:	4a46      	ldr	r2, [pc, #280]	; (401730 <UDP_Handler+0x7b8>)
  401618:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  40161c:	68da      	ldr	r2, [r3, #12]
  40161e:	689b      	ldr	r3, [r3, #8]
  401620:	429a      	cmp	r2, r3
  401622:	d338      	bcc.n	401696 <UDP_Handler+0x71e>
					!ptr_job->b_shortpacket &&
  401624:	eb08 0288 	add.w	r2, r8, r8, lsl #2
  401628:	4b41      	ldr	r3, [pc, #260]	; (401730 <UDP_Handler+0x7b8>)
  40162a:	eb03 0382 	add.w	r3, r3, r2, lsl #2
  40162e:	7c5b      	ldrb	r3, [r3, #17]
  401630:	f013 0f4c 	tst.w	r3, #76	; 0x4c
  401634:	d12f      	bne.n	401696 <UDP_Handler+0x71e>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  401636:	f3ef 8310 	mrs	r3, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
  40163a:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  40163c:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
  401640:	2100      	movs	r1, #0
  401642:	4a3d      	ldr	r2, [pc, #244]	; (401738 <UDP_Handler+0x7c0>)
  401644:	7011      	strb	r1, [r2, #0]
					ptr_job->bank == 0) {
				// All transfer done, including ZLP
				irqflags_t flags = cpu_irq_save();
				udd_disable_endpoint_interrupt(ep);
  401646:	4a39      	ldr	r2, [pc, #228]	; (40172c <UDP_Handler+0x7b4>)
  401648:	6154      	str	r4, [r2, #20]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  40164a:	b92b      	cbnz	r3, 401658 <UDP_Handler+0x6e0>
		cpu_irq_enable();
  40164c:	2201      	movs	r2, #1
  40164e:	4b3a      	ldr	r3, [pc, #232]	; (401738 <UDP_Handler+0x7c0>)
  401650:	701a      	strb	r2, [r3, #0]
  401652:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
  401656:	b662      	cpsie	i
  401658:	00ab      	lsls	r3, r5, #2
  40165a:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
  40165e:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
				cpu_irq_restore(flags);
				// Ack last packet
				udd_ack_in_sent(ep);
  401662:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  401664:	9220      	str	r2, [sp, #128]	; 0x80
  401666:	9a20      	ldr	r2, [sp, #128]	; 0x80
  401668:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  40166c:	9220      	str	r2, [sp, #128]	; 0x80
  40166e:	9a20      	ldr	r2, [sp, #128]	; 0x80
  401670:	f022 0201 	bic.w	r2, r2, #1
  401674:	9220      	str	r2, [sp, #128]	; 0x80
  401676:	9a20      	ldr	r2, [sp, #128]	; 0x80
  401678:	631a      	str	r2, [r3, #48]	; 0x30
  40167a:	2300      	movs	r3, #0
  40167c:	9321      	str	r3, [sp, #132]	; 0x84
  40167e:	9b21      	ldr	r3, [sp, #132]	; 0x84
  401680:	2b13      	cmp	r3, #19
  401682:	f200 81e0 	bhi.w	401a46 <UDP_Handler+0xace>

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
  401686:	bf00      	nop
  401688:	9b21      	ldr	r3, [sp, #132]	; 0x84
  40168a:	3301      	adds	r3, #1
  40168c:	9321      	str	r3, [sp, #132]	; 0x84
  40168e:	9b21      	ldr	r3, [sp, #132]	; 0x84
  401690:	2b13      	cmp	r3, #19
  401692:	d9f8      	bls.n	401686 <UDP_Handler+0x70e>
  401694:	e1d7      	b.n	401a46 <UDP_Handler+0xace>
				return true;
			} else if (udd_get_endpoint_bank_max_nbr(ep) > 1
  401696:	2e00      	cmp	r6, #0
  401698:	f000 808c 	beq.w	4017b4 <UDP_Handler+0x83c>
  40169c:	2e03      	cmp	r6, #3
  40169e:	f000 8089 	beq.w	4017b4 <UDP_Handler+0x83c>
					&& ptr_job->bank > 0) {
  4016a2:	eb08 0288 	add.w	r2, r8, r8, lsl #2
  4016a6:	4b22      	ldr	r3, [pc, #136]	; (401730 <UDP_Handler+0x7b8>)
  4016a8:	eb03 0382 	add.w	r3, r3, r2, lsl #2
  4016ac:	7c5b      	ldrb	r3, [r3, #17]
  4016ae:	f013 0f0c 	tst.w	r3, #12
  4016b2:	d045      	beq.n	401740 <UDP_Handler+0x7c8>
  4016b4:	00aa      	lsls	r2, r5, #2
  4016b6:	f102 2240 	add.w	r2, r2, #1073758208	; 0x40004000
  4016ba:	f502 3240 	add.w	r2, r2, #196608	; 0x30000
				// Already banks buffered, transmit while loading
				udd_set_transmit_ready(ep);
  4016be:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4016c0:	9322      	str	r3, [sp, #136]	; 0x88
  4016c2:	9b22      	ldr	r3, [sp, #136]	; 0x88
  4016c4:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  4016c8:	9322      	str	r3, [sp, #136]	; 0x88
  4016ca:	9b22      	ldr	r3, [sp, #136]	; 0x88
  4016cc:	f043 0310 	orr.w	r3, r3, #16
  4016d0:	9322      	str	r3, [sp, #136]	; 0x88
  4016d2:	9b22      	ldr	r3, [sp, #136]	; 0x88
  4016d4:	6313      	str	r3, [r2, #48]	; 0x30
  4016d6:	2300      	movs	r3, #0
  4016d8:	9323      	str	r3, [sp, #140]	; 0x8c
  4016da:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  4016dc:	2b13      	cmp	r3, #19
  4016de:	d806      	bhi.n	4016ee <UDP_Handler+0x776>
  4016e0:	bf00      	nop
  4016e2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  4016e4:	3301      	adds	r3, #1
  4016e6:	9323      	str	r3, [sp, #140]	; 0x8c
  4016e8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  4016ea:	2b13      	cmp	r3, #19
  4016ec:	d9f8      	bls.n	4016e0 <UDP_Handler+0x768>
				udd_ack_in_sent(ep);
  4016ee:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4016f0:	9324      	str	r3, [sp, #144]	; 0x90
  4016f2:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4016f4:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  4016f8:	9324      	str	r3, [sp, #144]	; 0x90
  4016fa:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4016fc:	f023 0301 	bic.w	r3, r3, #1
  401700:	9324      	str	r3, [sp, #144]	; 0x90
  401702:	9b24      	ldr	r3, [sp, #144]	; 0x90
  401704:	6313      	str	r3, [r2, #48]	; 0x30
  401706:	2300      	movs	r3, #0
  401708:	9325      	str	r3, [sp, #148]	; 0x94
  40170a:	9b25      	ldr	r3, [sp, #148]	; 0x94
  40170c:	2b13      	cmp	r3, #19
  40170e:	d806      	bhi.n	40171e <UDP_Handler+0x7a6>
  401710:	bf00      	nop
  401712:	9b25      	ldr	r3, [sp, #148]	; 0x94
  401714:	3301      	adds	r3, #1
  401716:	9325      	str	r3, [sp, #148]	; 0x94
  401718:	9b25      	ldr	r3, [sp, #148]	; 0x94
  40171a:	2b13      	cmp	r3, #19
  40171c:	d9f8      	bls.n	401710 <UDP_Handler+0x798>
				udd_ep_in_sent(ep, false);
  40171e:	4630      	mov	r0, r6
  401720:	2100      	movs	r1, #0
  401722:	4b06      	ldr	r3, [pc, #24]	; (40173c <UDP_Handler+0x7c4>)
  401724:	4798      	blx	r3
  401726:	e18e      	b.n	401a46 <UDP_Handler+0xace>
  401728:	00400cbd 	.word	0x00400cbd
  40172c:	40034000 	.word	0x40034000
  401730:	20000588 	.word	0x20000588
  401734:	00400c7d 	.word	0x00400c7d
  401738:	20000097 	.word	0x20000097
  40173c:	00400db1 	.word	0x00400db1
			} else if (udd_get_endpoint_bank_max_nbr(ep) > 1) {
				// Still bank free, load and transmit
				if (!udd_ep_in_sent(ep, true)) {
  401740:	4630      	mov	r0, r6
  401742:	2101      	movs	r1, #1
  401744:	4b69      	ldr	r3, [pc, #420]	; (4018ec <UDP_Handler+0x974>)
  401746:	4798      	blx	r3
  401748:	b990      	cbnz	r0, 401770 <UDP_Handler+0x7f8>
					ptr_job->b_buf_end = false;
  40174a:	2314      	movs	r3, #20
  40174c:	4a68      	ldr	r2, [pc, #416]	; (4018f0 <UDP_Handler+0x978>)
  40174e:	fb03 2808 	mla	r8, r3, r8, r2
  401752:	f898 2011 	ldrb.w	r2, [r8, #17]
  401756:	f36f 12c7 	bfc	r2, #7, #1
  40175a:	f888 2011 	strb.w	r2, [r8, #17]
					ptr_job->buf_size = ptr_job->buf_cnt; // buf_size is passed to callback as XFR count
  40175e:	f8d8 300c 	ldr.w	r3, [r8, #12]
  401762:	f8c8 3008 	str.w	r3, [r8, #8]
					udd_ep_finish_job(ptr_job, UDD_EP_TRANSFER_OK, ep);
  401766:	4648      	mov	r0, r9
  401768:	2100      	movs	r1, #0
  40176a:	4632      	mov	r2, r6
  40176c:	4b61      	ldr	r3, [pc, #388]	; (4018f4 <UDP_Handler+0x97c>)
  40176e:	4798      	blx	r3
  401770:	00ab      	lsls	r3, r5, #2
  401772:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
  401776:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
				}
				udd_ack_in_sent(ep);
  40177a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  40177c:	9226      	str	r2, [sp, #152]	; 0x98
  40177e:	9a26      	ldr	r2, [sp, #152]	; 0x98
  401780:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  401784:	9226      	str	r2, [sp, #152]	; 0x98
  401786:	9a26      	ldr	r2, [sp, #152]	; 0x98
  401788:	f022 0201 	bic.w	r2, r2, #1
  40178c:	9226      	str	r2, [sp, #152]	; 0x98
  40178e:	9a26      	ldr	r2, [sp, #152]	; 0x98
  401790:	631a      	str	r2, [r3, #48]	; 0x30
  401792:	2300      	movs	r3, #0
  401794:	9327      	str	r3, [sp, #156]	; 0x9c
  401796:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  401798:	2b13      	cmp	r3, #19
  40179a:	d806      	bhi.n	4017aa <UDP_Handler+0x832>
  40179c:	bf00      	nop
  40179e:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  4017a0:	3301      	adds	r3, #1
  4017a2:	9327      	str	r3, [sp, #156]	; 0x9c
  4017a4:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  4017a6:	2b13      	cmp	r3, #19
  4017a8:	d9f8      	bls.n	40179c <UDP_Handler+0x824>
				udd_ep_in_sent(ep, false);
  4017aa:	4630      	mov	r0, r6
  4017ac:	2100      	movs	r1, #0
  4017ae:	4b4f      	ldr	r3, [pc, #316]	; (4018ec <UDP_Handler+0x974>)
  4017b0:	4798      	blx	r3
  4017b2:	e148      	b.n	401a46 <UDP_Handler+0xace>
			} else {
				// Single bank transfer, ack when ready
				udd_ep_in_sent(ep, true);
  4017b4:	4630      	mov	r0, r6
  4017b6:	2101      	movs	r1, #1
  4017b8:	4b4c      	ldr	r3, [pc, #304]	; (4018ec <UDP_Handler+0x974>)
  4017ba:	4798      	blx	r3
  4017bc:	00ab      	lsls	r3, r5, #2
  4017be:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
  4017c2:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
				udd_ack_in_sent(ep);
  4017c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  4017c8:	9228      	str	r2, [sp, #160]	; 0xa0
  4017ca:	9a28      	ldr	r2, [sp, #160]	; 0xa0
  4017cc:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  4017d0:	9228      	str	r2, [sp, #160]	; 0xa0
  4017d2:	9a28      	ldr	r2, [sp, #160]	; 0xa0
  4017d4:	f022 0201 	bic.w	r2, r2, #1
  4017d8:	9228      	str	r2, [sp, #160]	; 0xa0
  4017da:	9a28      	ldr	r2, [sp, #160]	; 0xa0
  4017dc:	631a      	str	r2, [r3, #48]	; 0x30
  4017de:	2300      	movs	r3, #0
  4017e0:	9329      	str	r3, [sp, #164]	; 0xa4
  4017e2:	9b29      	ldr	r3, [sp, #164]	; 0xa4
  4017e4:	2b13      	cmp	r3, #19
  4017e6:	f200 812e 	bhi.w	401a46 <UDP_Handler+0xace>
  4017ea:	bf00      	nop
  4017ec:	9b29      	ldr	r3, [sp, #164]	; 0xa4
  4017ee:	3301      	adds	r3, #1
  4017f0:	9329      	str	r3, [sp, #164]	; 0xa4
  4017f2:	9b29      	ldr	r3, [sp, #164]	; 0xa4
  4017f4:	2b13      	cmp	r3, #19
  4017f6:	d9f8      	bls.n	4017ea <UDP_Handler+0x872>
  4017f8:	e125      	b.n	401a46 <UDP_Handler+0xace>
			}
			return true;
		}
		// Stall sent/CRC error
		if (Is_udd_stall(ep)) {
  4017fa:	6b12      	ldr	r2, [r2, #48]	; 0x30
  4017fc:	f012 0f08 	tst.w	r2, #8
  401800:	d025      	beq.n	40184e <UDP_Handler+0x8d6>
  401802:	009b      	lsls	r3, r3, #2
  401804:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
  401808:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
			udd_ack_stall(ep);
  40180c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  40180e:	922a      	str	r2, [sp, #168]	; 0xa8
  401810:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
  401812:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  401816:	922a      	str	r2, [sp, #168]	; 0xa8
  401818:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
  40181a:	f022 0208 	bic.w	r2, r2, #8
  40181e:	922a      	str	r2, [sp, #168]	; 0xa8
  401820:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
  401822:	631a      	str	r2, [r3, #48]	; 0x30
  401824:	2200      	movs	r2, #0
  401826:	922b      	str	r2, [sp, #172]	; 0xac
  401828:	9a2b      	ldr	r2, [sp, #172]	; 0xac
  40182a:	2a13      	cmp	r2, #19
  40182c:	d806      	bhi.n	40183c <UDP_Handler+0x8c4>
  40182e:	bf00      	nop
  401830:	9a2b      	ldr	r2, [sp, #172]	; 0xac
  401832:	3201      	adds	r2, #1
  401834:	922b      	str	r2, [sp, #172]	; 0xac
  401836:	9a2b      	ldr	r2, [sp, #172]	; 0xac
  401838:	2a13      	cmp	r2, #19
  40183a:	d9f8      	bls.n	40182e <UDP_Handler+0x8b6>
			if (udd_get_endpoint_type(ep) == UDP_CSR_EPTYPE_ISO_OUT ||
  40183c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  40183e:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  401842:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
  401846:	f000 80fe 	beq.w	401a46 <UDP_Handler+0xace>
				udd_get_endpoint_type(ep) == UDP_CSR_EPTYPE_ISO_IN) {
  40184a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40184c:	e0fb      	b.n	401a46 <UDP_Handler+0xace>
  40184e:	3301      	adds	r3, #1
  401850:	3114      	adds	r1, #20
{
	udd_ep_id_t ep;
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
  401852:	2b05      	cmp	r3, #5
  401854:	f47f add2 	bne.w	4013fc <UDP_Handler+0x484>
  401858:	e0ee      	b.n	401a38 <UDP_Handler+0xac0>
	if (udd_ep_interrupt()) {
		goto udd_interrupt_end; // Interrupt acked by bulk/interrupt/isochronous endpoint managed
	}
#endif

	if ((Is_udd_wake_up_interrupt_enabled() && Is_udd_wake_up()) ||
  40185a:	4b27      	ldr	r3, [pc, #156]	; (4018f8 <UDP_Handler+0x980>)
  40185c:	69db      	ldr	r3, [r3, #28]
  40185e:	f413 5f00 	tst.w	r3, #8192	; 0x2000
  401862:	d113      	bne.n	40188c <UDP_Handler+0x914>
		(Is_udd_resume_interrupt_enabled() && Is_udd_resume()) ||
  401864:	4b24      	ldr	r3, [pc, #144]	; (4018f8 <UDP_Handler+0x980>)
  401866:	699b      	ldr	r3, [r3, #24]
	if (udd_ep_interrupt()) {
		goto udd_interrupt_end; // Interrupt acked by bulk/interrupt/isochronous endpoint managed
	}
#endif

	if ((Is_udd_wake_up_interrupt_enabled() && Is_udd_wake_up()) ||
  401868:	f413 7f00 	tst.w	r3, #512	; 0x200
  40186c:	d004      	beq.n	401878 <UDP_Handler+0x900>
		(Is_udd_resume_interrupt_enabled() && Is_udd_resume()) ||
  40186e:	4b22      	ldr	r3, [pc, #136]	; (4018f8 <UDP_Handler+0x980>)
  401870:	69db      	ldr	r3, [r3, #28]
  401872:	f413 7f00 	tst.w	r3, #512	; 0x200
  401876:	d109      	bne.n	40188c <UDP_Handler+0x914>
		(Is_udd_ext_resume_interrupt_enabled() && Is_udd_ext_resume())) {
  401878:	4b1f      	ldr	r3, [pc, #124]	; (4018f8 <UDP_Handler+0x980>)
  40187a:	699b      	ldr	r3, [r3, #24]
		goto udd_interrupt_end; // Interrupt acked by bulk/interrupt/isochronous endpoint managed
	}
#endif

	if ((Is_udd_wake_up_interrupt_enabled() && Is_udd_wake_up()) ||
		(Is_udd_resume_interrupt_enabled() && Is_udd_resume()) ||
  40187c:	f413 6f80 	tst.w	r3, #1024	; 0x400
  401880:	d014      	beq.n	4018ac <UDP_Handler+0x934>
		(Is_udd_ext_resume_interrupt_enabled() && Is_udd_ext_resume())) {
  401882:	4b1d      	ldr	r3, [pc, #116]	; (4018f8 <UDP_Handler+0x980>)
  401884:	69db      	ldr	r3, [r3, #28]
  401886:	f413 6f80 	tst.w	r3, #1024	; 0x400
  40188a:	d00f      	beq.n	4018ac <UDP_Handler+0x934>
		// Ack wakeup interrupt and enable suspend interrupt
		udd_ack_wakeups();
  40188c:	4b1a      	ldr	r3, [pc, #104]	; (4018f8 <UDP_Handler+0x980>)
  40188e:	f44f 5218 	mov.w	r2, #9728	; 0x2600
  401892:	621a      	str	r2, [r3, #32]
		// Do resume operations
		udd_disable_wakeups();
  401894:	615a      	str	r2, [r3, #20]
		sleepmgr_unlock_mode(UDP_SLEEP_MODE_USB_IDLE);
	}
	if (b_idle && !udd_b_idle) {
		sleepmgr_lock_mode(UDP_SLEEP_MODE_USB_IDLE);
	}
	udd_b_idle = b_idle;
  401896:	2101      	movs	r1, #1
  401898:	4a18      	ldr	r2, [pc, #96]	; (4018fc <UDP_Handler+0x984>)
  40189a:	7011      	strb	r1, [r2, #0]

		udd_sleep_mode(true); // Enter in IDLE mode
#ifdef UDC_RESUME_EVENT
		UDC_RESUME_EVENT();
#endif
		udd_ack_suspend();
  40189c:	f44f 7280 	mov.w	r2, #256	; 0x100
  4018a0:	621a      	str	r2, [r3, #32]
		udd_enable_suspend_interrupt();
  4018a2:	611a      	str	r2, [r3, #16]
		udd_enable_sof_interrupt();
  4018a4:	f44f 6200 	mov.w	r2, #2048	; 0x800
  4018a8:	611a      	str	r2, [r3, #16]
		goto udd_interrupt_end;
  4018aa:	e0cc      	b.n	401a46 <UDP_Handler+0xace>
	}

	if (Is_udd_suspend_interrupt_enabled() && Is_udd_suspend()) {
  4018ac:	4b12      	ldr	r3, [pc, #72]	; (4018f8 <UDP_Handler+0x980>)
  4018ae:	699b      	ldr	r3, [r3, #24]
  4018b0:	f413 7f80 	tst.w	r3, #256	; 0x100
  4018b4:	d026      	beq.n	401904 <UDP_Handler+0x98c>
  4018b6:	4b10      	ldr	r3, [pc, #64]	; (4018f8 <UDP_Handler+0x980>)
  4018b8:	69db      	ldr	r3, [r3, #28]
  4018ba:	f413 7f80 	tst.w	r3, #256	; 0x100
  4018be:	d021      	beq.n	401904 <UDP_Handler+0x98c>
		// Ack suspend interrupt and enable resume interrupt
		udd_ack_suspend();
  4018c0:	4b0d      	ldr	r3, [pc, #52]	; (4018f8 <UDP_Handler+0x980>)
  4018c2:	f44f 7280 	mov.w	r2, #256	; 0x100
  4018c6:	621a      	str	r2, [r3, #32]
		udd_disable_suspend_interrupt();
  4018c8:	615a      	str	r2, [r3, #20]
		udd_enable_wake_up_interrupt();
  4018ca:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  4018ce:	611a      	str	r2, [r3, #16]
		udd_enable_resume_interrupt();
  4018d0:	f44f 7200 	mov.w	r2, #512	; 0x200
  4018d4:	611a      	str	r2, [r3, #16]
		udd_enable_ext_resume_interrupt();
  4018d6:	f44f 6280 	mov.w	r2, #1024	; 0x400
  4018da:	611a      	str	r2, [r3, #16]
		udd_disable_periph_ck();
  4018dc:	2022      	movs	r0, #34	; 0x22
  4018de:	4b08      	ldr	r3, [pc, #32]	; (401900 <UDP_Handler+0x988>)
  4018e0:	4798      	blx	r3
		sleepmgr_unlock_mode(UDP_SLEEP_MODE_USB_IDLE);
	}
	if (b_idle && !udd_b_idle) {
		sleepmgr_lock_mode(UDP_SLEEP_MODE_USB_IDLE);
	}
	udd_b_idle = b_idle;
  4018e2:	2200      	movs	r2, #0
  4018e4:	4b05      	ldr	r3, [pc, #20]	; (4018fc <UDP_Handler+0x984>)
  4018e6:	701a      	strb	r2, [r3, #0]
  4018e8:	e0ad      	b.n	401a46 <UDP_Handler+0xace>
  4018ea:	bf00      	nop
  4018ec:	00400db1 	.word	0x00400db1
  4018f0:	20000588 	.word	0x20000588
  4018f4:	00400c7d 	.word	0x00400c7d
  4018f8:	40034000 	.word	0x40034000
  4018fc:	200005d8 	.word	0x200005d8
  401900:	004026f9 	.word	0x004026f9
#ifdef UDC_SUSPEND_EVENT
		UDC_SUSPEND_EVENT();
#endif
		goto udd_interrupt_end;
	}
	if (Is_udd_reset()) {
  401904:	4b51      	ldr	r3, [pc, #324]	; (401a4c <UDP_Handler+0xad4>)
  401906:	69db      	ldr	r3, [r3, #28]
  401908:	f413 5f80 	tst.w	r3, #4096	; 0x1000
  40190c:	f000 809b 	beq.w	401a46 <UDP_Handler+0xace>
		// USB bus reset detection
		udd_ack_reset();
  401910:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  401914:	4b4d      	ldr	r3, [pc, #308]	; (401a4c <UDP_Handler+0xad4>)
  401916:	621a      	str	r2, [r3, #32]
static void udd_ep_job_table_kill(void)
{
	uint8_t i;

	// For each endpoint, kill job
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
  401918:	2400      	movs	r4, #0
		udd_ep_finish_job(&udd_ep_job[i], UDD_EP_TRANSFER_ABORT, i + 1);
  40191a:	2601      	movs	r6, #1
  40191c:	4d4c      	ldr	r5, [pc, #304]	; (401a50 <UDP_Handler+0xad8>)
  40191e:	3401      	adds	r4, #1
  401920:	b2e4      	uxtb	r4, r4
  401922:	4638      	mov	r0, r7
  401924:	4631      	mov	r1, r6
  401926:	4622      	mov	r2, r4
  401928:	47a8      	blx	r5
  40192a:	3714      	adds	r7, #20
static void udd_ep_job_table_kill(void)
{
	uint8_t i;

	// For each endpoint, kill job
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
  40192c:	2c04      	cmp	r4, #4
  40192e:	d1f6      	bne.n	40191e <UDP_Handler+0x9a6>
		// Abort all jobs on-going
#if (0 != USB_DEVICE_MAX_EP)
		udd_ep_job_table_kill();
#endif
		// Reset USB Device Stack Core
		udc_reset();
  401930:	4b48      	ldr	r3, [pc, #288]	; (401a54 <UDP_Handler+0xadc>)
  401932:	4798      	blx	r3
		// Reset device state
		udd_disable_address_state();
  401934:	4b45      	ldr	r3, [pc, #276]	; (401a4c <UDP_Handler+0xad4>)
  401936:	685a      	ldr	r2, [r3, #4]
  401938:	f022 0201 	bic.w	r2, r2, #1
  40193c:	605a      	str	r2, [r3, #4]
		udd_disable_configured_state();
  40193e:	685a      	ldr	r2, [r3, #4]
  401940:	f022 0202 	bic.w	r2, r2, #2
  401944:	605a      	str	r2, [r3, #4]
static void udd_reset_ep_ctrl(void)
{
	irqflags_t flags;

	// Reset USB address to 0
	udd_enable_address();
  401946:	689a      	ldr	r2, [r3, #8]
  401948:	f442 7280 	orr.w	r2, r2, #256	; 0x100
  40194c:	609a      	str	r2, [r3, #8]
	udd_configure_address(0);
  40194e:	689a      	ldr	r2, [r3, #8]
  401950:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
  401954:	609a      	str	r2, [r3, #8]
	// Alloc and configure control endpoint in OUT direction
	udd_configure_endpoint(0, USB_EP_TYPE_CONTROL, 0);
  401956:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  401958:	922c      	str	r2, [sp, #176]	; 0xb0
  40195a:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
  40195c:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  401960:	922c      	str	r2, [sp, #176]	; 0xb0
  401962:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
  401964:	f422 4207 	bic.w	r2, r2, #34560	; 0x8700
  401968:	f022 0280 	bic.w	r2, r2, #128	; 0x80
  40196c:	922c      	str	r2, [sp, #176]	; 0xb0
  40196e:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
  401970:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
  401974:	922c      	str	r2, [sp, #176]	; 0xb0
  401976:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
  401978:	631a      	str	r2, [r3, #48]	; 0x30
  40197a:	2300      	movs	r3, #0
  40197c:	932d      	str	r3, [sp, #180]	; 0xb4
  40197e:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
  401980:	2b13      	cmp	r3, #19
  401982:	d806      	bhi.n	401992 <UDP_Handler+0xa1a>
  401984:	bf00      	nop
  401986:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
  401988:	3301      	adds	r3, #1
  40198a:	932d      	str	r3, [sp, #180]	; 0xb4
  40198c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
  40198e:	2b13      	cmp	r3, #19
  401990:	d9f8      	bls.n	401984 <UDP_Handler+0xa0c>
	udd_enable_endpoint(0);
  401992:	4a2e      	ldr	r2, [pc, #184]	; (401a4c <UDP_Handler+0xad4>)
  401994:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401996:	932e      	str	r3, [sp, #184]	; 0xb8
  401998:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
  40199a:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  40199e:	932e      	str	r3, [sp, #184]	; 0xb8
  4019a0:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
  4019a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
  4019a6:	932e      	str	r3, [sp, #184]	; 0xb8
  4019a8:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
  4019aa:	6313      	str	r3, [r2, #48]	; 0x30
  4019ac:	2300      	movs	r3, #0
  4019ae:	932f      	str	r3, [sp, #188]	; 0xbc
  4019b0:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
  4019b2:	2b13      	cmp	r3, #19
  4019b4:	d806      	bhi.n	4019c4 <UDP_Handler+0xa4c>
  4019b6:	bf00      	nop
  4019b8:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
  4019ba:	3301      	adds	r3, #1
  4019bc:	932f      	str	r3, [sp, #188]	; 0xbc
  4019be:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
  4019c0:	2b13      	cmp	r3, #19
  4019c2:	d9f8      	bls.n	4019b6 <UDP_Handler+0xa3e>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  4019c4:	f3ef 8310 	mrs	r3, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
  4019c8:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  4019ca:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
  4019ce:	2100      	movs	r1, #0
  4019d0:	4a21      	ldr	r2, [pc, #132]	; (401a58 <UDP_Handler+0xae0>)
  4019d2:	7011      	strb	r1, [r2, #0]

	flags = cpu_irq_save();
	udd_enable_endpoint_interrupt(0);
  4019d4:	2101      	movs	r1, #1
  4019d6:	4a1d      	ldr	r2, [pc, #116]	; (401a4c <UDP_Handler+0xad4>)
  4019d8:	6111      	str	r1, [r2, #16]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  4019da:	b923      	cbnz	r3, 4019e6 <UDP_Handler+0xa6e>
		cpu_irq_enable();
  4019dc:	4b1e      	ldr	r3, [pc, #120]	; (401a58 <UDP_Handler+0xae0>)
  4019de:	7019      	strb	r1, [r3, #0]
  4019e0:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
  4019e4:	b662      	cpsie	i
		udd_disable_address_state();
		udd_disable_configured_state();
		// Reset endpoint control
		udd_reset_ep_ctrl();
		// Reset endpoint control management
		udd_ctrl_init();
  4019e6:	4b1d      	ldr	r3, [pc, #116]	; (401a5c <UDP_Handler+0xae4>)
  4019e8:	4798      	blx	r3
		// After a USB reset, the suspend and SOF interrupt masks has been reseted
		// Thus, re-enable these
		udd_enable_suspend_interrupt();
  4019ea:	4b18      	ldr	r3, [pc, #96]	; (401a4c <UDP_Handler+0xad4>)
  4019ec:	f44f 7280 	mov.w	r2, #256	; 0x100
  4019f0:	611a      	str	r2, [r3, #16]
		udd_enable_sof_interrupt();
  4019f2:	f44f 6200 	mov.w	r2, #2048	; 0x800
  4019f6:	611a      	str	r2, [r3, #16]
		goto udd_interrupt_end;
  4019f8:	e025      	b.n	401a46 <UDP_Handler+0xace>
		if (nb_data >= nb_remain) {
			nb_data = nb_remain;
			b_full = true;
		}
		// Modify job information
		ptr_job->buf_cnt += nb_data;
  4019fa:	eb08 0088 	add.w	r0, r8, r8, lsl #2
  4019fe:	4a18      	ldr	r2, [pc, #96]	; (401a60 <UDP_Handler+0xae8>)
  401a00:	eb02 0280 	add.w	r2, r2, r0, lsl #2
  401a04:	1878      	adds	r0, r7, r1
  401a06:	60d0      	str	r0, [r2, #12]
	uint32_t pkt_size = ptr_job->size;
	uint8_t *ptr_dst = &ptr_job->buf[ptr_job->buf_cnt];
	bool b_full = false, b_short;

	// Read byte count
	nb_data = udd_byte_count(ep);
  401a08:	4638      	mov	r0, r7
	udd_ep_job_t *ptr_job = &udd_ep_job[ep - 1];
	uint32_t nb_data = 0, i;
	uint32_t nb_remain = ptr_job->buf_size - ptr_job->buf_cnt;
	uint32_t pkt_size = ptr_job->size;
	uint8_t *ptr_dst = &ptr_job->buf[ptr_job->buf_cnt];
	bool b_full = false, b_short;
  401a0a:	f04f 0b00 	mov.w	fp, #0
  401a0e:	e537      	b.n	401480 <UDP_Handler+0x508>
		for (i = 0; i < nb_data; i++) {
			*ptr_dst++ = udd_endpoint_fifo_read(ep);
		}
	}
	// Clear FIFO Status
	udd_ep_ack_out_received(ep);
  401a10:	4630      	mov	r0, r6
  401a12:	4b14      	ldr	r3, [pc, #80]	; (401a64 <UDP_Handler+0xaec>)
  401a14:	4798      	blx	r3
  401a16:	e544      	b.n	4014a2 <UDP_Handler+0x52a>
		if (nb_data >= nb_remain) {
			nb_data = nb_remain;
			b_full = true;
		}
		// Modify job information
		ptr_job->buf_cnt += nb_data;
  401a18:	eb08 0c88 	add.w	ip, r8, r8, lsl #2
  401a1c:	f8df e040 	ldr.w	lr, [pc, #64]	; 401a60 <UDP_Handler+0xae8>
  401a20:	eb0e 0e8c 	add.w	lr, lr, ip, lsl #2
  401a24:	f8ce 200c 	str.w	r2, [lr, #12]

		// Copy FIFO (DPRAM) to buffer
		for (i = 0; i < nb_data; i++) {
  401a28:	2800      	cmp	r0, #0
  401a2a:	f47f ad27 	bne.w	40147c <UDP_Handler+0x504>
  401a2e:	e7ef      	b.n	401a10 <UDP_Handler+0xa98>
			*ptr_dst++ = udd_endpoint_fifo_read(ep);
		}
	}
	// Clear FIFO Status
	udd_ep_ack_out_received(ep);
  401a30:	4630      	mov	r0, r6
  401a32:	4b0c      	ldr	r3, [pc, #48]	; (401a64 <UDP_Handler+0xaec>)
  401a34:	4798      	blx	r3
  401a36:	e531      	b.n	40149c <UDP_Handler+0x524>
	if (udd_ep_interrupt()) {
		goto udd_interrupt_end; // Interrupt acked by bulk/interrupt/isochronous endpoint managed
	}
#endif

	if ((Is_udd_wake_up_interrupt_enabled() && Is_udd_wake_up()) ||
  401a38:	4b04      	ldr	r3, [pc, #16]	; (401a4c <UDP_Handler+0xad4>)
  401a3a:	699b      	ldr	r3, [r3, #24]
  401a3c:	f413 5f00 	tst.w	r3, #8192	; 0x2000
  401a40:	f47f af0b 	bne.w	40185a <UDP_Handler+0x8e2>
  401a44:	e70e      	b.n	401864 <UDP_Handler+0x8ec>
	}

udd_interrupt_end:
udd_interrupt_sof_end:
	return;
}
  401a46:	b031      	add	sp, #196	; 0xc4
  401a48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401a4c:	40034000 	.word	0x40034000
  401a50:	00400c7d 	.word	0x00400c7d
  401a54:	0040032d 	.word	0x0040032d
  401a58:	20000097 	.word	0x20000097
  401a5c:	004009c5 	.word	0x004009c5
  401a60:	20000588 	.word	0x20000588
  401a64:	00400cbd 	.word	0x00400cbd

00401a68 <udd_attach>:
	cpu_irq_restore(flags);
}


void udd_attach(void)
{
  401a68:	b510      	push	{r4, lr}
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  401a6a:	f3ef 8410 	mrs	r4, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
  401a6e:	b672      	cpsid	i
  401a70:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
  401a74:	2200      	movs	r2, #0
  401a76:	4b14      	ldr	r3, [pc, #80]	; (401ac8 <udd_attach+0x60>)
  401a78:	701a      	strb	r2, [r3, #0]
		sleepmgr_unlock_mode(UDP_SLEEP_MODE_USB_IDLE);
	}
	if (b_idle && !udd_b_idle) {
		sleepmgr_lock_mode(UDP_SLEEP_MODE_USB_IDLE);
	}
	udd_b_idle = b_idle;
  401a7a:	2201      	movs	r2, #1
  401a7c:	4b13      	ldr	r3, [pc, #76]	; (401acc <udd_attach+0x64>)
  401a7e:	701a      	strb	r2, [r3, #0]
	// At startup the USB bus state is unknown,
	// therefore the state is considered IDLE to not miss any USB event
	udd_sleep_mode(true);

	// Enable peripheral clock and USB clock
	udd_enable_periph_ck();
  401a80:	2022      	movs	r0, #34	; 0x22
  401a82:	4b13      	ldr	r3, [pc, #76]	; (401ad0 <udd_attach+0x68>)
  401a84:	4798      	blx	r3

	// Authorize attach if VBus is present
	udd_enable_transceiver();
  401a86:	4b13      	ldr	r3, [pc, #76]	; (401ad4 <udd_attach+0x6c>)
  401a88:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  401a8a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
  401a8e:	675a      	str	r2, [r3, #116]	; 0x74
	udd_attach_device();
  401a90:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  401a92:	f442 7200 	orr.w	r2, r2, #512	; 0x200
  401a96:	675a      	str	r2, [r3, #116]	; 0x74

	// Enable USB line events
	udd_enable_suspend_interrupt();
  401a98:	f44f 7280 	mov.w	r2, #256	; 0x100
  401a9c:	611a      	str	r2, [r3, #16]
	udd_enable_wake_up_interrupt();
  401a9e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  401aa2:	611a      	str	r2, [r3, #16]
	udd_enable_resume_interrupt();
  401aa4:	f44f 7200 	mov.w	r2, #512	; 0x200
  401aa8:	611a      	str	r2, [r3, #16]
	udd_enable_ext_resume_interrupt();
  401aaa:	f44f 6280 	mov.w	r2, #1024	; 0x400
  401aae:	611a      	str	r2, [r3, #16]
	udd_enable_sof_interrupt();
  401ab0:	f44f 6200 	mov.w	r2, #2048	; 0x800
  401ab4:	611a      	str	r2, [r3, #16]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  401ab6:	b92c      	cbnz	r4, 401ac4 <udd_attach+0x5c>
		cpu_irq_enable();
  401ab8:	2201      	movs	r2, #1
  401aba:	4b03      	ldr	r3, [pc, #12]	; (401ac8 <udd_attach+0x60>)
  401abc:	701a      	strb	r2, [r3, #0]
  401abe:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
  401ac2:	b662      	cpsie	i
  401ac4:	bd10      	pop	{r4, pc}
  401ac6:	bf00      	nop
  401ac8:	20000097 	.word	0x20000097
  401acc:	200005d8 	.word	0x200005d8
  401ad0:	004026a5 	.word	0x004026a5
  401ad4:	40034000 	.word	0x40034000

00401ad8 <udd_enable>:
#endif
}


void udd_enable(void)
{
  401ad8:	b538      	push	{r3, r4, r5, lr}
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  401ada:	f3ef 8510 	mrs	r5, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
  401ade:	b672      	cpsid	i
  401ae0:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
  401ae4:	2400      	movs	r4, #0
  401ae6:	4b18      	ldr	r3, [pc, #96]	; (401b48 <udd_enable+0x70>)
  401ae8:	701c      	strb	r4, [r3, #0]
#if SAMG55
	matrix_set_usb_device();
#endif

	// Enable USB hardware
	udd_enable_periph_ck();
  401aea:	2022      	movs	r0, #34	; 0x22
  401aec:	4b17      	ldr	r3, [pc, #92]	; (401b4c <udd_enable+0x74>)
  401aee:	4798      	blx	r3
	sysclk_enable_usb();
  401af0:	4b17      	ldr	r3, [pc, #92]	; (401b50 <udd_enable+0x78>)
  401af2:	4798      	blx	r3
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
  401af4:	4b17      	ldr	r3, [pc, #92]	; (401b54 <udd_enable+0x7c>)
  401af6:	2250      	movs	r2, #80	; 0x50
  401af8:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  401afc:	2204      	movs	r2, #4
  401afe:	605a      	str	r2, [r3, #4]
  401b00:	4623      	mov	r3, r4

static void udd_ep_job_table_reset(void)
{
	uint8_t i;
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
		udd_ep_job[i].bank = 0;
  401b02:	4815      	ldr	r0, [pc, #84]	; (401b58 <udd_enable+0x80>)
  401b04:	009a      	lsls	r2, r3, #2
  401b06:	18d1      	adds	r1, r2, r3
  401b08:	eb00 0181 	add.w	r1, r0, r1, lsl #2
  401b0c:	7c49      	ldrb	r1, [r1, #17]
		udd_ep_job[i].busy = false;
		udd_ep_job[i].b_stall_requested = false;
		udd_ep_job[i].b_shortpacket = false;
		udd_ep_job[i].b_buf_end = false;
  401b0e:	441a      	add	r2, r3
  401b10:	eb00 0282 	add.w	r2, r0, r2, lsl #2
  401b14:	f001 0183 	and.w	r1, r1, #131	; 0x83
  401b18:	f36f 11c7 	bfc	r1, #7, #1
  401b1c:	7451      	strb	r1, [r2, #17]
  401b1e:	3301      	adds	r3, #1
#if (0!=USB_DEVICE_MAX_EP)

static void udd_ep_job_table_reset(void)
{
	uint8_t i;
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
  401b20:	2b04      	cmp	r3, #4
  401b22:	d1ef      	bne.n	401b04 <udd_enable+0x2c>
#if (0!=USB_DEVICE_MAX_EP)
	udd_ep_job_table_reset();
#endif

	// Always authorize asynchronous USB interrupts to exit of sleep mode
	pmc_set_fast_startup_input(PMC_FSMR_USBAL);
  401b24:	f44f 2080 	mov.w	r0, #262144	; 0x40000
  401b28:	4b0c      	ldr	r3, [pc, #48]	; (401b5c <udd_enable+0x84>)
  401b2a:	4798      	blx	r3

#ifndef UDD_NO_SLEEP_MGR
	// Initialize the sleep mode authorized for the USB suspend mode
	udd_b_idle = false;
  401b2c:	2200      	movs	r2, #0
  401b2e:	4b0c      	ldr	r3, [pc, #48]	; (401b60 <udd_enable+0x88>)
  401b30:	701a      	strb	r2, [r3, #0]
	if (Is_udd_vbus_high()) {
		udd_vbus_handler(USB_VBUS_PIO_ID, USB_VBUS_PIO_MASK);
	}
#else
#  ifndef USB_DEVICE_ATTACH_AUTO_DISABLE
	udd_attach();
  401b32:	4b0c      	ldr	r3, [pc, #48]	; (401b64 <udd_enable+0x8c>)
  401b34:	4798      	blx	r3
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  401b36:	b92d      	cbnz	r5, 401b44 <udd_enable+0x6c>
		cpu_irq_enable();
  401b38:	2201      	movs	r2, #1
  401b3a:	4b03      	ldr	r3, [pc, #12]	; (401b48 <udd_enable+0x70>)
  401b3c:	701a      	strb	r2, [r3, #0]
  401b3e:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
  401b42:	b662      	cpsie	i
  401b44:	bd38      	pop	{r3, r4, r5, pc}
  401b46:	bf00      	nop
  401b48:	20000097 	.word	0x20000097
  401b4c:	004026a5 	.word	0x004026a5
  401b50:	00402265 	.word	0x00402265
  401b54:	e000e100 	.word	0xe000e100
  401b58:	20000588 	.word	0x20000588
  401b5c:	0040276d 	.word	0x0040276d
  401b60:	200005d8 	.word	0x200005d8
  401b64:	00401a69 	.word	0x00401a69

00401b68 <udd_set_address>:
}


void udd_set_address(uint8_t address)
{
	udd_disable_address_state();
  401b68:	4b0c      	ldr	r3, [pc, #48]	; (401b9c <udd_set_address+0x34>)
  401b6a:	685a      	ldr	r2, [r3, #4]
  401b6c:	f022 0201 	bic.w	r2, r2, #1
  401b70:	605a      	str	r2, [r3, #4]
	udd_disable_address();
  401b72:	689a      	ldr	r2, [r3, #8]
  401b74:	f422 7280 	bic.w	r2, r2, #256	; 0x100
  401b78:	609a      	str	r2, [r3, #8]
	if (address) {
  401b7a:	b170      	cbz	r0, 401b9a <udd_set_address+0x32>
		udd_configure_address(address);
  401b7c:	689a      	ldr	r2, [r3, #8]
  401b7e:	f000 007f 	and.w	r0, r0, #127	; 0x7f
  401b82:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
  401b86:	4310      	orrs	r0, r2
  401b88:	6098      	str	r0, [r3, #8]
		udd_enable_address();
  401b8a:	689a      	ldr	r2, [r3, #8]
  401b8c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
  401b90:	609a      	str	r2, [r3, #8]
		udd_enable_address_state();
  401b92:	685a      	ldr	r2, [r3, #4]
  401b94:	f042 0201 	orr.w	r2, r2, #1
  401b98:	605a      	str	r2, [r3, #4]
  401b9a:	4770      	bx	lr
  401b9c:	40034000 	.word	0x40034000

00401ba0 <udd_getaddress>:
}


uint8_t udd_getaddress(void)
{
	if (Is_udd_address_state_enabled())
  401ba0:	4b05      	ldr	r3, [pc, #20]	; (401bb8 <udd_getaddress+0x18>)
  401ba2:	685b      	ldr	r3, [r3, #4]
  401ba4:	f013 0f01 	tst.w	r3, #1
		return udd_get_configured_address();
  401ba8:	bf1d      	ittte	ne
  401baa:	4b03      	ldrne	r3, [pc, #12]	; (401bb8 <udd_getaddress+0x18>)
  401bac:	6898      	ldrne	r0, [r3, #8]
  401bae:	f000 007f 	andne.w	r0, r0, #127	; 0x7f
	return 0;
  401bb2:	2000      	moveq	r0, #0
}
  401bb4:	4770      	bx	lr
  401bb6:	bf00      	nop
  401bb8:	40034000 	.word	0x40034000

00401bbc <udd_set_setup_payload>:
}


void udd_set_setup_payload( uint8_t *payload, uint16_t payload_size )
{
	udd_g_ctrlreq.payload = payload;
  401bbc:	4b01      	ldr	r3, [pc, #4]	; (401bc4 <udd_set_setup_payload+0x8>)
  401bbe:	6098      	str	r0, [r3, #8]
	udd_g_ctrlreq.payload_size = payload_size;
  401bc0:	8199      	strh	r1, [r3, #12]
  401bc2:	4770      	bx	lr
  401bc4:	200005f0 	.word	0x200005f0

00401bc8 <udd_ep_alloc>:


#if (0!=USB_DEVICE_MAX_EP)
bool udd_ep_alloc(udd_ep_id_t ep, uint8_t bmAttributes,
		uint16_t MaxEndpointSize)
{
  401bc8:	b5f0      	push	{r4, r5, r6, r7, lr}
  401bca:	b083      	sub	sp, #12
	udd_ep_job_t *ptr_job;
	bool b_dir_in;
	bool b_iso;
	b_dir_in = ep & USB_EP_DIR_IN;
	b_iso = (bmAttributes&USB_EP_TYPE_MASK) == USB_EP_TYPE_ISOCHRONOUS;
	ep = ep & USB_EP_ADDR_MASK;
  401bcc:	f000 040f 	and.w	r4, r0, #15

	if (ep > USB_DEVICE_MAX_EP) {
  401bd0:	2c04      	cmp	r4, #4
  401bd2:	d86c      	bhi.n	401cae <udd_ep_alloc+0xe6>
  401bd4:	00a3      	lsls	r3, r4, #2
  401bd6:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
  401bda:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
		return false;
	}
	if (Is_udd_endpoint_enabled(ep)) {
  401bde:	6b1d      	ldr	r5, [r3, #48]	; 0x30
  401be0:	f415 4f00 	tst.w	r5, #32768	; 0x8000
  401be4:	d165      	bne.n	401cb2 <udd_ep_alloc+0xea>
		return false;
	}

	// Check parameters
	if (b_iso && (!udd_is_endpoint_support_iso(ep))) {
  401be6:	f001 0503 	and.w	r5, r1, #3
  401bea:	2d01      	cmp	r5, #1
  401bec:	d103      	bne.n	401bf6 <udd_ep_alloc+0x2e>
  401bee:	2c00      	cmp	r4, #0
  401bf0:	d061      	beq.n	401cb6 <udd_ep_alloc+0xee>
  401bf2:	2c03      	cmp	r4, #3
  401bf4:	d061      	beq.n	401cba <udd_ep_alloc+0xf2>
		return false;
	}
	if (MaxEndpointSize > udd_get_endpoint_size_max(ep)) {
  401bf6:	1f25      	subs	r5, r4, #4
  401bf8:	b2ed      	uxtb	r5, r5
  401bfa:	2d02      	cmp	r5, #2
  401bfc:	bf34      	ite	cc
  401bfe:	f44f 7500 	movcc.w	r5, #512	; 0x200
  401c02:	2540      	movcs	r5, #64	; 0x40
  401c04:	4295      	cmp	r5, r2
  401c06:	db5a      	blt.n	401cbe <udd_ep_alloc+0xf6>
		return false;
	}
	ptr_job = &udd_ep_job[ep - 1];
  401c08:	1e66      	subs	r6, r4, #1

	// Set endpoint size
	ptr_job->size = MaxEndpointSize;
  401c0a:	eb06 0786 	add.w	r7, r6, r6, lsl #2
  401c0e:	4d2e      	ldr	r5, [pc, #184]	; (401cc8 <udd_ep_alloc+0x100>)
  401c10:	eb05 0587 	add.w	r5, r5, r7, lsl #2
  401c14:	f105 0710 	add.w	r7, r5, #16
  401c18:	f8b5 e010 	ldrh.w	lr, [r5, #16]
  401c1c:	f362 0e09 	bfi	lr, r2, #0, #10
  401c20:	f8a5 e010 	strh.w	lr, [r5, #16]
	ptr_job->b_buf_end = false;
  401c24:	7c6a      	ldrb	r2, [r5, #17]
	ptr_job->b_stall_requested = false;
  401c26:	f002 027f 	and.w	r2, r2, #127	; 0x7f
  401c2a:	f36f 1245 	bfc	r2, #5, #1
  401c2e:	746a      	strb	r2, [r5, #17]
	if (b_dir_in) {
  401c30:	09c0      	lsrs	r0, r0, #7
  401c32:	d003      	beq.n	401c3c <udd_ep_alloc+0x74>
		// No data buffered in FIFO
		ptr_job->bank = 0;
  401c34:	787a      	ldrb	r2, [r7, #1]
  401c36:	f36f 0283 	bfc	r2, #2, #2
  401c3a:	707a      	strb	r2, [r7, #1]
	}

	// Reset FIFOs
	udd_reset_endpoint(ep);
  401c3c:	4a23      	ldr	r2, [pc, #140]	; (401ccc <udd_ep_alloc+0x104>)
  401c3e:	6a96      	ldr	r6, [r2, #40]	; 0x28
  401c40:	2501      	movs	r5, #1
  401c42:	fa05 f404 	lsl.w	r4, r5, r4
  401c46:	ea44 0506 	orr.w	r5, r4, r6
  401c4a:	6295      	str	r5, [r2, #40]	; 0x28
  401c4c:	6a95      	ldr	r5, [r2, #40]	; 0x28
  401c4e:	ea25 0404 	bic.w	r4, r5, r4
  401c52:	6294      	str	r4, [r2, #40]	; 0x28
	// Set configuration of new endpoint
	udd_configure_endpoint(ep,
  401c54:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  401c56:	9200      	str	r2, [sp, #0]
  401c58:	9a00      	ldr	r2, [sp, #0]
  401c5a:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  401c5e:	9200      	str	r2, [sp, #0]
  401c60:	9a00      	ldr	r2, [sp, #0]
  401c62:	f422 4207 	bic.w	r2, r2, #34560	; 0x8700
  401c66:	f022 0280 	bic.w	r2, r2, #128	; 0x80
  401c6a:	9200      	str	r2, [sp, #0]
  401c6c:	b138      	cbz	r0, 401c7e <udd_ep_alloc+0xb6>
  401c6e:	f041 0204 	orr.w	r2, r1, #4
  401c72:	0212      	lsls	r2, r2, #8
  401c74:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  401c78:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
  401c7c:	e004      	b.n	401c88 <udd_ep_alloc+0xc0>
  401c7e:	020a      	lsls	r2, r1, #8
  401c80:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  401c84:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
  401c88:	9900      	ldr	r1, [sp, #0]
  401c8a:	430a      	orrs	r2, r1
  401c8c:	9200      	str	r2, [sp, #0]
  401c8e:	9a00      	ldr	r2, [sp, #0]
  401c90:	631a      	str	r2, [r3, #48]	; 0x30
  401c92:	2300      	movs	r3, #0
  401c94:	9301      	str	r3, [sp, #4]
  401c96:	9b01      	ldr	r3, [sp, #4]
  401c98:	2b13      	cmp	r3, #19
  401c9a:	d812      	bhi.n	401cc2 <udd_ep_alloc+0xfa>

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
  401c9c:	bf00      	nop
  401c9e:	9b01      	ldr	r3, [sp, #4]
  401ca0:	3301      	adds	r3, #1
  401ca2:	9301      	str	r3, [sp, #4]
  401ca4:	9b01      	ldr	r3, [sp, #4]
  401ca6:	2b13      	cmp	r3, #19
  401ca8:	d9f8      	bls.n	401c9c <udd_ep_alloc+0xd4>
		(b_dir_in ? (bmAttributes | 0x4) : bmAttributes),
		0);
	return true;
  401caa:	2001      	movs	r0, #1
  401cac:	e00a      	b.n	401cc4 <udd_ep_alloc+0xfc>
	b_dir_in = ep & USB_EP_DIR_IN;
	b_iso = (bmAttributes&USB_EP_TYPE_MASK) == USB_EP_TYPE_ISOCHRONOUS;
	ep = ep & USB_EP_ADDR_MASK;

	if (ep > USB_DEVICE_MAX_EP) {
		return false;
  401cae:	2000      	movs	r0, #0
  401cb0:	e008      	b.n	401cc4 <udd_ep_alloc+0xfc>
	}
	if (Is_udd_endpoint_enabled(ep)) {
		return false;
  401cb2:	2000      	movs	r0, #0
  401cb4:	e006      	b.n	401cc4 <udd_ep_alloc+0xfc>
	}

	// Check parameters
	if (b_iso && (!udd_is_endpoint_support_iso(ep))) {
		return false;
  401cb6:	2000      	movs	r0, #0
  401cb8:	e004      	b.n	401cc4 <udd_ep_alloc+0xfc>
  401cba:	2000      	movs	r0, #0
  401cbc:	e002      	b.n	401cc4 <udd_ep_alloc+0xfc>
	}
	if (MaxEndpointSize > udd_get_endpoint_size_max(ep)) {
		return false;
  401cbe:	2000      	movs	r0, #0
  401cc0:	e000      	b.n	401cc4 <udd_ep_alloc+0xfc>
	udd_reset_endpoint(ep);
	// Set configuration of new endpoint
	udd_configure_endpoint(ep,
		(b_dir_in ? (bmAttributes | 0x4) : bmAttributes),
		0);
	return true;
  401cc2:	2001      	movs	r0, #1
}
  401cc4:	b003      	add	sp, #12
  401cc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
  401cc8:	20000588 	.word	0x20000588
  401ccc:	40034000 	.word	0x40034000

00401cd0 <udd_ep_free>:


void udd_ep_free(udd_ep_id_t ep)
{
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
  401cd0:	f000 020f 	and.w	r2, r0, #15
	if (USB_DEVICE_MAX_EP < ep_index) {
  401cd4:	2a04      	cmp	r2, #4
  401cd6:	d82a      	bhi.n	401d2e <udd_ep_free+0x5e>
	return true;
}


void udd_ep_free(udd_ep_id_t ep)
{
  401cd8:	b500      	push	{lr}
  401cda:	b083      	sub	sp, #12
  401cdc:	0093      	lsls	r3, r2, #2
  401cde:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
  401ce2:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
	if (USB_DEVICE_MAX_EP < ep_index) {
		return;
	}
	udd_disable_endpoint(ep_index);
  401ce6:	6b19      	ldr	r1, [r3, #48]	; 0x30
  401ce8:	9100      	str	r1, [sp, #0]
  401cea:	9900      	ldr	r1, [sp, #0]
  401cec:	f041 014f 	orr.w	r1, r1, #79	; 0x4f
  401cf0:	9100      	str	r1, [sp, #0]
  401cf2:	9900      	ldr	r1, [sp, #0]
  401cf4:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
  401cf8:	9100      	str	r1, [sp, #0]
  401cfa:	9900      	ldr	r1, [sp, #0]
  401cfc:	6319      	str	r1, [r3, #48]	; 0x30
  401cfe:	2300      	movs	r3, #0
  401d00:	9301      	str	r3, [sp, #4]
  401d02:	9b01      	ldr	r3, [sp, #4]
  401d04:	2b13      	cmp	r3, #19
  401d06:	d806      	bhi.n	401d16 <udd_ep_free+0x46>
  401d08:	bf00      	nop
  401d0a:	9b01      	ldr	r3, [sp, #4]
  401d0c:	3301      	adds	r3, #1
  401d0e:	9301      	str	r3, [sp, #4]
  401d10:	9b01      	ldr	r3, [sp, #4]
  401d12:	2b13      	cmp	r3, #19
  401d14:	d9f8      	bls.n	401d08 <udd_ep_free+0x38>
static void udd_ep_abort_job(udd_ep_id_t ep)
{
	ep &= USB_EP_ADDR_MASK;

	// Abort job on endpoint
	udd_ep_finish_job(&udd_ep_job[ep - 1], UDD_EP_TRANSFER_ABORT, ep);
  401d16:	1e50      	subs	r0, r2, #1
  401d18:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  401d1c:	4b04      	ldr	r3, [pc, #16]	; (401d30 <udd_ep_free+0x60>)
  401d1e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  401d22:	2101      	movs	r1, #1
  401d24:	4b03      	ldr	r3, [pc, #12]	; (401d34 <udd_ep_free+0x64>)
  401d26:	4798      	blx	r3
	if (USB_DEVICE_MAX_EP < ep_index) {
		return;
	}
	udd_disable_endpoint(ep_index);
	udd_ep_abort_job(ep);
}
  401d28:	b003      	add	sp, #12
  401d2a:	f85d fb04 	ldr.w	pc, [sp], #4
  401d2e:	4770      	bx	lr
  401d30:	20000588 	.word	0x20000588
  401d34:	00400c7d 	.word	0x00400c7d

00401d38 <udd_ep_is_halted>:


bool udd_ep_is_halted(udd_ep_id_t ep)
{
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
  401d38:	f000 000f 	and.w	r0, r0, #15
	udd_ep_job_t *ptr_job = &udd_ep_job[ep_index - 1];
	if (USB_DEVICE_MAX_EP < ep_index) {
  401d3c:	2804      	cmp	r0, #4
  401d3e:	d815      	bhi.n	401d6c <udd_ep_is_halted+0x34>
		return false;
	}
	return ptr_job->b_stall_requested ||
  401d40:	1e43      	subs	r3, r0, #1
  401d42:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  401d46:	4a0a      	ldr	r2, [pc, #40]	; (401d70 <udd_ep_is_halted+0x38>)
  401d48:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  401d4c:	7c5b      	ldrb	r3, [r3, #17]
  401d4e:	f013 0f20 	tst.w	r3, #32
  401d52:	d109      	bne.n	401d68 <udd_ep_is_halted+0x30>
			Is_udd_endpoint_stall_pending(ep & USB_EP_ADDR_MASK);
  401d54:	300c      	adds	r0, #12
  401d56:	4b07      	ldr	r3, [pc, #28]	; (401d74 <udd_ep_is_halted+0x3c>)
  401d58:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
	udd_ep_job_t *ptr_job = &udd_ep_job[ep_index - 1];
	if (USB_DEVICE_MAX_EP < ep_index) {
		return false;
	}
	return ptr_job->b_stall_requested ||
  401d5c:	f013 0f28 	tst.w	r3, #40	; 0x28
  401d60:	bf14      	ite	ne
  401d62:	2001      	movne	r0, #1
  401d64:	2000      	moveq	r0, #0
  401d66:	4770      	bx	lr
  401d68:	2001      	movs	r0, #1
  401d6a:	4770      	bx	lr
bool udd_ep_is_halted(udd_ep_id_t ep)
{
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
	udd_ep_job_t *ptr_job = &udd_ep_job[ep_index - 1];
	if (USB_DEVICE_MAX_EP < ep_index) {
		return false;
  401d6c:	2000      	movs	r0, #0
	}
	return ptr_job->b_stall_requested ||
			Is_udd_endpoint_stall_pending(ep & USB_EP_ADDR_MASK);
}
  401d6e:	4770      	bx	lr
  401d70:	20000588 	.word	0x20000588
  401d74:	40034000 	.word	0x40034000

00401d78 <udd_ep_set_halt>:


bool udd_ep_set_halt(udd_ep_id_t ep)
{
	bool b_dir_in = ep & USB_EP_DIR_IN;
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
  401d78:	f000 010f 	and.w	r1, r0, #15
	udd_ep_job_t *ptr_job = &udd_ep_job[ep_index - 1];
	irqflags_t flags;
	if (USB_DEVICE_MAX_EP < ep_index) {
  401d7c:	2904      	cmp	r1, #4
  401d7e:	d861      	bhi.n	401e44 <udd_ep_set_halt+0xcc>
			Is_udd_endpoint_stall_pending(ep & USB_EP_ADDR_MASK);
}


bool udd_ep_set_halt(udd_ep_id_t ep)
{
  401d80:	b410      	push	{r4}
  401d82:	b083      	sub	sp, #12
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  401d84:	f3ef 8210 	mrs	r2, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
  401d88:	fab2 f282 	clz	r2, r2
  401d8c:	0952      	lsrs	r2, r2, #5
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
  401d8e:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  401d90:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  401d94:	2400      	movs	r4, #0
  401d96:	4b30      	ldr	r3, [pc, #192]	; (401e58 <udd_ep_set_halt+0xe0>)
  401d98:	701c      	strb	r4, [r3, #0]
	irqflags_t flags;
	if (USB_DEVICE_MAX_EP < ep_index) {
		return false;
	}
	flags = cpu_irq_save();
	if (b_dir_in && (Is_udd_transmit_ready(ep_index)
  401d9a:	f010 0f80 	tst.w	r0, #128	; 0x80
  401d9e:	d028      	beq.n	401df2 <udd_ep_set_halt+0x7a>

bool udd_ep_set_halt(udd_ep_id_t ep)
{
	bool b_dir_in = ep & USB_EP_DIR_IN;
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
	udd_ep_job_t *ptr_job = &udd_ep_job[ep_index - 1];
  401da0:	1e4b      	subs	r3, r1, #1
	irqflags_t flags;
	if (USB_DEVICE_MAX_EP < ep_index) {
		return false;
	}
	flags = cpu_irq_save();
	if (b_dir_in && (Is_udd_transmit_ready(ep_index)
  401da2:	f101 000c 	add.w	r0, r1, #12
  401da6:	4c2d      	ldr	r4, [pc, #180]	; (401e5c <udd_ep_set_halt+0xe4>)
  401da8:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
  401dac:	f010 0f10 	tst.w	r0, #16
  401db0:	d109      	bne.n	401dc6 <udd_ep_set_halt+0x4e>
				|| ptr_job->bank > 1)) {
  401db2:	eb03 0083 	add.w	r0, r3, r3, lsl #2
  401db6:	4c2a      	ldr	r4, [pc, #168]	; (401e60 <udd_ep_set_halt+0xe8>)
  401db8:	eb04 0080 	add.w	r0, r4, r0, lsl #2
  401dbc:	7c40      	ldrb	r0, [r0, #17]
  401dbe:	f3c0 0081 	ubfx	r0, r0, #2, #2
  401dc2:	2801      	cmp	r0, #1
  401dc4:	dd15      	ble.n	401df2 <udd_ep_set_halt+0x7a>
		// Halt until banks sent
		ptr_job->b_stall_requested = true;
  401dc6:	eb03 0083 	add.w	r0, r3, r3, lsl #2
  401dca:	4b25      	ldr	r3, [pc, #148]	; (401e60 <udd_ep_set_halt+0xe8>)
  401dcc:	eb03 0380 	add.w	r3, r3, r0, lsl #2
  401dd0:	7c58      	ldrb	r0, [r3, #17]
  401dd2:	f040 0020 	orr.w	r0, r0, #32
  401dd6:	7458      	strb	r0, [r3, #17]
		udd_enable_endpoint_interrupt(ep_index);
  401dd8:	2301      	movs	r3, #1
  401dda:	408b      	lsls	r3, r1
  401ddc:	491f      	ldr	r1, [pc, #124]	; (401e5c <udd_ep_set_halt+0xe4>)
  401dde:	610b      	str	r3, [r1, #16]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  401de0:	2a00      	cmp	r2, #0
  401de2:	d031      	beq.n	401e48 <udd_ep_set_halt+0xd0>
		cpu_irq_enable();
  401de4:	2001      	movs	r0, #1
  401de6:	4b1c      	ldr	r3, [pc, #112]	; (401e58 <udd_ep_set_halt+0xe0>)
  401de8:	7018      	strb	r0, [r3, #0]
  401dea:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
  401dee:	b662      	cpsie	i
  401df0:	e02d      	b.n	401e4e <udd_ep_set_halt+0xd6>
  401df2:	008b      	lsls	r3, r1, #2
  401df4:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
  401df8:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
		cpu_irq_restore(flags);
		return true;
	} else {
		// Stall endpoint
		udd_enable_stall_handshake(ep_index);
  401dfc:	6b18      	ldr	r0, [r3, #48]	; 0x30
  401dfe:	9000      	str	r0, [sp, #0]
  401e00:	9800      	ldr	r0, [sp, #0]
  401e02:	f040 004f 	orr.w	r0, r0, #79	; 0x4f
  401e06:	9000      	str	r0, [sp, #0]
  401e08:	9800      	ldr	r0, [sp, #0]
  401e0a:	f040 0020 	orr.w	r0, r0, #32
  401e0e:	9000      	str	r0, [sp, #0]
  401e10:	9800      	ldr	r0, [sp, #0]
  401e12:	6318      	str	r0, [r3, #48]	; 0x30
  401e14:	2300      	movs	r3, #0
  401e16:	9301      	str	r3, [sp, #4]
  401e18:	9b01      	ldr	r3, [sp, #4]
  401e1a:	2b13      	cmp	r3, #19
  401e1c:	d806      	bhi.n	401e2c <udd_ep_set_halt+0xb4>

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
  401e1e:	bf00      	nop
  401e20:	9b01      	ldr	r3, [sp, #4]
  401e22:	3301      	adds	r3, #1
  401e24:	9301      	str	r3, [sp, #4]
  401e26:	9b01      	ldr	r3, [sp, #4]
  401e28:	2b13      	cmp	r3, #19
  401e2a:	d9f8      	bls.n	401e1e <udd_ep_set_halt+0xa6>
		udd_enable_endpoint_interrupt(ep_index);
  401e2c:	2301      	movs	r3, #1
  401e2e:	408b      	lsls	r3, r1
  401e30:	490a      	ldr	r1, [pc, #40]	; (401e5c <udd_ep_set_halt+0xe4>)
  401e32:	610b      	str	r3, [r1, #16]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  401e34:	b152      	cbz	r2, 401e4c <udd_ep_set_halt+0xd4>
		cpu_irq_enable();
  401e36:	2001      	movs	r0, #1
  401e38:	4b07      	ldr	r3, [pc, #28]	; (401e58 <udd_ep_set_halt+0xe0>)
  401e3a:	7018      	strb	r0, [r3, #0]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  401e3c:	f3bf 8f5f 	dmb	sy
  401e40:	b662      	cpsie	i
  401e42:	e004      	b.n	401e4e <udd_ep_set_halt+0xd6>
	bool b_dir_in = ep & USB_EP_DIR_IN;
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
	udd_ep_job_t *ptr_job = &udd_ep_job[ep_index - 1];
	irqflags_t flags;
	if (USB_DEVICE_MAX_EP < ep_index) {
		return false;
  401e44:	2000      	movs	r0, #0
		udd_enable_stall_handshake(ep_index);
		udd_enable_endpoint_interrupt(ep_index);
		cpu_irq_restore(flags);
	}
	return true;
}
  401e46:	4770      	bx	lr
				|| ptr_job->bank > 1)) {
		// Halt until banks sent
		ptr_job->b_stall_requested = true;
		udd_enable_endpoint_interrupt(ep_index);
		cpu_irq_restore(flags);
		return true;
  401e48:	2001      	movs	r0, #1
  401e4a:	e000      	b.n	401e4e <udd_ep_set_halt+0xd6>
		// Stall endpoint
		udd_enable_stall_handshake(ep_index);
		udd_enable_endpoint_interrupt(ep_index);
		cpu_irq_restore(flags);
	}
	return true;
  401e4c:	2001      	movs	r0, #1
}
  401e4e:	b003      	add	sp, #12
  401e50:	f85d 4b04 	ldr.w	r4, [sp], #4
  401e54:	4770      	bx	lr
  401e56:	bf00      	nop
  401e58:	20000097 	.word	0x20000097
  401e5c:	40034000 	.word	0x40034000
  401e60:	20000588 	.word	0x20000588

00401e64 <udd_ep_clear_halt>:

bool udd_ep_clear_halt(udd_ep_id_t ep)
{
	udd_ep_job_t *ptr_job;

	ep &= USB_EP_ADDR_MASK;
  401e64:	f000 000f 	and.w	r0, r0, #15
	if (USB_DEVICE_MAX_EP < ep)
  401e68:	2804      	cmp	r0, #4
  401e6a:	d867      	bhi.n	401f3c <udd_ep_clear_halt+0xd8>
		return false;
	ptr_job = &udd_ep_job[ep - 1];
  401e6c:	1e41      	subs	r1, r0, #1

	ptr_job->b_stall_requested = false;
  401e6e:	eb01 0281 	add.w	r2, r1, r1, lsl #2
  401e72:	4b36      	ldr	r3, [pc, #216]	; (401f4c <udd_ep_clear_halt+0xe8>)
  401e74:	eb03 0382 	add.w	r3, r3, r2, lsl #2
  401e78:	7c5a      	ldrb	r2, [r3, #17]
  401e7a:	f36f 1245 	bfc	r2, #5, #1
  401e7e:	745a      	strb	r2, [r3, #17]
  401e80:	0082      	lsls	r2, r0, #2
  401e82:	f102 2240 	add.w	r2, r2, #1073758208	; 0x40004000
  401e86:	f502 3240 	add.w	r2, r2, #196608	; 0x30000
	if (Is_udd_endpoint_stall_requested(ep)) {
  401e8a:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401e8c:	f013 0f20 	tst.w	r3, #32
  401e90:	d056      	beq.n	401f40 <udd_ep_clear_halt+0xdc>
	return true;
}


bool udd_ep_clear_halt(udd_ep_id_t ep)
{
  401e92:	b530      	push	{r4, r5, lr}
  401e94:	b085      	sub	sp, #20
	ptr_job = &udd_ep_job[ep - 1];

	ptr_job->b_stall_requested = false;
	if (Is_udd_endpoint_stall_requested(ep)) {
		// Remove stall
		udd_disable_stall_handshake(ep);
  401e96:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401e98:	9300      	str	r3, [sp, #0]
  401e9a:	9b00      	ldr	r3, [sp, #0]
  401e9c:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  401ea0:	9300      	str	r3, [sp, #0]
  401ea2:	9b00      	ldr	r3, [sp, #0]
  401ea4:	f023 0320 	bic.w	r3, r3, #32
  401ea8:	9300      	str	r3, [sp, #0]
  401eaa:	9b00      	ldr	r3, [sp, #0]
  401eac:	6313      	str	r3, [r2, #48]	; 0x30
  401eae:	2300      	movs	r3, #0
  401eb0:	9301      	str	r3, [sp, #4]
  401eb2:	9b01      	ldr	r3, [sp, #4]
  401eb4:	2b13      	cmp	r3, #19
  401eb6:	d806      	bhi.n	401ec6 <udd_ep_clear_halt+0x62>

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
  401eb8:	bf00      	nop
  401eba:	9b01      	ldr	r3, [sp, #4]
  401ebc:	3301      	adds	r3, #1
  401ebe:	9301      	str	r3, [sp, #4]
  401ec0:	9b01      	ldr	r3, [sp, #4]
  401ec2:	2b13      	cmp	r3, #19
  401ec4:	d9f8      	bls.n	401eb8 <udd_ep_clear_halt+0x54>
		// Reset FIFO and data toggle (after stall cleared)
		udd_reset_endpoint(ep);
  401ec6:	4b22      	ldr	r3, [pc, #136]	; (401f50 <udd_ep_clear_halt+0xec>)
  401ec8:	6a9d      	ldr	r5, [r3, #40]	; 0x28
  401eca:	2401      	movs	r4, #1
  401ecc:	fa04 f000 	lsl.w	r0, r4, r0
  401ed0:	ea40 0405 	orr.w	r4, r0, r5
  401ed4:	629c      	str	r4, [r3, #40]	; 0x28
  401ed6:	6a9c      	ldr	r4, [r3, #40]	; 0x28
  401ed8:	ea24 0000 	bic.w	r0, r4, r0
  401edc:	6298      	str	r0, [r3, #40]	; 0x28
		// Clear stall status
		udd_ack_stall(ep);
  401ede:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401ee0:	9302      	str	r3, [sp, #8]
  401ee2:	9b02      	ldr	r3, [sp, #8]
  401ee4:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  401ee8:	9302      	str	r3, [sp, #8]
  401eea:	9b02      	ldr	r3, [sp, #8]
  401eec:	f023 0308 	bic.w	r3, r3, #8
  401ef0:	9302      	str	r3, [sp, #8]
  401ef2:	9b02      	ldr	r3, [sp, #8]
  401ef4:	6313      	str	r3, [r2, #48]	; 0x30
  401ef6:	2300      	movs	r3, #0
  401ef8:	9303      	str	r3, [sp, #12]
  401efa:	9b03      	ldr	r3, [sp, #12]
  401efc:	2b13      	cmp	r3, #19
  401efe:	d806      	bhi.n	401f0e <udd_ep_clear_halt+0xaa>
  401f00:	bf00      	nop
  401f02:	9b03      	ldr	r3, [sp, #12]
  401f04:	3301      	adds	r3, #1
  401f06:	9303      	str	r3, [sp, #12]
  401f08:	9b03      	ldr	r3, [sp, #12]
  401f0a:	2b13      	cmp	r3, #19
  401f0c:	d9f8      	bls.n	401f00 <udd_ep_clear_halt+0x9c>
		// If a job is register on clear halt action
		// then execute callback
		if (ptr_job->busy == true) {
  401f0e:	eb01 0381 	add.w	r3, r1, r1, lsl #2
  401f12:	4a0e      	ldr	r2, [pc, #56]	; (401f4c <udd_ep_clear_halt+0xe8>)
  401f14:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  401f18:	7c5b      	ldrb	r3, [r3, #17]
  401f1a:	f013 0f10 	tst.w	r3, #16
  401f1e:	d011      	beq.n	401f44 <udd_ep_clear_halt+0xe0>
			ptr_job->busy = false;
  401f20:	0088      	lsls	r0, r1, #2
  401f22:	1843      	adds	r3, r0, r1
  401f24:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  401f28:	7c5c      	ldrb	r4, [r3, #17]
  401f2a:	f36f 1404 	bfc	r4, #4, #1
  401f2e:	745c      	strb	r4, [r3, #17]
			ptr_job->call_nohalt();
  401f30:	4401      	add	r1, r0
  401f32:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
  401f36:	4798      	blx	r3
		}
	}
	return true;
  401f38:	2001      	movs	r0, #1
  401f3a:	e004      	b.n	401f46 <udd_ep_clear_halt+0xe2>
{
	udd_ep_job_t *ptr_job;

	ep &= USB_EP_ADDR_MASK;
	if (USB_DEVICE_MAX_EP < ep)
		return false;
  401f3c:	2000      	movs	r0, #0
			ptr_job->busy = false;
			ptr_job->call_nohalt();
		}
	}
	return true;
}
  401f3e:	4770      	bx	lr
		if (ptr_job->busy == true) {
			ptr_job->busy = false;
			ptr_job->call_nohalt();
		}
	}
	return true;
  401f40:	2001      	movs	r0, #1
  401f42:	4770      	bx	lr
  401f44:	2001      	movs	r0, #1
}
  401f46:	b005      	add	sp, #20
  401f48:	bd30      	pop	{r4, r5, pc}
  401f4a:	bf00      	nop
  401f4c:	20000588 	.word	0x20000588
  401f50:	40034000 	.word	0x40034000

00401f54 <udd_ep_run>:


bool udd_ep_run(udd_ep_id_t ep, bool b_shortpacket,
		uint8_t * buf, iram_size_t buf_size,
		udd_callback_trans_t callback)
{
  401f54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	udd_ep_job_t *ptr_job;
	irqflags_t flags;
	bool b_dir_in = ep & USB_EP_DIR_IN;

	ep &= USB_EP_ADDR_MASK;
  401f56:	f000 050f 	and.w	r5, r0, #15
	if (USB_DEVICE_MAX_EP < ep) {
  401f5a:	2d04      	cmp	r5, #4
  401f5c:	f200 809f 	bhi.w	40209e <udd_ep_run+0x14a>
  401f60:	00ac      	lsls	r4, r5, #2
  401f62:	f104 2440 	add.w	r4, r4, #1073758208	; 0x40004000
  401f66:	f504 3440 	add.w	r4, r4, #196608	; 0x30000
		return false;
	}
	// Get job about endpoint
	ptr_job = &udd_ep_job[ep - 1];

	if ((!Is_udd_endpoint_enabled(ep))
  401f6a:	6b26      	ldr	r6, [r4, #48]	; 0x30
  401f6c:	f416 4f00 	tst.w	r6, #32768	; 0x8000
  401f70:	f000 8097 	beq.w	4020a2 <udd_ep_run+0x14e>
	ep &= USB_EP_ADDR_MASK;
	if (USB_DEVICE_MAX_EP < ep) {
		return false;
	}
	// Get job about endpoint
	ptr_job = &udd_ep_job[ep - 1];
  401f74:	1e6e      	subs	r6, r5, #1

	if ((!Is_udd_endpoint_enabled(ep))
			|| ptr_job->b_stall_requested
  401f76:	eb06 0e86 	add.w	lr, r6, r6, lsl #2
  401f7a:	4f4f      	ldr	r7, [pc, #316]	; (4020b8 <udd_ep_run+0x164>)
  401f7c:	eb07 078e 	add.w	r7, r7, lr, lsl #2
  401f80:	7c7f      	ldrb	r7, [r7, #17]
  401f82:	f017 0f20 	tst.w	r7, #32
  401f86:	f040 808e 	bne.w	4020a6 <udd_ep_run+0x152>
			|| Is_udd_endpoint_stall_requested(ep)) {
  401f8a:	6b27      	ldr	r7, [r4, #48]	; 0x30
  401f8c:	f017 0f20 	tst.w	r7, #32
  401f90:	f040 808b 	bne.w	4020aa <udd_ep_run+0x156>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  401f94:	f3ef 8710 	mrs	r7, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
  401f98:	fab7 f787 	clz	r7, r7
  401f9c:	097f      	lsrs	r7, r7, #5
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
  401f9e:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  401fa0:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  401fa4:	f04f 0c00 	mov.w	ip, #0
  401fa8:	f8df e110 	ldr.w	lr, [pc, #272]	; 4020bc <udd_ep_run+0x168>
  401fac:	f88e c000 	strb.w	ip, [lr]
		return false; // Endpoint is halted
	}

	flags = cpu_irq_save();
	if (ptr_job->busy == true) {
  401fb0:	eb06 0e86 	add.w	lr, r6, r6, lsl #2
  401fb4:	f8df c100 	ldr.w	ip, [pc, #256]	; 4020b8 <udd_ep_run+0x164>
  401fb8:	eb0c 0e8e 	add.w	lr, ip, lr, lsl #2
  401fbc:	f89e e011 	ldrb.w	lr, [lr, #17]
  401fc0:	f01e 0f10 	tst.w	lr, #16
  401fc4:	d009      	beq.n	401fda <udd_ep_run+0x86>
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  401fc6:	2f00      	cmp	r7, #0
  401fc8:	d071      	beq.n	4020ae <udd_ep_run+0x15a>
		cpu_irq_enable();
  401fca:	2201      	movs	r2, #1
  401fcc:	4b3b      	ldr	r3, [pc, #236]	; (4020bc <udd_ep_run+0x168>)
  401fce:	701a      	strb	r2, [r3, #0]
  401fd0:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
  401fd4:	b662      	cpsie	i
		cpu_irq_restore(flags);
		return false; // Job already on going
  401fd6:	2000      	movs	r0, #0
  401fd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	}
	ptr_job->busy = true;
  401fda:	eb06 0e86 	add.w	lr, r6, r6, lsl #2
  401fde:	f8df c0d8 	ldr.w	ip, [pc, #216]	; 4020b8 <udd_ep_run+0x164>
  401fe2:	eb0c 0e8e 	add.w	lr, ip, lr, lsl #2
  401fe6:	f89e c011 	ldrb.w	ip, [lr, #17]
  401fea:	f04c 0c10 	orr.w	ip, ip, #16
  401fee:	f88e c011 	strb.w	ip, [lr, #17]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  401ff2:	b13f      	cbz	r7, 402004 <udd_ep_run+0xb0>
		cpu_irq_enable();
  401ff4:	f04f 0e01 	mov.w	lr, #1
  401ff8:	4f30      	ldr	r7, [pc, #192]	; (4020bc <udd_ep_run+0x168>)
  401ffa:	f887 e000 	strb.w	lr, [r7]
  401ffe:	f3bf 8f5f 	dmb	sy
  402002:	b662      	cpsie	i
	cpu_irq_restore(flags);

	// No job running. Let's setup a new one.
	ptr_job->buf = buf;
  402004:	f8df c0b0 	ldr.w	ip, [pc, #176]	; 4020b8 <udd_ep_run+0x164>
  402008:	eb06 0786 	add.w	r7, r6, r6, lsl #2
  40200c:	00bf      	lsls	r7, r7, #2
  40200e:	eb0c 0e07 	add.w	lr, ip, r7
  402012:	f8ce 2004 	str.w	r2, [lr, #4]
	ptr_job->buf_size = buf_size;
  402016:	f10e 0208 	add.w	r2, lr, #8
  40201a:	f8ce 3008 	str.w	r3, [lr, #8]
	ptr_job->buf_cnt = 0;
  40201e:	f04f 0e00 	mov.w	lr, #0
  402022:	f8c2 e004 	str.w	lr, [r2, #4]
	ptr_job->call_trans = callback;
  402026:	9a06      	ldr	r2, [sp, #24]
  402028:	f84c 2007 	str.w	r2, [ip, r7]
	ptr_job->b_shortpacket = b_shortpacket || (buf_size == 0);
  40202c:	b919      	cbnz	r1, 402036 <udd_ep_run+0xe2>
  40202e:	fab3 f383 	clz	r3, r3
  402032:	095b      	lsrs	r3, r3, #5
  402034:	e000      	b.n	402038 <udd_ep_run+0xe4>
  402036:	2301      	movs	r3, #1
  402038:	491f      	ldr	r1, [pc, #124]	; (4020b8 <udd_ep_run+0x164>)
  40203a:	00b7      	lsls	r7, r6, #2
  40203c:	19ba      	adds	r2, r7, r6
  40203e:	eb01 0282 	add.w	r2, r1, r2, lsl #2
  402042:	7c52      	ldrb	r2, [r2, #17]
  402044:	f363 1286 	bfi	r2, r3, #6, #1
	ptr_job->b_buf_end = false;
  402048:	443e      	add	r6, r7
  40204a:	eb01 0686 	add.w	r6, r1, r6, lsl #2
  40204e:	4613      	mov	r3, r2
  402050:	f36f 13c7 	bfc	r3, #7, #1
  402054:	7473      	strb	r3, [r6, #17]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  402056:	f3ef 8610 	mrs	r6, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
  40205a:	b672      	cpsid	i
  40205c:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
  402060:	2200      	movs	r2, #0
  402062:	4b16      	ldr	r3, [pc, #88]	; (4020bc <udd_ep_run+0x168>)
  402064:	701a      	strb	r2, [r3, #0]

	flags = cpu_irq_save();
	udd_enable_endpoint_interrupt(ep);
  402066:	2301      	movs	r3, #1
  402068:	40ab      	lsls	r3, r5
  40206a:	4a15      	ldr	r2, [pc, #84]	; (4020c0 <udd_ep_run+0x16c>)
  40206c:	6113      	str	r3, [r2, #16]
	// Request first transfer
	if (b_dir_in) {
  40206e:	f010 0f80 	tst.w	r0, #128	; 0x80
  402072:	d00c      	beq.n	40208e <udd_ep_run+0x13a>
		if (Is_udd_in_pending(ep)) {
  402074:	6b23      	ldr	r3, [r4, #48]	; 0x30
  402076:	f013 0f11 	tst.w	r3, #17
  40207a:	d108      	bne.n	40208e <udd_ep_run+0x13a>
			// Append more data (handled in interrupt service)
		} else {
			// Start new, try to fill 1~2 banks before handling status
			if (udd_ep_in_sent(ep, true)) {
  40207c:	4628      	mov	r0, r5
  40207e:	2101      	movs	r1, #1
  402080:	4b10      	ldr	r3, [pc, #64]	; (4020c4 <udd_ep_run+0x170>)
  402082:	4798      	blx	r3
  402084:	b118      	cbz	r0, 40208e <udd_ep_run+0x13a>
				// Over one bank
				udd_ep_in_sent(ep, false);
  402086:	4628      	mov	r0, r5
  402088:	2100      	movs	r1, #0
  40208a:	4b0e      	ldr	r3, [pc, #56]	; (4020c4 <udd_ep_run+0x170>)
  40208c:	4798      	blx	r3
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  40208e:	b986      	cbnz	r6, 4020b2 <udd_ep_run+0x15e>
		cpu_irq_enable();
  402090:	2001      	movs	r0, #1
  402092:	4b0a      	ldr	r3, [pc, #40]	; (4020bc <udd_ep_run+0x168>)
  402094:	7018      	strb	r0, [r3, #0]
  402096:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
  40209a:	b662      	cpsie	i
  40209c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	irqflags_t flags;
	bool b_dir_in = ep & USB_EP_DIR_IN;

	ep &= USB_EP_ADDR_MASK;
	if (USB_DEVICE_MAX_EP < ep) {
		return false;
  40209e:	2000      	movs	r0, #0
  4020a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ptr_job = &udd_ep_job[ep - 1];

	if ((!Is_udd_endpoint_enabled(ep))
			|| ptr_job->b_stall_requested
			|| Is_udd_endpoint_stall_requested(ep)) {
		return false; // Endpoint is halted
  4020a2:	2000      	movs	r0, #0
  4020a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4020a6:	2000      	movs	r0, #0
  4020a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4020aa:	2000      	movs	r0, #0
  4020ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	}

	flags = cpu_irq_save();
	if (ptr_job->busy == true) {
		cpu_irq_restore(flags);
		return false; // Job already on going
  4020ae:	2000      	movs	r0, #0
  4020b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	} else {
		// Waiting for OUT received interrupt
	}
	cpu_irq_restore(flags);

	return true;
  4020b2:	2001      	movs	r0, #1
}
  4020b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4020b6:	bf00      	nop
  4020b8:	20000588 	.word	0x20000588
  4020bc:	20000097 	.word	0x20000097
  4020c0:	40034000 	.word	0x40034000
  4020c4:	00400db1 	.word	0x00400db1

004020c8 <udd_ep_abort>:


void udd_ep_abort(udd_ep_id_t ep)
{
  4020c8:	b5f0      	push	{r4, r5, r6, r7, lr}
  4020ca:	b089      	sub	sp, #36	; 0x24
	bool b_dir_in = ep & USB_EP_DIR_IN;
	irqflags_t flags;

	ep &= USB_EP_ADDR_MASK;
  4020cc:	f000 040f 	and.w	r4, r0, #15
	if (USB_DEVICE_MAX_EP < ep)
  4020d0:	2c04      	cmp	r4, #4
  4020d2:	f200 80ba 	bhi.w	40224a <udd_ep_abort+0x182>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  4020d6:	f3ef 8310 	mrs	r3, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
  4020da:	b672      	cpsid	i
  4020dc:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
  4020e0:	2100      	movs	r1, #0
  4020e2:	4a5b      	ldr	r2, [pc, #364]	; (402250 <udd_ep_abort+0x188>)
  4020e4:	7011      	strb	r1, [r2, #0]
		return;

	// Disable interrupts
	flags = cpu_irq_save();
	udd_disable_endpoint_interrupt(ep);
  4020e6:	2501      	movs	r5, #1
  4020e8:	40a5      	lsls	r5, r4
  4020ea:	4a5a      	ldr	r2, [pc, #360]	; (402254 <udd_ep_abort+0x18c>)
  4020ec:	6155      	str	r5, [r2, #20]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  4020ee:	b92b      	cbnz	r3, 4020fc <udd_ep_abort+0x34>
		cpu_irq_enable();
  4020f0:	2201      	movs	r2, #1
  4020f2:	4b57      	ldr	r3, [pc, #348]	; (402250 <udd_ep_abort+0x188>)
  4020f4:	701a      	strb	r2, [r3, #0]
  4020f6:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
  4020fa:	b662      	cpsie	i
	cpu_irq_restore(flags);
	// Clear pending statuses
	if (b_dir_in) {
  4020fc:	f010 0f80 	tst.w	r0, #128	; 0x80
  402100:	d10a      	bne.n	402118 <udd_ep_abort+0x50>
  402102:	00a6      	lsls	r6, r4, #2
  402104:	f106 2640 	add.w	r6, r6, #1073758208	; 0x40004000
  402108:	f506 3640 	add.w	r6, r6, #196608	; 0x30000
		udd_ack_in_sent(ep);
		// Reset number of buffered banks
		udd_ep_job[ep - 1].bank = 0;
	} else {
		// Clear all pending banks statuses
		while(Is_udd_any_bank_received(ep)) {
  40210c:	6b33      	ldr	r3, [r6, #48]	; 0x30
  40210e:	f013 0f42 	tst.w	r3, #66	; 0x42
  402112:	f040 8081 	bne.w	402218 <udd_ep_abort+0x150>
  402116:	e086      	b.n	402226 <udd_ep_abort+0x15e>
  402118:	00a2      	lsls	r2, r4, #2
  40211a:	f102 2240 	add.w	r2, r2, #1073758208	; 0x40004000
  40211e:	f502 3240 	add.w	r2, r2, #196608	; 0x30000
	udd_disable_endpoint_interrupt(ep);
	cpu_irq_restore(flags);
	// Clear pending statuses
	if (b_dir_in) {
		// Kill banks
		if (Is_udd_transmit_ready(ep)) {
  402122:	6b13      	ldr	r3, [r2, #48]	; 0x30
  402124:	f013 0f10 	tst.w	r3, #16
  402128:	d053      	beq.n	4021d2 <udd_ep_abort+0x10a>
			udd_kill_data_in_fifo(ep,
  40212a:	2c00      	cmp	r4, #0
  40212c:	d039      	beq.n	4021a2 <udd_ep_abort+0xda>
  40212e:	2c03      	cmp	r4, #3
  402130:	d037      	beq.n	4021a2 <udd_ep_abort+0xda>
  402132:	6b13      	ldr	r3, [r2, #48]	; 0x30
  402134:	9300      	str	r3, [sp, #0]
  402136:	9b00      	ldr	r3, [sp, #0]
  402138:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  40213c:	9300      	str	r3, [sp, #0]
  40213e:	9b00      	ldr	r3, [sp, #0]
  402140:	f023 0310 	bic.w	r3, r3, #16
  402144:	9300      	str	r3, [sp, #0]
  402146:	9b00      	ldr	r3, [sp, #0]
  402148:	6313      	str	r3, [r2, #48]	; 0x30
  40214a:	2300      	movs	r3, #0
  40214c:	9301      	str	r3, [sp, #4]
  40214e:	9b01      	ldr	r3, [sp, #4]
  402150:	2b13      	cmp	r3, #19
  402152:	d806      	bhi.n	402162 <udd_ep_abort+0x9a>

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
  402154:	bf00      	nop
  402156:	9b01      	ldr	r3, [sp, #4]
  402158:	3301      	adds	r3, #1
  40215a:	9301      	str	r3, [sp, #4]
  40215c:	9b01      	ldr	r3, [sp, #4]
  40215e:	2b13      	cmp	r3, #19
  402160:	d9f8      	bls.n	402154 <udd_ep_abort+0x8c>
  402162:	6b13      	ldr	r3, [r2, #48]	; 0x30
  402164:	f013 0f10 	tst.w	r3, #16
  402168:	d1fb      	bne.n	402162 <udd_ep_abort+0x9a>
  40216a:	6b13      	ldr	r3, [r2, #48]	; 0x30
  40216c:	9302      	str	r3, [sp, #8]
  40216e:	9b02      	ldr	r3, [sp, #8]
  402170:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  402174:	9302      	str	r3, [sp, #8]
  402176:	9b02      	ldr	r3, [sp, #8]
  402178:	f043 0310 	orr.w	r3, r3, #16
  40217c:	9302      	str	r3, [sp, #8]
  40217e:	9b02      	ldr	r3, [sp, #8]
  402180:	6313      	str	r3, [r2, #48]	; 0x30
  402182:	2300      	movs	r3, #0
  402184:	9303      	str	r3, [sp, #12]
  402186:	9b03      	ldr	r3, [sp, #12]
  402188:	2b13      	cmp	r3, #19
  40218a:	d806      	bhi.n	40219a <udd_ep_abort+0xd2>
  40218c:	bf00      	nop
  40218e:	9b03      	ldr	r3, [sp, #12]
  402190:	3301      	adds	r3, #1
  402192:	9303      	str	r3, [sp, #12]
  402194:	9b03      	ldr	r3, [sp, #12]
  402196:	2b13      	cmp	r3, #19
  402198:	d9f8      	bls.n	40218c <udd_ep_abort+0xc4>
  40219a:	6b13      	ldr	r3, [r2, #48]	; 0x30
  40219c:	f013 0f10 	tst.w	r3, #16
  4021a0:	d0fb      	beq.n	40219a <udd_ep_abort+0xd2>
  4021a2:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4021a4:	9304      	str	r3, [sp, #16]
  4021a6:	9b04      	ldr	r3, [sp, #16]
  4021a8:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  4021ac:	9304      	str	r3, [sp, #16]
  4021ae:	9b04      	ldr	r3, [sp, #16]
  4021b0:	f023 0310 	bic.w	r3, r3, #16
  4021b4:	9304      	str	r3, [sp, #16]
  4021b6:	9b04      	ldr	r3, [sp, #16]
  4021b8:	6313      	str	r3, [r2, #48]	; 0x30
  4021ba:	2300      	movs	r3, #0
  4021bc:	9305      	str	r3, [sp, #20]
  4021be:	9b05      	ldr	r3, [sp, #20]
  4021c0:	2b13      	cmp	r3, #19
  4021c2:	d806      	bhi.n	4021d2 <udd_ep_abort+0x10a>
  4021c4:	bf00      	nop
  4021c6:	9b05      	ldr	r3, [sp, #20]
  4021c8:	3301      	adds	r3, #1
  4021ca:	9305      	str	r3, [sp, #20]
  4021cc:	9b05      	ldr	r3, [sp, #20]
  4021ce:	2b13      	cmp	r3, #19
  4021d0:	d9f8      	bls.n	4021c4 <udd_ep_abort+0xfc>
					udd_get_endpoint_bank_max_nbr(ep)>1);
		}
		udd_ack_in_sent(ep);
  4021d2:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4021d4:	9306      	str	r3, [sp, #24]
  4021d6:	9b06      	ldr	r3, [sp, #24]
  4021d8:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  4021dc:	9306      	str	r3, [sp, #24]
  4021de:	9b06      	ldr	r3, [sp, #24]
  4021e0:	f023 0301 	bic.w	r3, r3, #1
  4021e4:	9306      	str	r3, [sp, #24]
  4021e6:	9b06      	ldr	r3, [sp, #24]
  4021e8:	6313      	str	r3, [r2, #48]	; 0x30
  4021ea:	2300      	movs	r3, #0
  4021ec:	9307      	str	r3, [sp, #28]
  4021ee:	9b07      	ldr	r3, [sp, #28]
  4021f0:	2b13      	cmp	r3, #19
  4021f2:	d806      	bhi.n	402202 <udd_ep_abort+0x13a>
  4021f4:	bf00      	nop
  4021f6:	9b07      	ldr	r3, [sp, #28]
  4021f8:	3301      	adds	r3, #1
  4021fa:	9307      	str	r3, [sp, #28]
  4021fc:	9b07      	ldr	r3, [sp, #28]
  4021fe:	2b13      	cmp	r3, #19
  402200:	d9f8      	bls.n	4021f4 <udd_ep_abort+0x12c>
		// Reset number of buffered banks
		udd_ep_job[ep - 1].bank = 0;
  402202:	1e63      	subs	r3, r4, #1
  402204:	eb03 0283 	add.w	r2, r3, r3, lsl #2
  402208:	4b13      	ldr	r3, [pc, #76]	; (402258 <udd_ep_abort+0x190>)
  40220a:	eb03 0382 	add.w	r3, r3, r2, lsl #2
  40220e:	7c5a      	ldrb	r2, [r3, #17]
  402210:	f36f 0283 	bfc	r2, #2, #2
  402214:	745a      	strb	r2, [r3, #17]
  402216:	e006      	b.n	402226 <udd_ep_abort+0x15e>
	} else {
		// Clear all pending banks statuses
		while(Is_udd_any_bank_received(ep)) {
			udd_ep_ack_out_received(ep);
  402218:	4f10      	ldr	r7, [pc, #64]	; (40225c <udd_ep_abort+0x194>)
  40221a:	4620      	mov	r0, r4
  40221c:	47b8      	blx	r7
		udd_ack_in_sent(ep);
		// Reset number of buffered banks
		udd_ep_job[ep - 1].bank = 0;
	} else {
		// Clear all pending banks statuses
		while(Is_udd_any_bank_received(ep)) {
  40221e:	6b33      	ldr	r3, [r6, #48]	; 0x30
  402220:	f013 0f42 	tst.w	r3, #66	; 0x42
  402224:	d1f9      	bne.n	40221a <udd_ep_abort+0x152>
			udd_ep_ack_out_received(ep);
		}
	}
	// Reset FIFO and data toggle
	udd_reset_endpoint(ep);
  402226:	4b0b      	ldr	r3, [pc, #44]	; (402254 <udd_ep_abort+0x18c>)
  402228:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  40222a:	432a      	orrs	r2, r5
  40222c:	629a      	str	r2, [r3, #40]	; 0x28
  40222e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  402230:	ea22 0505 	bic.w	r5, r2, r5
  402234:	629d      	str	r5, [r3, #40]	; 0x28
static void udd_ep_abort_job(udd_ep_id_t ep)
{
	ep &= USB_EP_ADDR_MASK;

	// Abort job on endpoint
	udd_ep_finish_job(&udd_ep_job[ep - 1], UDD_EP_TRANSFER_ABORT, ep);
  402236:	1e60      	subs	r0, r4, #1
  402238:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  40223c:	4b06      	ldr	r3, [pc, #24]	; (402258 <udd_ep_abort+0x190>)
  40223e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  402242:	2101      	movs	r1, #1
  402244:	4622      	mov	r2, r4
  402246:	4b06      	ldr	r3, [pc, #24]	; (402260 <udd_ep_abort+0x198>)
  402248:	4798      	blx	r3
	}
	// Reset FIFO and data toggle
	udd_reset_endpoint(ep);
	// Abort job
	udd_ep_abort_job(ep);
}
  40224a:	b009      	add	sp, #36	; 0x24
  40224c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40224e:	bf00      	nop
  402250:	20000097 	.word	0x20000097
  402254:	40034000 	.word	0x40034000
  402258:	20000588 	.word	0x20000588
  40225c:	00400cbd 	.word	0x00400cbd
  402260:	00400c7d 	.word	0x00400c7d

00402264 <sysclk_enable_usb>:
 *
 * \param pll_id Source of the USB clock.
 * \param div Actual clock divisor. Must be superior to 0.
 */
void sysclk_enable_usb(void)
{
  402264:	b510      	push	{r4, lr}
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  402266:	2000      	movs	r0, #0
  402268:	213e      	movs	r1, #62	; 0x3e
  40226a:	4b0a      	ldr	r3, [pc, #40]	; (402294 <sysclk_enable_usb+0x30>)
  40226c:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  40226e:	4c0a      	ldr	r4, [pc, #40]	; (402298 <sysclk_enable_usb+0x34>)
  402270:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  402272:	2800      	cmp	r0, #0
  402274:	d0fc      	beq.n	402270 <sysclk_enable_usb+0xc>

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
	} else {
		pmc_disable_pllbck();
  402276:	4b09      	ldr	r3, [pc, #36]	; (40229c <sysclk_enable_usb+0x38>)
  402278:	4798      	blx	r3
		PMC->CKGR_PLLBR = p_cfg->ctrl;
  40227a:	4a09      	ldr	r2, [pc, #36]	; (4022a0 <sysclk_enable_usb+0x3c>)
  40227c:	4b09      	ldr	r3, [pc, #36]	; (4022a4 <sysclk_enable_usb+0x40>)
  40227e:	62da      	str	r2, [r3, #44]	; 0x2c
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
	} else {
		return pmc_is_locked_pllbck();
  402280:	4c09      	ldr	r4, [pc, #36]	; (4022a8 <sysclk_enable_usb+0x44>)
  402282:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  402284:	2800      	cmp	r0, #0
  402286:	d0fc      	beq.n	402282 <sysclk_enable_usb+0x1e>

		pll_enable_source(CONFIG_PLL1_SOURCE);
		pll_config_defaults(&pllcfg, 1);
		pll_enable(&pllcfg, 1);
		pll_wait_for_lock(1);
		pmc_switch_udpck_to_pllbck(CONFIG_USBCLK_DIV - 1);
  402288:	2000      	movs	r0, #0
  40228a:	4b08      	ldr	r3, [pc, #32]	; (4022ac <sysclk_enable_usb+0x48>)
  40228c:	4798      	blx	r3
		pmc_enable_udpck();
  40228e:	4b08      	ldr	r3, [pc, #32]	; (4022b0 <sysclk_enable_usb+0x4c>)
  402290:	4798      	blx	r3
  402292:	bd10      	pop	{r4, pc}
  402294:	00402605 	.word	0x00402605
  402298:	00402659 	.word	0x00402659
  40229c:	00402689 	.word	0x00402689
  4022a0:	00023f01 	.word	0x00023f01
  4022a4:	400e0400 	.word	0x400e0400
  4022a8:	00402695 	.word	0x00402695
  4022ac:	0040274d 	.word	0x0040274d
  4022b0:	00402761 	.word	0x00402761

004022b4 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  4022b4:	b510      	push	{r4, lr}
	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  4022b6:	480e      	ldr	r0, [pc, #56]	; (4022f0 <sysclk_init+0x3c>)
  4022b8:	4b0e      	ldr	r3, [pc, #56]	; (4022f4 <sysclk_init+0x40>)
  4022ba:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  4022bc:	2000      	movs	r0, #0
  4022be:	213e      	movs	r1, #62	; 0x3e
  4022c0:	4b0d      	ldr	r3, [pc, #52]	; (4022f8 <sysclk_init+0x44>)
  4022c2:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  4022c4:	4c0d      	ldr	r4, [pc, #52]	; (4022fc <sysclk_init+0x48>)
  4022c6:	47a0      	blx	r4
  4022c8:	2800      	cmp	r0, #0
  4022ca:	d0fc      	beq.n	4022c6 <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  4022cc:	4b0c      	ldr	r3, [pc, #48]	; (402300 <sysclk_init+0x4c>)
  4022ce:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  4022d0:	4a0c      	ldr	r2, [pc, #48]	; (402304 <sysclk_init+0x50>)
  4022d2:	4b0d      	ldr	r3, [pc, #52]	; (402308 <sysclk_init+0x54>)
  4022d4:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
  4022d6:	4c0d      	ldr	r4, [pc, #52]	; (40230c <sysclk_init+0x58>)
  4022d8:	47a0      	blx	r4
  4022da:	2800      	cmp	r0, #0
  4022dc:	d0fc      	beq.n	4022d8 <sysclk_init+0x24>

		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  4022de:	2000      	movs	r0, #0
  4022e0:	4b0b      	ldr	r3, [pc, #44]	; (402310 <sysclk_init+0x5c>)
  4022e2:	4798      	blx	r3
		pmc_switch_mck_to_pllbck(CONFIG_SYSCLK_PRES);
	}
#endif

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  4022e4:	4b0b      	ldr	r3, [pc, #44]	; (402314 <sysclk_init+0x60>)
  4022e6:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  4022e8:	480b      	ldr	r0, [pc, #44]	; (402318 <sysclk_init+0x64>)
  4022ea:	4b02      	ldr	r3, [pc, #8]	; (4022f4 <sysclk_init+0x40>)
  4022ec:	4798      	blx	r3
  4022ee:	bd10      	pop	{r4, pc}
  4022f0:	07270e00 	.word	0x07270e00
  4022f4:	004029c5 	.word	0x004029c5
  4022f8:	00402605 	.word	0x00402605
  4022fc:	00402659 	.word	0x00402659
  402300:	00402669 	.word	0x00402669
  402304:	20053f01 	.word	0x20053f01
  402308:	400e0400 	.word	0x400e0400
  40230c:	00402679 	.word	0x00402679
  402310:	0040259d 	.word	0x0040259d
  402314:	004028b1 	.word	0x004028b1
  402318:	05b8d800 	.word	0x05b8d800

0040231c <dacc_reset>:
 *
 * \param p_dacc Pointer to a DACC instance. 
 */
void dacc_reset(Dacc *p_dacc)
{
	p_dacc->DACC_CR = DACC_CR_SWRST;
  40231c:	2301      	movs	r3, #1
  40231e:	6003      	str	r3, [r0, #0]
  402320:	4770      	bx	lr
  402322:	bf00      	nop

00402324 <dacc_set_transfer_mode>:
 *
 * \return \ref DACC_RC_OK for OK.
 */
uint32_t dacc_set_transfer_mode(Dacc *p_dacc, uint32_t ul_mode)
{
	if (ul_mode) {
  402324:	b141      	cbz	r1, 402338 <dacc_set_transfer_mode+0x14>
#if (SAM3N) || (SAM4L) || (SAM4N)
		p_dacc->DACC_MR |= DACC_MR_WORD;
#elif (SAM4S) || (SAM4E)
		p_dacc->DACC_MR |= DACC_MR_ONE;
  402326:	6843      	ldr	r3, [r0, #4]
  402328:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  40232c:	6043      	str	r3, [r0, #4]
		p_dacc->DACC_MR |= DACC_MR_WORD_WORD;
  40232e:	6843      	ldr	r3, [r0, #4]
  402330:	f043 0310 	orr.w	r3, r3, #16
  402334:	6043      	str	r3, [r0, #4]
  402336:	e007      	b.n	402348 <dacc_set_transfer_mode+0x24>
#endif
	} else {
#if (SAM3N) || (SAM4L) || (SAM4N)
		p_dacc->DACC_MR &= (~DACC_MR_WORD);
#elif (SAM4S) || (SAM4E)
		p_dacc->DACC_MR |= DACC_MR_ONE;
  402338:	6843      	ldr	r3, [r0, #4]
  40233a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  40233e:	6043      	str	r3, [r0, #4]
		p_dacc->DACC_MR &= (~DACC_MR_WORD_WORD);
  402340:	6843      	ldr	r3, [r0, #4]
  402342:	f023 0310 	bic.w	r3, r3, #16
  402346:	6043      	str	r3, [r0, #4]
#else
		p_dacc->DACC_MR &= (~DACC_MR_WORD_WORD);
#endif
	}
	return DACC_RC_OK;
}
  402348:	2000      	movs	r0, #0
  40234a:	4770      	bx	lr

0040234c <dacc_get_interrupt_status>:
 *
 * \return The interrupt status.
 */
uint32_t dacc_get_interrupt_status(Dacc *p_dacc)
{
	return p_dacc->DACC_ISR;
  40234c:	6b00      	ldr	r0, [r0, #48]	; 0x30
}
  40234e:	4770      	bx	lr

00402350 <dacc_write_conversion_data>:
 * \param p_dacc Pointer to a DACC instance. 
 * \param ul_data The data to be transferred to analog value.
 */
void dacc_write_conversion_data(Dacc *p_dacc, uint32_t ul_data)
{
	p_dacc->DACC_CDR = ul_data;
  402350:	6201      	str	r1, [r0, #32]
  402352:	4770      	bx	lr

00402354 <dacc_set_channel_selection>:
 *
 * \return \ref DACC_RC_OK if successful.
 */
uint32_t dacc_set_channel_selection(Dacc *p_dacc, uint32_t ul_channel)
{
	uint32_t mr = p_dacc->DACC_MR & (~DACC_MR_USER_SEL_Msk);
  402354:	6843      	ldr	r3, [r0, #4]
	if (ul_channel > MAX_CH_NB) {
  402356:	2901      	cmp	r1, #1
  402358:	d806      	bhi.n	402368 <dacc_set_channel_selection+0x14>
		return DACC_RC_INVALID_PARAM;
	}
	mr &= ~(DACC_MR_TAG);
  40235a:	f423 1398 	bic.w	r3, r3, #1245184	; 0x130000
	mr |= ul_channel << DACC_MR_USER_SEL_Pos;
  40235e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
	p_dacc->DACC_MR = mr;
  402362:	6041      	str	r1, [r0, #4]

	return DACC_RC_OK;
  402364:	2000      	movs	r0, #0
  402366:	4770      	bx	lr
 */
uint32_t dacc_set_channel_selection(Dacc *p_dacc, uint32_t ul_channel)
{
	uint32_t mr = p_dacc->DACC_MR & (~DACC_MR_USER_SEL_Msk);
	if (ul_channel > MAX_CH_NB) {
		return DACC_RC_INVALID_PARAM;
  402368:	2001      	movs	r0, #1
	mr &= ~(DACC_MR_TAG);
	mr |= ul_channel << DACC_MR_USER_SEL_Pos;
	p_dacc->DACC_MR = mr;

	return DACC_RC_OK;
}
  40236a:	4770      	bx	lr

0040236c <dacc_enable_channel>:
 *
 * \return \ref DACC_RC_OK for OK.
 */
uint32_t dacc_enable_channel(Dacc *p_dacc, uint32_t ul_channel)
{
	if (ul_channel > MAX_CH_NB)
  40236c:	2901      	cmp	r1, #1
  40236e:	d804      	bhi.n	40237a <dacc_enable_channel+0xe>
		return DACC_RC_INVALID_PARAM;

	p_dacc->DACC_CHER = DACC_CHER_CH0 << ul_channel;
  402370:	2301      	movs	r3, #1
  402372:	408b      	lsls	r3, r1
  402374:	6103      	str	r3, [r0, #16]
	return DACC_RC_OK;
  402376:	2000      	movs	r0, #0
  402378:	4770      	bx	lr
 * \return \ref DACC_RC_OK for OK.
 */
uint32_t dacc_enable_channel(Dacc *p_dacc, uint32_t ul_channel)
{
	if (ul_channel > MAX_CH_NB)
		return DACC_RC_INVALID_PARAM;
  40237a:	2001      	movs	r0, #1

	p_dacc->DACC_CHER = DACC_CHER_CH0 << ul_channel;
	return DACC_RC_OK;
}
  40237c:	4770      	bx	lr
  40237e:	bf00      	nop

00402380 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  402380:	6442      	str	r2, [r0, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  402382:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  402386:	d02f      	beq.n	4023e8 <pio_set_peripheral+0x68>
  402388:	d807      	bhi.n	40239a <pio_set_peripheral+0x1a>
  40238a:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  40238e:	d014      	beq.n	4023ba <pio_set_peripheral+0x3a>
  402390:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  402394:	d01e      	beq.n	4023d4 <pio_set_peripheral+0x54>
  402396:	b939      	cbnz	r1, 4023a8 <pio_set_peripheral+0x28>
  402398:	4770      	bx	lr
  40239a:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  40239e:	d037      	beq.n	402410 <pio_set_peripheral+0x90>
  4023a0:	d804      	bhi.n	4023ac <pio_set_peripheral+0x2c>
  4023a2:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  4023a6:	d029      	beq.n	4023fc <pio_set_peripheral+0x7c>
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  4023a8:	6042      	str	r2, [r0, #4]
  4023aa:	4770      	bx	lr

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  4023ac:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  4023b0:	d02e      	beq.n	402410 <pio_set_peripheral+0x90>
  4023b2:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  4023b6:	d02b      	beq.n	402410 <pio_set_peripheral+0x90>
  4023b8:	e7f6      	b.n	4023a8 <pio_set_peripheral+0x28>
 * \param ul_type PIO type.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set_peripheral(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
  4023ba:	b410      	push	{r4}
	p_pio->PIO_IDR = ul_mask;

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABCDSR[0];
  4023bc:	6f01      	ldr	r1, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  4023be:	6f04      	ldr	r4, [r0, #112]	; 0x70
  4023c0:	43d3      	mvns	r3, r2
  4023c2:	4021      	ands	r1, r4
  4023c4:	4019      	ands	r1, r3
  4023c6:	6701      	str	r1, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  4023c8:	6f41      	ldr	r1, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  4023ca:	6f44      	ldr	r4, [r0, #116]	; 0x74
  4023cc:	4021      	ands	r1, r4
  4023ce:	400b      	ands	r3, r1
  4023d0:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  4023d2:	e01a      	b.n	40240a <pio_set_peripheral+0x8a>
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  4023d4:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  4023d6:	4313      	orrs	r3, r2
  4023d8:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  4023da:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  4023dc:	6f41      	ldr	r1, [r0, #116]	; 0x74
  4023de:	400b      	ands	r3, r1
  4023e0:	ea23 0302 	bic.w	r3, r3, r2
  4023e4:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  4023e6:	e7df      	b.n	4023a8 <pio_set_peripheral+0x28>
#if (!SAMG)
	case PIO_PERIPH_C:
		ul_sr = p_pio->PIO_ABCDSR[0];
  4023e8:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  4023ea:	6f01      	ldr	r1, [r0, #112]	; 0x70
  4023ec:	400b      	ands	r3, r1
  4023ee:	ea23 0302 	bic.w	r3, r3, r2
  4023f2:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  4023f4:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  4023f6:	4313      	orrs	r3, r2
  4023f8:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  4023fa:	e7d5      	b.n	4023a8 <pio_set_peripheral+0x28>
	case PIO_PERIPH_D:
		ul_sr = p_pio->PIO_ABCDSR[0];
  4023fc:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  4023fe:	4313      	orrs	r3, r2
  402400:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  402402:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  402404:	4313      	orrs	r3, r2
  402406:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  402408:	e7ce      	b.n	4023a8 <pio_set_peripheral+0x28>
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  40240a:	6042      	str	r2, [r0, #4]
}
  40240c:	f85d 4b04 	ldr.w	r4, [sp], #4
  402410:	4770      	bx	lr
  402412:	bf00      	nop

00402414 <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  402414:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  402416:	f012 0f01 	tst.w	r2, #1
		p_pio->PIO_PUER = ul_mask;
  40241a:	bf14      	ite	ne
  40241c:	6641      	strne	r1, [r0, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  40241e:	6601      	streq	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  402420:	f012 0f0a 	tst.w	r2, #10
		p_pio->PIO_IFER = ul_mask;
  402424:	bf14      	ite	ne
  402426:	6201      	strne	r1, [r0, #32]
	} else {
		p_pio->PIO_IFDR = ul_mask;
  402428:	6241      	streq	r1, [r0, #36]	; 0x24
	}

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
  40242a:	f012 0f02 	tst.w	r2, #2
  40242e:	d002      	beq.n	402436 <pio_set_input+0x22>
		p_pio->PIO_IFSCDR = ul_mask;
  402430:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
  402434:	e004      	b.n	402440 <pio_set_input+0x2c>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
  402436:	f012 0f08 	tst.w	r2, #8
			p_pio->PIO_IFSCER = ul_mask;
  40243a:	bf18      	it	ne
  40243c:	f8c0 1084 	strne.w	r1, [r0, #132]	; 0x84
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
  402440:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
  402442:	6001      	str	r1, [r0, #0]
  402444:	4770      	bx	lr
  402446:	bf00      	nop

00402448 <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
  402448:	b410      	push	{r4}
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  40244a:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  40244c:	9c01      	ldr	r4, [sp, #4]
  40244e:	b10c      	cbz	r4, 402454 <pio_set_output+0xc>
		p_pio->PIO_PUER = ul_mask;
  402450:	6641      	str	r1, [r0, #100]	; 0x64
  402452:	e000      	b.n	402456 <pio_set_output+0xe>
	} else {
		p_pio->PIO_PUDR = ul_mask;
  402454:	6601      	str	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
  402456:	b10b      	cbz	r3, 40245c <pio_set_output+0x14>
		p_pio->PIO_MDER = ul_mask;
  402458:	6501      	str	r1, [r0, #80]	; 0x50
  40245a:	e000      	b.n	40245e <pio_set_output+0x16>
	} else {
		p_pio->PIO_MDDR = ul_mask;
  40245c:	6541      	str	r1, [r0, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
  40245e:	b10a      	cbz	r2, 402464 <pio_set_output+0x1c>
		p_pio->PIO_SODR = ul_mask;
  402460:	6301      	str	r1, [r0, #48]	; 0x30
  402462:	e000      	b.n	402466 <pio_set_output+0x1e>
	} else {
		p_pio->PIO_CODR = ul_mask;
  402464:	6341      	str	r1, [r0, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
  402466:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
  402468:	6001      	str	r1, [r0, #0]
}
  40246a:	f85d 4b04 	ldr.w	r4, [sp], #4
  40246e:	4770      	bx	lr

00402470 <pio_get_interrupt_status>:
 *
 * \return The interrupt status mask value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  402470:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  402472:	4770      	bx	lr

00402474 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  402474:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  402476:	4770      	bx	lr

00402478 <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
  402478:	b570      	push	{r4, r5, r6, lr}
  40247a:	b082      	sub	sp, #8
  40247c:	460d      	mov	r5, r1
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  40247e:	0943      	lsrs	r3, r0, #5
  402480:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  402484:	f203 7307 	addw	r3, r3, #1799	; 0x707
  402488:	025c      	lsls	r4, r3, #9
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
	Pio *p_pio = pio_get_pin_group(ul_pin);

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
  40248a:	f001 43f0 	and.w	r3, r1, #2013265920	; 0x78000000
  40248e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  402492:	d047      	beq.n	402524 <pio_configure_pin+0xac>
  402494:	d809      	bhi.n	4024aa <pio_configure_pin+0x32>
  402496:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  40249a:	d021      	beq.n	4024e0 <pio_configure_pin+0x68>
  40249c:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  4024a0:	d02f      	beq.n	402502 <pio_configure_pin+0x8a>
  4024a2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  4024a6:	d16f      	bne.n	402588 <pio_configure_pin+0x110>
  4024a8:	e009      	b.n	4024be <pio_configure_pin+0x46>
  4024aa:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  4024ae:	d055      	beq.n	40255c <pio_configure_pin+0xe4>
  4024b0:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  4024b4:	d052      	beq.n	40255c <pio_configure_pin+0xe4>
  4024b6:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  4024ba:	d044      	beq.n	402546 <pio_configure_pin+0xce>
  4024bc:	e064      	b.n	402588 <pio_configure_pin+0x110>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
  4024be:	f000 001f 	and.w	r0, r0, #31
  4024c2:	2601      	movs	r6, #1
  4024c4:	4086      	lsls	r6, r0
  4024c6:	4620      	mov	r0, r4
  4024c8:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4024cc:	4632      	mov	r2, r6
  4024ce:	4b30      	ldr	r3, [pc, #192]	; (402590 <pio_configure_pin+0x118>)
  4024d0:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  4024d2:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  4024d6:	bf14      	ite	ne
  4024d8:	6666      	strne	r6, [r4, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  4024da:	6626      	streq	r6, [r4, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  4024dc:	2001      	movs	r0, #1
  4024de:	e054      	b.n	40258a <pio_configure_pin+0x112>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
  4024e0:	f000 001f 	and.w	r0, r0, #31
  4024e4:	2601      	movs	r6, #1
  4024e6:	4086      	lsls	r6, r0
  4024e8:	4620      	mov	r0, r4
  4024ea:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  4024ee:	4632      	mov	r2, r6
  4024f0:	4b27      	ldr	r3, [pc, #156]	; (402590 <pio_configure_pin+0x118>)
  4024f2:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  4024f4:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  4024f8:	bf14      	ite	ne
  4024fa:	6666      	strne	r6, [r4, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  4024fc:	6626      	streq	r6, [r4, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  4024fe:	2001      	movs	r0, #1
  402500:	e043      	b.n	40258a <pio_configure_pin+0x112>
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	case PIO_TYPE_PIO_PERIPH_C:
		pio_set_peripheral(p_pio, PIO_PERIPH_C, (1 << (ul_pin & 0x1F)));
  402502:	f000 001f 	and.w	r0, r0, #31
  402506:	2601      	movs	r6, #1
  402508:	4086      	lsls	r6, r0
  40250a:	4620      	mov	r0, r4
  40250c:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  402510:	4632      	mov	r2, r6
  402512:	4b1f      	ldr	r3, [pc, #124]	; (402590 <pio_configure_pin+0x118>)
  402514:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  402516:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  40251a:	bf14      	ite	ne
  40251c:	6666      	strne	r6, [r4, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  40251e:	6626      	streq	r6, [r4, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  402520:	2001      	movs	r0, #1
  402522:	e032      	b.n	40258a <pio_configure_pin+0x112>
		pio_set_peripheral(p_pio, PIO_PERIPH_C, (1 << (ul_pin & 0x1F)));
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_D:
		pio_set_peripheral(p_pio, PIO_PERIPH_D, (1 << (ul_pin & 0x1F)));
  402524:	f000 001f 	and.w	r0, r0, #31
  402528:	2601      	movs	r6, #1
  40252a:	4086      	lsls	r6, r0
  40252c:	4620      	mov	r0, r4
  40252e:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  402532:	4632      	mov	r2, r6
  402534:	4b16      	ldr	r3, [pc, #88]	; (402590 <pio_configure_pin+0x118>)
  402536:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  402538:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  40253c:	bf14      	ite	ne
  40253e:	6666      	strne	r6, [r4, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  402540:	6626      	streq	r6, [r4, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  402542:	2001      	movs	r0, #1
  402544:	e021      	b.n	40258a <pio_configure_pin+0x112>
				(ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
  402546:	f000 031f 	and.w	r3, r0, #31
  40254a:	2601      	movs	r6, #1
  40254c:	4620      	mov	r0, r4
  40254e:	fa06 f103 	lsl.w	r1, r6, r3
  402552:	462a      	mov	r2, r5
  402554:	4b0f      	ldr	r3, [pc, #60]	; (402594 <pio_configure_pin+0x11c>)
  402556:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
  402558:	4630      	mov	r0, r6
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;
  40255a:	e016      	b.n	40258a <pio_configure_pin+0x112>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  40255c:	f000 031f 	and.w	r3, r0, #31
  402560:	2601      	movs	r6, #1
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
  402562:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  402566:	ea05 0106 	and.w	r1, r5, r6
  40256a:	9100      	str	r1, [sp, #0]
  40256c:	4620      	mov	r0, r4
  40256e:	fa06 f103 	lsl.w	r1, r6, r3
  402572:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
  402576:	bf14      	ite	ne
  402578:	2200      	movne	r2, #0
  40257a:	2201      	moveq	r2, #1
  40257c:	f3c5 0380 	ubfx	r3, r5, #2, #1
  402580:	4c05      	ldr	r4, [pc, #20]	; (402598 <pio_configure_pin+0x120>)
  402582:	47a0      	blx	r4

	default:
		return 0;
	}

	return 1;
  402584:	4630      	mov	r0, r6
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
  402586:	e000      	b.n	40258a <pio_configure_pin+0x112>

	default:
		return 0;
  402588:	2000      	movs	r0, #0
	}

	return 1;
}
  40258a:	b002      	add	sp, #8
  40258c:	bd70      	pop	{r4, r5, r6, pc}
  40258e:	bf00      	nop
  402590:	00402381 	.word	0x00402381
  402594:	00402415 	.word	0x00402415
  402598:	00402449 	.word	0x00402449

0040259c <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  40259c:	4a18      	ldr	r2, [pc, #96]	; (402600 <pmc_switch_mck_to_pllack+0x64>)
  40259e:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4025a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  4025a4:	4318      	orrs	r0, r3
  4025a6:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4025a8:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4025aa:	f013 0f08 	tst.w	r3, #8
  4025ae:	d003      	beq.n	4025b8 <pmc_switch_mck_to_pllack+0x1c>
  4025b0:	e009      	b.n	4025c6 <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  4025b2:	3b01      	subs	r3, #1
  4025b4:	d103      	bne.n	4025be <pmc_switch_mck_to_pllack+0x22>
  4025b6:	e01e      	b.n	4025f6 <pmc_switch_mck_to_pllack+0x5a>
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4025b8:	f44f 6300 	mov.w	r3, #2048	; 0x800
  4025bc:	4910      	ldr	r1, [pc, #64]	; (402600 <pmc_switch_mck_to_pllack+0x64>)
  4025be:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  4025c0:	f012 0f08 	tst.w	r2, #8
  4025c4:	d0f5      	beq.n	4025b2 <pmc_switch_mck_to_pllack+0x16>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  4025c6:	4a0e      	ldr	r2, [pc, #56]	; (402600 <pmc_switch_mck_to_pllack+0x64>)
  4025c8:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4025ca:	f023 0303 	bic.w	r3, r3, #3
  4025ce:	f043 0302 	orr.w	r3, r3, #2
  4025d2:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4025d4:	6e90      	ldr	r0, [r2, #104]	; 0x68
  4025d6:	f010 0008 	ands.w	r0, r0, #8
  4025da:	d004      	beq.n	4025e6 <pmc_switch_mck_to_pllack+0x4a>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
  4025dc:	2000      	movs	r0, #0
  4025de:	4770      	bx	lr
	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
  4025e0:	3b01      	subs	r3, #1
  4025e2:	d103      	bne.n	4025ec <pmc_switch_mck_to_pllack+0x50>
  4025e4:	e009      	b.n	4025fa <pmc_switch_mck_to_pllack+0x5e>
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4025e6:	f44f 6300 	mov.w	r3, #2048	; 0x800
  4025ea:	4905      	ldr	r1, [pc, #20]	; (402600 <pmc_switch_mck_to_pllack+0x64>)
  4025ec:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  4025ee:	f012 0f08 	tst.w	r2, #8
  4025f2:	d0f5      	beq.n	4025e0 <pmc_switch_mck_to_pllack+0x44>
  4025f4:	4770      	bx	lr

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
  4025f6:	2001      	movs	r0, #1
  4025f8:	4770      	bx	lr
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
  4025fa:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  4025fc:	4770      	bx	lr
  4025fe:	bf00      	nop
  402600:	400e0400 	.word	0x400e0400

00402604 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  402604:	b138      	cbz	r0, 402616 <pmc_switch_mainck_to_xtal+0x12>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  402606:	4911      	ldr	r1, [pc, #68]	; (40264c <pmc_switch_mainck_to_xtal+0x48>)
  402608:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  40260a:	4a11      	ldr	r2, [pc, #68]	; (402650 <pmc_switch_mainck_to_xtal+0x4c>)
  40260c:	401a      	ands	r2, r3
  40260e:	4b11      	ldr	r3, [pc, #68]	; (402654 <pmc_switch_mainck_to_xtal+0x50>)
  402610:	4313      	orrs	r3, r2
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  402612:	620b      	str	r3, [r1, #32]
  402614:	4770      	bx	lr
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  402616:	4a0d      	ldr	r2, [pc, #52]	; (40264c <pmc_switch_mainck_to_xtal+0x48>)
  402618:	6a13      	ldr	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  40261a:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
  40261e:	f023 0303 	bic.w	r3, r3, #3
  402622:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  402626:	f043 0301 	orr.w	r3, r3, #1
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  40262a:	0209      	lsls	r1, r1, #8
  40262c:	b289      	uxth	r1, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  40262e:	430b      	orrs	r3, r1
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  402630:	6213      	str	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  402632:	6e93      	ldr	r3, [r2, #104]	; 0x68
  402634:	f013 0f01 	tst.w	r3, #1
  402638:	d0fb      	beq.n	402632 <pmc_switch_mainck_to_xtal+0x2e>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  40263a:	4a04      	ldr	r2, [pc, #16]	; (40264c <pmc_switch_mainck_to_xtal+0x48>)
  40263c:	6a13      	ldr	r3, [r2, #32]
  40263e:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
  402642:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  402646:	6213      	str	r3, [r2, #32]
  402648:	4770      	bx	lr
  40264a:	bf00      	nop
  40264c:	400e0400 	.word	0x400e0400
  402650:	fec8fffc 	.word	0xfec8fffc
  402654:	01370002 	.word	0x01370002

00402658 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  402658:	4b02      	ldr	r3, [pc, #8]	; (402664 <pmc_osc_is_ready_mainck+0xc>)
  40265a:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  40265c:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  402660:	4770      	bx	lr
  402662:	bf00      	nop
  402664:	400e0400 	.word	0x400e0400

00402668 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  402668:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  40266c:	4b01      	ldr	r3, [pc, #4]	; (402674 <pmc_disable_pllack+0xc>)
  40266e:	629a      	str	r2, [r3, #40]	; 0x28
  402670:	4770      	bx	lr
  402672:	bf00      	nop
  402674:	400e0400 	.word	0x400e0400

00402678 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  402678:	4b02      	ldr	r3, [pc, #8]	; (402684 <pmc_is_locked_pllack+0xc>)
  40267a:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  40267c:	f000 0002 	and.w	r0, r0, #2
  402680:	4770      	bx	lr
  402682:	bf00      	nop
  402684:	400e0400 	.word	0x400e0400

00402688 <pmc_disable_pllbck>:
/**
 * \brief Disable PLLB clock.
 */
void pmc_disable_pllbck(void)
{
	PMC->CKGR_PLLBR = CKGR_PLLBR_MULB(0);
  402688:	2200      	movs	r2, #0
  40268a:	4b01      	ldr	r3, [pc, #4]	; (402690 <pmc_disable_pllbck+0x8>)
  40268c:	62da      	str	r2, [r3, #44]	; 0x2c
  40268e:	4770      	bx	lr
  402690:	400e0400 	.word	0x400e0400

00402694 <pmc_is_locked_pllbck>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllbck(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKB);
  402694:	4b02      	ldr	r3, [pc, #8]	; (4026a0 <pmc_is_locked_pllbck+0xc>)
  402696:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  402698:	f000 0004 	and.w	r0, r0, #4
  40269c:	4770      	bx	lr
  40269e:	bf00      	nop
  4026a0:	400e0400 	.word	0x400e0400

004026a4 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
  4026a4:	2822      	cmp	r0, #34	; 0x22
  4026a6:	d81e      	bhi.n	4026e6 <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
  4026a8:	281f      	cmp	r0, #31
  4026aa:	d80c      	bhi.n	4026c6 <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  4026ac:	4b11      	ldr	r3, [pc, #68]	; (4026f4 <pmc_enable_periph_clk+0x50>)
  4026ae:	699a      	ldr	r2, [r3, #24]
  4026b0:	2301      	movs	r3, #1
  4026b2:	4083      	lsls	r3, r0
  4026b4:	401a      	ands	r2, r3
  4026b6:	4293      	cmp	r3, r2
  4026b8:	d017      	beq.n	4026ea <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
  4026ba:	2301      	movs	r3, #1
  4026bc:	4083      	lsls	r3, r0
  4026be:	4a0d      	ldr	r2, [pc, #52]	; (4026f4 <pmc_enable_periph_clk+0x50>)
  4026c0:	6113      	str	r3, [r2, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  4026c2:	2000      	movs	r0, #0
  4026c4:	4770      	bx	lr
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  4026c6:	4b0b      	ldr	r3, [pc, #44]	; (4026f4 <pmc_enable_periph_clk+0x50>)
  4026c8:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
  4026cc:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  4026ce:	2301      	movs	r3, #1
  4026d0:	4083      	lsls	r3, r0
  4026d2:	401a      	ands	r2, r3
  4026d4:	4293      	cmp	r3, r2
  4026d6:	d00a      	beq.n	4026ee <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
  4026d8:	2301      	movs	r3, #1
  4026da:	4083      	lsls	r3, r0
  4026dc:	4a05      	ldr	r2, [pc, #20]	; (4026f4 <pmc_enable_periph_clk+0x50>)
  4026de:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
		}
#endif
	}

	return 0;
  4026e2:	2000      	movs	r0, #0
  4026e4:	4770      	bx	lr
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
		return 1;
  4026e6:	2001      	movs	r0, #1
  4026e8:	4770      	bx	lr
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  4026ea:	2000      	movs	r0, #0
  4026ec:	4770      	bx	lr
  4026ee:	2000      	movs	r0, #0
}
  4026f0:	4770      	bx	lr
  4026f2:	bf00      	nop
  4026f4:	400e0400 	.word	0x400e0400

004026f8 <pmc_disable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_disable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
  4026f8:	2822      	cmp	r0, #34	; 0x22
  4026fa:	d81e      	bhi.n	40273a <pmc_disable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
  4026fc:	281f      	cmp	r0, #31
  4026fe:	d80c      	bhi.n	40271a <pmc_disable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) == (1u << ul_id)) {
  402700:	4b11      	ldr	r3, [pc, #68]	; (402748 <pmc_disable_periph_clk+0x50>)
  402702:	699a      	ldr	r2, [r3, #24]
  402704:	2301      	movs	r3, #1
  402706:	4083      	lsls	r3, r0
  402708:	401a      	ands	r2, r3
  40270a:	4293      	cmp	r3, r2
  40270c:	d117      	bne.n	40273e <pmc_disable_periph_clk+0x46>
			PMC->PMC_PCDR0 = 1 << ul_id;
  40270e:	2301      	movs	r3, #1
  402710:	4083      	lsls	r3, r0
  402712:	4a0d      	ldr	r2, [pc, #52]	; (402748 <pmc_disable_periph_clk+0x50>)
  402714:	6153      	str	r3, [r2, #20]
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) == (1u << ul_id)) {
			PMC->PMC_PCDR1 = 1 << ul_id;
		}
#endif
	}
	return 0;
  402716:	2000      	movs	r0, #0
  402718:	4770      	bx	lr
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 \
		|| SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) == (1u << ul_id)) {
  40271a:	4b0b      	ldr	r3, [pc, #44]	; (402748 <pmc_disable_periph_clk+0x50>)
  40271c:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
			PMC->PMC_PCDR0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 \
		|| SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
  402720:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) == (1u << ul_id)) {
  402722:	2301      	movs	r3, #1
  402724:	4083      	lsls	r3, r0
  402726:	401a      	ands	r2, r3
  402728:	4293      	cmp	r3, r2
  40272a:	d10a      	bne.n	402742 <pmc_disable_periph_clk+0x4a>
			PMC->PMC_PCDR1 = 1 << ul_id;
  40272c:	2301      	movs	r3, #1
  40272e:	4083      	lsls	r3, r0
  402730:	4a05      	ldr	r2, [pc, #20]	; (402748 <pmc_disable_periph_clk+0x50>)
  402732:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
		}
#endif
	}
	return 0;
  402736:	2000      	movs	r0, #0
  402738:	4770      	bx	lr
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_disable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
		return 1;
  40273a:	2001      	movs	r0, #1
  40273c:	4770      	bx	lr
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) == (1u << ul_id)) {
			PMC->PMC_PCDR1 = 1 << ul_id;
		}
#endif
	}
	return 0;
  40273e:	2000      	movs	r0, #0
  402740:	4770      	bx	lr
  402742:	2000      	movs	r0, #0
}
  402744:	4770      	bx	lr
  402746:	bf00      	nop
  402748:	400e0400 	.word	0x400e0400

0040274c <pmc_switch_udpck_to_pllbck>:
 *
 * \param ul_usbdiv Clock divisor.
 */
void pmc_switch_udpck_to_pllbck(uint32_t ul_usbdiv)
{
	PMC->PMC_USB = PMC_USB_USBDIV(ul_usbdiv) | PMC_USB_USBS;
  40274c:	0200      	lsls	r0, r0, #8
  40274e:	f400 6070 	and.w	r0, r0, #3840	; 0xf00
  402752:	f040 0001 	orr.w	r0, r0, #1
  402756:	4b01      	ldr	r3, [pc, #4]	; (40275c <pmc_switch_udpck_to_pllbck+0x10>)
  402758:	6398      	str	r0, [r3, #56]	; 0x38
  40275a:	4770      	bx	lr
  40275c:	400e0400 	.word	0x400e0400

00402760 <pmc_enable_udpck>:
 * \brief Enable UDP (USB) clock.
 */
void pmc_enable_udpck(void)
{
#if (SAM3S || SAM4S || SAM4E || SAMG55)
	PMC->PMC_SCER = PMC_SCER_UDP;
  402760:	2280      	movs	r2, #128	; 0x80
  402762:	4b01      	ldr	r3, [pc, #4]	; (402768 <pmc_enable_udpck+0x8>)
  402764:	601a      	str	r2, [r3, #0]
  402766:	4770      	bx	lr
  402768:	400e0400 	.word	0x400e0400

0040276c <pmc_set_fast_startup_input>:
 * \param ul_inputs Wake up inputs to enable.
 */
void pmc_set_fast_startup_input(uint32_t ul_inputs)
{
	ul_inputs &= PMC_FAST_STARTUP_Msk;
	PMC->PMC_FSMR |= ul_inputs;
  40276c:	4a03      	ldr	r2, [pc, #12]	; (40277c <pmc_set_fast_startup_input+0x10>)
  40276e:	6f13      	ldr	r3, [r2, #112]	; 0x70
 *
 * \param ul_inputs Wake up inputs to enable.
 */
void pmc_set_fast_startup_input(uint32_t ul_inputs)
{
	ul_inputs &= PMC_FAST_STARTUP_Msk;
  402770:	f3c0 0012 	ubfx	r0, r0, #0, #19
	PMC->PMC_FSMR |= ul_inputs;
  402774:	4303      	orrs	r3, r0
  402776:	6713      	str	r3, [r2, #112]	; 0x70
  402778:	4770      	bx	lr
  40277a:	bf00      	nop
  40277c:	400e0400 	.word	0x400e0400

00402780 <pmc_is_wakeup_clocks_restored>:
	}
}

bool pmc_is_wakeup_clocks_restored(void)
{
	return !b_is_sleep_clock_used;
  402780:	4b02      	ldr	r3, [pc, #8]	; (40278c <pmc_is_wakeup_clocks_restored+0xc>)
  402782:	7818      	ldrb	r0, [r3, #0]
}
  402784:	f080 0001 	eor.w	r0, r0, #1
  402788:	4770      	bx	lr
  40278a:	bf00      	nop
  40278c:	200005dd 	.word	0x200005dd

00402790 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
  402790:	4b0b      	ldr	r3, [pc, #44]	; (4027c0 <cpu_irq_enter_critical+0x30>)
  402792:	681b      	ldr	r3, [r3, #0]
  402794:	b97b      	cbnz	r3, 4027b6 <cpu_irq_enter_critical+0x26>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  402796:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
  40279a:	b94b      	cbnz	r3, 4027b0 <cpu_irq_enter_critical+0x20>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
  40279c:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  40279e:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
  4027a2:	2200      	movs	r2, #0
  4027a4:	4b07      	ldr	r3, [pc, #28]	; (4027c4 <cpu_irq_enter_critical+0x34>)
  4027a6:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
  4027a8:	2201      	movs	r2, #1
  4027aa:	4b07      	ldr	r3, [pc, #28]	; (4027c8 <cpu_irq_enter_critical+0x38>)
  4027ac:	701a      	strb	r2, [r3, #0]
  4027ae:	e002      	b.n	4027b6 <cpu_irq_enter_critical+0x26>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
  4027b0:	2200      	movs	r2, #0
  4027b2:	4b05      	ldr	r3, [pc, #20]	; (4027c8 <cpu_irq_enter_critical+0x38>)
  4027b4:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
  4027b6:	4a02      	ldr	r2, [pc, #8]	; (4027c0 <cpu_irq_enter_critical+0x30>)
  4027b8:	6813      	ldr	r3, [r2, #0]
  4027ba:	3301      	adds	r3, #1
  4027bc:	6013      	str	r3, [r2, #0]
  4027be:	4770      	bx	lr
  4027c0:	200005e0 	.word	0x200005e0
  4027c4:	20000097 	.word	0x20000097
  4027c8:	200005e4 	.word	0x200005e4

004027cc <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
  4027cc:	4b08      	ldr	r3, [pc, #32]	; (4027f0 <cpu_irq_leave_critical+0x24>)
  4027ce:	681a      	ldr	r2, [r3, #0]
  4027d0:	3a01      	subs	r2, #1
  4027d2:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
  4027d4:	681b      	ldr	r3, [r3, #0]
  4027d6:	b953      	cbnz	r3, 4027ee <cpu_irq_leave_critical+0x22>
  4027d8:	4b06      	ldr	r3, [pc, #24]	; (4027f4 <cpu_irq_leave_critical+0x28>)
  4027da:	781b      	ldrb	r3, [r3, #0]
  4027dc:	f013 0fff 	tst.w	r3, #255	; 0xff
  4027e0:	d005      	beq.n	4027ee <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
  4027e2:	2201      	movs	r2, #1
  4027e4:	4b04      	ldr	r3, [pc, #16]	; (4027f8 <cpu_irq_leave_critical+0x2c>)
  4027e6:	701a      	strb	r2, [r3, #0]
  4027e8:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
  4027ec:	b662      	cpsie	i
  4027ee:	4770      	bx	lr
  4027f0:	200005e0 	.word	0x200005e0
  4027f4:	200005e4 	.word	0x200005e4
  4027f8:	20000097 	.word	0x20000097

004027fc <Dummy_Handler>:
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
	while (1) {
	}
  4027fc:	e7fe      	b.n	4027fc <Dummy_Handler>
  4027fe:	bf00      	nop

00402800 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  402800:	b508      	push	{r3, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc > pDest) {
  402802:	4b20      	ldr	r3, [pc, #128]	; (402884 <Reset_Handler+0x84>)
  402804:	4a20      	ldr	r2, [pc, #128]	; (402888 <Reset_Handler+0x88>)
  402806:	429a      	cmp	r2, r3
  402808:	d913      	bls.n	402832 <Reset_Handler+0x32>
		for (; pDest < &_erelocate;) {
  40280a:	4b20      	ldr	r3, [pc, #128]	; (40288c <Reset_Handler+0x8c>)
  40280c:	4a1d      	ldr	r2, [pc, #116]	; (402884 <Reset_Handler+0x84>)
  40280e:	429a      	cmp	r2, r3
  402810:	d21f      	bcs.n	402852 <Reset_Handler+0x52>
  402812:	4611      	mov	r1, r2
  402814:	3204      	adds	r2, #4
  402816:	3303      	adds	r3, #3
  402818:	1a9b      	subs	r3, r3, r2
  40281a:	f023 0303 	bic.w	r3, r3, #3
  40281e:	3304      	adds	r3, #4
  402820:	4a19      	ldr	r2, [pc, #100]	; (402888 <Reset_Handler+0x88>)
  402822:	4413      	add	r3, r2
			*pDest++ = *pSrc++;
  402824:	f852 0b04 	ldr.w	r0, [r2], #4
  402828:	f841 0b04 	str.w	r0, [r1], #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc > pDest) {
		for (; pDest < &_erelocate;) {
  40282c:	429a      	cmp	r2, r3
  40282e:	d1f9      	bne.n	402824 <Reset_Handler+0x24>
  402830:	e00f      	b.n	402852 <Reset_Handler+0x52>
			*pDest++ = *pSrc++;
		}
	} else if (pSrc < pDest) {
  402832:	4b14      	ldr	r3, [pc, #80]	; (402884 <Reset_Handler+0x84>)
  402834:	4a14      	ldr	r2, [pc, #80]	; (402888 <Reset_Handler+0x88>)
  402836:	429a      	cmp	r2, r3
  402838:	d20b      	bcs.n	402852 <Reset_Handler+0x52>
		uint32_t nb_bytes = (uint32_t)&_erelocate - (uint32_t)&_srelocate;
  40283a:	4b14      	ldr	r3, [pc, #80]	; (40288c <Reset_Handler+0x8c>)
  40283c:	4a11      	ldr	r2, [pc, #68]	; (402884 <Reset_Handler+0x84>)
  40283e:	1a9a      	subs	r2, r3, r2
  402840:	4813      	ldr	r0, [pc, #76]	; (402890 <Reset_Handler+0x90>)
		pSrc = (uint32_t*)((uint32_t)pSrc + nb_bytes) - 1;
  402842:	1881      	adds	r1, r0, r2
		pDest = (uint32_t*)((uint32_t)pDest + nb_bytes) - 1;
		for (;nb_bytes;nb_bytes -= 4) {
  402844:	b12a      	cbz	r2, 402852 <Reset_Handler+0x52>
			*pDest-- = *pSrc--;
  402846:	f851 2904 	ldr.w	r2, [r1], #-4
  40284a:	f843 2d04 	str.w	r2, [r3, #-4]!
		}
	} else if (pSrc < pDest) {
		uint32_t nb_bytes = (uint32_t)&_erelocate - (uint32_t)&_srelocate;
		pSrc = (uint32_t*)((uint32_t)pSrc + nb_bytes) - 1;
		pDest = (uint32_t*)((uint32_t)pDest + nb_bytes) - 1;
		for (;nb_bytes;nb_bytes -= 4) {
  40284e:	4281      	cmp	r1, r0
  402850:	d1f9      	bne.n	402846 <Reset_Handler+0x46>

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
  402852:	bf00      	nop
		}
	}
	__NOP();

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  402854:	4b0f      	ldr	r3, [pc, #60]	; (402894 <Reset_Handler+0x94>)
  402856:	4a10      	ldr	r2, [pc, #64]	; (402898 <Reset_Handler+0x98>)
  402858:	429a      	cmp	r2, r3
  40285a:	d20b      	bcs.n	402874 <Reset_Handler+0x74>
  40285c:	1d13      	adds	r3, r2, #4
  40285e:	4a0f      	ldr	r2, [pc, #60]	; (40289c <Reset_Handler+0x9c>)
  402860:	1ad2      	subs	r2, r2, r3
  402862:	f022 0203 	bic.w	r2, r2, #3
  402866:	441a      	add	r2, r3
  402868:	3b04      	subs	r3, #4
		*pDest++ = 0;
  40286a:	2100      	movs	r1, #0
  40286c:	f843 1b04 	str.w	r1, [r3], #4
		}
	}
	__NOP();

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  402870:	4293      	cmp	r3, r2
  402872:	d1fb      	bne.n	40286c <Reset_Handler+0x6c>
		*pDest++ = 0;
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc);
  402874:	4b0a      	ldr	r3, [pc, #40]	; (4028a0 <Reset_Handler+0xa0>)
  402876:	4a0b      	ldr	r2, [pc, #44]	; (4028a4 <Reset_Handler+0xa4>)
  402878:	609a      	str	r2, [r3, #8]

	/* Initialize the C library */
	__libc_init_array();
  40287a:	4b0b      	ldr	r3, [pc, #44]	; (4028a8 <Reset_Handler+0xa8>)
  40287c:	4798      	blx	r3

	/* Branch to main function */
	main();
  40287e:	4b0b      	ldr	r3, [pc, #44]	; (4028ac <Reset_Handler+0xac>)
  402880:	4798      	blx	r3

	/* Infinite loop */
	while (1);
  402882:	e7fe      	b.n	402882 <Reset_Handler+0x82>
  402884:	20000000 	.word	0x20000000
  402888:	0040318c 	.word	0x0040318c
  40288c:	200004e0 	.word	0x200004e0
  402890:	00403188 	.word	0x00403188
  402894:	2000c1a8 	.word	0x2000c1a8
  402898:	200004e0 	.word	0x200004e0
  40289c:	2000c1ab 	.word	0x2000c1ab
  4028a0:	e000ed00 	.word	0xe000ed00
  4028a4:	00400000 	.word	0x00400000
  4028a8:	00403019 	.word	0x00403019
  4028ac:	00402f75 	.word	0x00402f75

004028b0 <SystemCoreClockUpdate>:
 * \brief Get Core Clock Frequency.
 */
void SystemCoreClockUpdate( void )
{
	/* Determine clock frequency according to clock register values */
	switch ( PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk ) {
  4028b0:	4b3d      	ldr	r3, [pc, #244]	; (4029a8 <SystemCoreClockUpdate+0xf8>)
  4028b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4028b4:	f003 0303 	and.w	r3, r3, #3
  4028b8:	2b03      	cmp	r3, #3
  4028ba:	d85d      	bhi.n	402978 <SystemCoreClockUpdate+0xc8>
  4028bc:	e8df f003 	tbb	[pc, r3]
  4028c0:	2b2b0e02 	.word	0x2b2b0e02
	case PMC_MCKR_CSS_SLOW_CLK: /* Slow clock */
			if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL ) {
  4028c4:	4b39      	ldr	r3, [pc, #228]	; (4029ac <SystemCoreClockUpdate+0xfc>)
  4028c6:	695b      	ldr	r3, [r3, #20]
  4028c8:	f013 0f80 	tst.w	r3, #128	; 0x80
				SystemCoreClock = CHIP_FREQ_XTAL_32K;
  4028cc:	bf14      	ite	ne
  4028ce:	f44f 4200 	movne.w	r2, #32768	; 0x8000
			} else {
				SystemCoreClock = CHIP_FREQ_SLCK_RC;
  4028d2:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  4028d6:	4b36      	ldr	r3, [pc, #216]	; (4029b0 <SystemCoreClockUpdate+0x100>)
  4028d8:	601a      	str	r2, [r3, #0]
  4028da:	e04d      	b.n	402978 <SystemCoreClockUpdate+0xc8>
			}
		break;
		
	case PMC_MCKR_CSS_MAIN_CLK: /* Main clock */
		if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  4028dc:	4b32      	ldr	r3, [pc, #200]	; (4029a8 <SystemCoreClockUpdate+0xf8>)
  4028de:	6a1b      	ldr	r3, [r3, #32]
  4028e0:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  4028e4:	d003      	beq.n	4028ee <SystemCoreClockUpdate+0x3e>
			SystemCoreClock = CHIP_FREQ_XTAL;
  4028e6:	4a33      	ldr	r2, [pc, #204]	; (4029b4 <SystemCoreClockUpdate+0x104>)
  4028e8:	4b31      	ldr	r3, [pc, #196]	; (4029b0 <SystemCoreClockUpdate+0x100>)
  4028ea:	601a      	str	r2, [r3, #0]
  4028ec:	e044      	b.n	402978 <SystemCoreClockUpdate+0xc8>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  4028ee:	4a32      	ldr	r2, [pc, #200]	; (4029b8 <SystemCoreClockUpdate+0x108>)
  4028f0:	4b2f      	ldr	r3, [pc, #188]	; (4029b0 <SystemCoreClockUpdate+0x100>)
  4028f2:	601a      	str	r2, [r3, #0]
			
			switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  4028f4:	4b2c      	ldr	r3, [pc, #176]	; (4029a8 <SystemCoreClockUpdate+0xf8>)
  4028f6:	6a1b      	ldr	r3, [r3, #32]
  4028f8:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4028fc:	2b10      	cmp	r3, #16
  4028fe:	d002      	beq.n	402906 <SystemCoreClockUpdate+0x56>
  402900:	2b20      	cmp	r3, #32
  402902:	d004      	beq.n	40290e <SystemCoreClockUpdate+0x5e>
  402904:	e038      	b.n	402978 <SystemCoreClockUpdate+0xc8>
			case CKGR_MOR_MOSCRCF_4_MHz:
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
			break;
			
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
  402906:	4a2d      	ldr	r2, [pc, #180]	; (4029bc <SystemCoreClockUpdate+0x10c>)
  402908:	4b29      	ldr	r3, [pc, #164]	; (4029b0 <SystemCoreClockUpdate+0x100>)
  40290a:	601a      	str	r2, [r3, #0]
			break;
  40290c:	e034      	b.n	402978 <SystemCoreClockUpdate+0xc8>
			
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
  40290e:	4a29      	ldr	r2, [pc, #164]	; (4029b4 <SystemCoreClockUpdate+0x104>)
  402910:	4b27      	ldr	r3, [pc, #156]	; (4029b0 <SystemCoreClockUpdate+0x100>)
  402912:	601a      	str	r2, [r3, #0]
			break;
  402914:	e030      	b.n	402978 <SystemCoreClockUpdate+0xc8>
		}
		break;
		
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_PLLB_CLK:	/* PLLB clock */
			if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  402916:	4b24      	ldr	r3, [pc, #144]	; (4029a8 <SystemCoreClockUpdate+0xf8>)
  402918:	6a1b      	ldr	r3, [r3, #32]
  40291a:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  40291e:	d003      	beq.n	402928 <SystemCoreClockUpdate+0x78>
				SystemCoreClock = CHIP_FREQ_XTAL;
  402920:	4a24      	ldr	r2, [pc, #144]	; (4029b4 <SystemCoreClockUpdate+0x104>)
  402922:	4b23      	ldr	r3, [pc, #140]	; (4029b0 <SystemCoreClockUpdate+0x100>)
  402924:	601a      	str	r2, [r3, #0]
  402926:	e012      	b.n	40294e <SystemCoreClockUpdate+0x9e>
			} else {
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  402928:	4a23      	ldr	r2, [pc, #140]	; (4029b8 <SystemCoreClockUpdate+0x108>)
  40292a:	4b21      	ldr	r3, [pc, #132]	; (4029b0 <SystemCoreClockUpdate+0x100>)
  40292c:	601a      	str	r2, [r3, #0]
				
				switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  40292e:	4b1e      	ldr	r3, [pc, #120]	; (4029a8 <SystemCoreClockUpdate+0xf8>)
  402930:	6a1b      	ldr	r3, [r3, #32]
  402932:	f003 0370 	and.w	r3, r3, #112	; 0x70
  402936:	2b10      	cmp	r3, #16
  402938:	d002      	beq.n	402940 <SystemCoreClockUpdate+0x90>
  40293a:	2b20      	cmp	r3, #32
  40293c:	d004      	beq.n	402948 <SystemCoreClockUpdate+0x98>
  40293e:	e006      	b.n	40294e <SystemCoreClockUpdate+0x9e>
				case CKGR_MOR_MOSCRCF_4_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
					break;
				
				case CKGR_MOR_MOSCRCF_8_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
  402940:	4a1e      	ldr	r2, [pc, #120]	; (4029bc <SystemCoreClockUpdate+0x10c>)
  402942:	4b1b      	ldr	r3, [pc, #108]	; (4029b0 <SystemCoreClockUpdate+0x100>)
  402944:	601a      	str	r2, [r3, #0]
					break;
  402946:	e002      	b.n	40294e <SystemCoreClockUpdate+0x9e>
				
				case CKGR_MOR_MOSCRCF_12_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
  402948:	4a1a      	ldr	r2, [pc, #104]	; (4029b4 <SystemCoreClockUpdate+0x104>)
  40294a:	4b19      	ldr	r3, [pc, #100]	; (4029b0 <SystemCoreClockUpdate+0x100>)
  40294c:	601a      	str	r2, [r3, #0]
				default:
					break;
				}
			}
			
			if ( (uint32_t)(PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) ==
  40294e:	4b16      	ldr	r3, [pc, #88]	; (4029a8 <SystemCoreClockUpdate+0xf8>)
  402950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402952:	f003 0303 	and.w	r3, r3, #3
  402956:	2b02      	cmp	r3, #2
					PMC_MCKR_CSS_PLLA_CLK ) {
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
  402958:	4a13      	ldr	r2, [pc, #76]	; (4029a8 <SystemCoreClockUpdate+0xf8>)
  40295a:	bf07      	ittee	eq
  40295c:	6a93      	ldreq	r3, [r2, #40]	; 0x28
						>> CKGR_PLLAR_MULA_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
  40295e:	6a92      	ldreq	r2, [r2, #40]	; 0x28
						>> CKGR_PLLAR_DIVA_Pos));
			} else {
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
  402960:	6ad3      	ldrne	r3, [r2, #44]	; 0x2c
						>> CKGR_PLLBR_MULB_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
  402962:	6ad2      	ldrne	r2, [r2, #44]	; 0x2c
  402964:	4812      	ldr	r0, [pc, #72]	; (4029b0 <SystemCoreClockUpdate+0x100>)
						>> CKGR_PLLAR_MULA_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
						>> CKGR_PLLAR_DIVA_Pos));
			} else {
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
						>> CKGR_PLLBR_MULB_Pos) + 1U);
  402966:	f3c3 410a 	ubfx	r1, r3, #16, #11
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
						>> CKGR_PLLAR_MULA_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
						>> CKGR_PLLAR_DIVA_Pos));
			} else {
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
  40296a:	6803      	ldr	r3, [r0, #0]
  40296c:	fb01 3303 	mla	r3, r1, r3, r3
						>> CKGR_PLLBR_MULB_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
						>> CKGR_PLLBR_DIVB_Pos));
  402970:	b2d2      	uxtb	r2, r2
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
						>> CKGR_PLLAR_DIVA_Pos));
			} else {
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
						>> CKGR_PLLBR_MULB_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
  402972:	fbb3 f3f2 	udiv	r3, r3, r2
  402976:	6003      	str	r3, [r0, #0]
		
	default:
		break;
	}

	if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 ) {
  402978:	4b0b      	ldr	r3, [pc, #44]	; (4029a8 <SystemCoreClockUpdate+0xf8>)
  40297a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40297c:	f003 0370 	and.w	r3, r3, #112	; 0x70
  402980:	2b70      	cmp	r3, #112	; 0x70
  402982:	d107      	bne.n	402994 <SystemCoreClockUpdate+0xe4>
		SystemCoreClock /= 3U;
  402984:	4a0a      	ldr	r2, [pc, #40]	; (4029b0 <SystemCoreClockUpdate+0x100>)
  402986:	6813      	ldr	r3, [r2, #0]
  402988:	490d      	ldr	r1, [pc, #52]	; (4029c0 <SystemCoreClockUpdate+0x110>)
  40298a:	fba1 1303 	umull	r1, r3, r1, r3
  40298e:	085b      	lsrs	r3, r3, #1
  402990:	6013      	str	r3, [r2, #0]
  402992:	4770      	bx	lr
	} else {
		SystemCoreClock >>=
			((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  402994:	4b04      	ldr	r3, [pc, #16]	; (4029a8 <SystemCoreClockUpdate+0xf8>)
  402996:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	}

	if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 ) {
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>=
  402998:	4905      	ldr	r1, [pc, #20]	; (4029b0 <SystemCoreClockUpdate+0x100>)
			((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  40299a:	f3c2 1202 	ubfx	r2, r2, #4, #3
	}

	if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 ) {
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>=
  40299e:	680b      	ldr	r3, [r1, #0]
  4029a0:	40d3      	lsrs	r3, r2
  4029a2:	600b      	str	r3, [r1, #0]
  4029a4:	4770      	bx	lr
  4029a6:	bf00      	nop
  4029a8:	400e0400 	.word	0x400e0400
  4029ac:	400e1410 	.word	0x400e1410
  4029b0:	20000098 	.word	0x20000098
  4029b4:	00b71b00 	.word	0x00b71b00
  4029b8:	003d0900 	.word	0x003d0900
  4029bc:	007a1200 	.word	0x007a1200
  4029c0:	aaaaaaab 	.word	0xaaaaaaab

004029c4 <system_init_flash>:
 */
void system_init_flash( uint32_t ul_clk )
{
  /* Set FWS for embedded Flash access according to operating frequency */
#if !defined(ID_EFC1)
	if ( ul_clk < CHIP_FREQ_FWS_0 ) {
  4029c4:	4b12      	ldr	r3, [pc, #72]	; (402a10 <system_init_flash+0x4c>)
  4029c6:	4298      	cmp	r0, r3
  4029c8:	d804      	bhi.n	4029d4 <system_init_flash+0x10>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  4029ca:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  4029ce:	4b11      	ldr	r3, [pc, #68]	; (402a14 <system_init_flash+0x50>)
  4029d0:	601a      	str	r2, [r3, #0]
  4029d2:	4770      	bx	lr
	} else {
		if ( ul_clk < CHIP_FREQ_FWS_1 ) {
  4029d4:	4b10      	ldr	r3, [pc, #64]	; (402a18 <system_init_flash+0x54>)
  4029d6:	4298      	cmp	r0, r3
  4029d8:	d803      	bhi.n	4029e2 <system_init_flash+0x1e>
			EFC0->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  4029da:	4a10      	ldr	r2, [pc, #64]	; (402a1c <system_init_flash+0x58>)
  4029dc:	4b0d      	ldr	r3, [pc, #52]	; (402a14 <system_init_flash+0x50>)
  4029de:	601a      	str	r2, [r3, #0]
  4029e0:	4770      	bx	lr
		} else {
			if ( ul_clk < CHIP_FREQ_FWS_2 ) {
  4029e2:	4b0f      	ldr	r3, [pc, #60]	; (402a20 <system_init_flash+0x5c>)
  4029e4:	4298      	cmp	r0, r3
  4029e6:	d803      	bhi.n	4029f0 <system_init_flash+0x2c>
				EFC0->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  4029e8:	4a0e      	ldr	r2, [pc, #56]	; (402a24 <system_init_flash+0x60>)
  4029ea:	4b0a      	ldr	r3, [pc, #40]	; (402a14 <system_init_flash+0x50>)
  4029ec:	601a      	str	r2, [r3, #0]
  4029ee:	4770      	bx	lr
			} else {
				if ( ul_clk < CHIP_FREQ_FWS_3 ) {
  4029f0:	4b0d      	ldr	r3, [pc, #52]	; (402a28 <system_init_flash+0x64>)
  4029f2:	4298      	cmp	r0, r3
  4029f4:	d803      	bhi.n	4029fe <system_init_flash+0x3a>
					EFC0->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  4029f6:	4a0d      	ldr	r2, [pc, #52]	; (402a2c <system_init_flash+0x68>)
  4029f8:	4b06      	ldr	r3, [pc, #24]	; (402a14 <system_init_flash+0x50>)
  4029fa:	601a      	str	r2, [r3, #0]
  4029fc:	4770      	bx	lr
				} else {
					if ( ul_clk < CHIP_FREQ_FWS_4 ) {
  4029fe:	4b0c      	ldr	r3, [pc, #48]	; (402a30 <system_init_flash+0x6c>)
  402a00:	4298      	cmp	r0, r3
					EFC0->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  402a02:	bf94      	ite	ls
  402a04:	f04f 2204 	movls.w	r2, #67109888	; 0x4000400
					} else {
					EFC0->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  402a08:	4a0a      	ldrhi	r2, [pc, #40]	; (402a34 <system_init_flash+0x70>)
  402a0a:	4b02      	ldr	r3, [pc, #8]	; (402a14 <system_init_flash+0x50>)
  402a0c:	601a      	str	r2, [r3, #0]
  402a0e:	4770      	bx	lr
  402a10:	01ba813f 	.word	0x01ba813f
  402a14:	400e0a00 	.word	0x400e0a00
  402a18:	0375027f 	.word	0x0375027f
  402a1c:	04000100 	.word	0x04000100
  402a20:	053ec5ff 	.word	0x053ec5ff
  402a24:	04000200 	.word	0x04000200
  402a28:	00a4cb7f 	.word	0x00a4cb7f
  402a2c:	04000300 	.word	0x04000300
  402a30:	07270dff 	.word	0x07270dff
  402a34:	04000500 	.word	0x04000500

00402a38 <point_output>:
}



void point_output(void) //sends point data to the DACs, data is point number "framePos" in buffer "frameAddress".
{
  402a38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	uint8_t* currentPoint = frameAddress + framePos;
  402a3c:	4b24      	ldr	r3, [pc, #144]	; (402ad0 <point_output+0x98>)
  402a3e:	881f      	ldrh	r7, [r3, #0]
  402a40:	4b24      	ldr	r3, [pc, #144]	; (402ad4 <point_output+0x9c>)
  402a42:	f8d3 8000 	ldr.w	r8, [r3]
  402a46:	eb08 0407 	add.w	r4, r8, r7
	
	spi_write(SPI, (currentPoint[5] << 4) + (0b0001 << 12), 0, 0); //G
  402a4a:	4e23      	ldr	r6, [pc, #140]	; (402ad8 <point_output+0xa0>)
  402a4c:	7961      	ldrb	r1, [r4, #5]
  402a4e:	0109      	lsls	r1, r1, #4
  402a50:	4630      	mov	r0, r6
  402a52:	f501 5180 	add.w	r1, r1, #4096	; 0x1000
  402a56:	2200      	movs	r2, #0
  402a58:	4613      	mov	r3, r2
  402a5a:	4d20      	ldr	r5, [pc, #128]	; (402adc <point_output+0xa4>)
  402a5c:	47a8      	blx	r5
	spi_write(SPI, (currentPoint[6] << 4) + (0b0101 << 12), 0, 0); //B
  402a5e:	79a1      	ldrb	r1, [r4, #6]
  402a60:	0109      	lsls	r1, r1, #4
  402a62:	4630      	mov	r0, r6
  402a64:	f501 41a0 	add.w	r1, r1, #20480	; 0x5000
  402a68:	2200      	movs	r2, #0
  402a6a:	4613      	mov	r3, r2
  402a6c:	47a8      	blx	r5
	spi_write(SPI, (currentPoint[7] << 4) + (0b1001 << 12), 0, 0); //I
  402a6e:	79e1      	ldrb	r1, [r4, #7]
  402a70:	0109      	lsls	r1, r1, #4
  402a72:	f5a1 41e0 	sub.w	r1, r1, #28672	; 0x7000
  402a76:	b289      	uxth	r1, r1
  402a78:	4630      	mov	r0, r6
  402a7a:	2200      	movs	r2, #0
  402a7c:	4613      	mov	r3, r2
  402a7e:	47a8      	blx	r5
	spi_write(SPI, (currentPoint[4] << 4) + (0b1101 << 12), 0, 0); //R
  402a80:	7921      	ldrb	r1, [r4, #4]
  402a82:	0109      	lsls	r1, r1, #4
  402a84:	f5a1 5140 	sub.w	r1, r1, #12288	; 0x3000
  402a88:	b289      	uxth	r1, r1
  402a8a:	4630      	mov	r0, r6
  402a8c:	2200      	movs	r2, #0
  402a8e:	4613      	mov	r3, r2
  402a90:	47a8      	blx	r5
	
	if ((dacc_get_interrupt_status(DACC) & DACC_ISR_TXRDY) == DACC_ISR_TXRDY) //if DAC ready
  402a92:	4813      	ldr	r0, [pc, #76]	; (402ae0 <point_output+0xa8>)
  402a94:	4b13      	ldr	r3, [pc, #76]	; (402ae4 <point_output+0xac>)
  402a96:	4798      	blx	r3
  402a98:	f010 0f01 	tst.w	r0, #1
  402a9c:	d016      	beq.n	402acc <point_output+0x94>
	{
		dacc_set_channel_selection(DACC, 0);
  402a9e:	4d10      	ldr	r5, [pc, #64]	; (402ae0 <point_output+0xa8>)
  402aa0:	4628      	mov	r0, r5
  402aa2:	2100      	movs	r1, #0
  402aa4:	f8df 9044 	ldr.w	r9, [pc, #68]	; 402aec <point_output+0xb4>
  402aa8:	47c8      	blx	r9
		dacc_write_conversion_data(DACC, (currentPoint[1] << 8) + currentPoint[0] ); //X
  402aaa:	7861      	ldrb	r1, [r4, #1]
  402aac:	f818 3007 	ldrb.w	r3, [r8, r7]
  402ab0:	4628      	mov	r0, r5
  402ab2:	eb03 2101 	add.w	r1, r3, r1, lsl #8
  402ab6:	4e0c      	ldr	r6, [pc, #48]	; (402ae8 <point_output+0xb0>)
  402ab8:	47b0      	blx	r6
		dacc_set_channel_selection(DACC, 1);
  402aba:	4628      	mov	r0, r5
  402abc:	2101      	movs	r1, #1
  402abe:	47c8      	blx	r9
		dacc_write_conversion_data(DACC, (currentPoint[3] << 8) + currentPoint[2] ); //Y
  402ac0:	78e1      	ldrb	r1, [r4, #3]
  402ac2:	78a3      	ldrb	r3, [r4, #2]
  402ac4:	4628      	mov	r0, r5
  402ac6:	eb03 2101 	add.w	r1, r3, r1, lsl #8
  402aca:	47b0      	blx	r6
  402acc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  402ad0:	200005ec 	.word	0x200005ec
  402ad4:	200000b0 	.word	0x200000b0
  402ad8:	40008000 	.word	0x40008000
  402adc:	004008bd 	.word	0x004008bd
  402ae0:	4003c000 	.word	0x4003c000
  402ae4:	0040234d 	.word	0x0040234d
  402ae8:	00402351 	.word	0x00402351
  402aec:	00402355 	.word	0x00402355

00402af0 <blank_and_center>:
	}
}

void blank_and_center(void) //outputs a blanked and centered point
{
  402af0:	b570      	push	{r4, r5, r6, lr}
	uint8_t blankedPoint[8] = {0x00, 0x08, 0x00, 0x08, 0,0,0,0};
	uint8_t* currentPoint = &blankedPoint[0];
	
	spi_write(SPI, (currentPoint[5] << 4) + (0b0001 << 12), 0, 0); //G
  402af2:	4d19      	ldr	r5, [pc, #100]	; (402b58 <blank_and_center+0x68>)
  402af4:	4628      	mov	r0, r5
  402af6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  402afa:	2200      	movs	r2, #0
  402afc:	4613      	mov	r3, r2
  402afe:	4c17      	ldr	r4, [pc, #92]	; (402b5c <blank_and_center+0x6c>)
  402b00:	47a0      	blx	r4
	spi_write(SPI, (currentPoint[6] << 4) + (0b0101 << 12), 0, 0); //B
  402b02:	4628      	mov	r0, r5
  402b04:	f44f 41a0 	mov.w	r1, #20480	; 0x5000
  402b08:	2200      	movs	r2, #0
  402b0a:	4613      	mov	r3, r2
  402b0c:	47a0      	blx	r4
	spi_write(SPI, (currentPoint[7] << 4) + (0b1001 << 12), 0, 0); //I
  402b0e:	4628      	mov	r0, r5
  402b10:	f44f 4110 	mov.w	r1, #36864	; 0x9000
  402b14:	2200      	movs	r2, #0
  402b16:	4613      	mov	r3, r2
  402b18:	47a0      	blx	r4
	spi_write(SPI, (currentPoint[4] << 4) + (0b1101 << 12), 0, 0); //R
  402b1a:	4628      	mov	r0, r5
  402b1c:	f44f 4150 	mov.w	r1, #53248	; 0xd000
  402b20:	2200      	movs	r2, #0
  402b22:	4613      	mov	r3, r2
  402b24:	47a0      	blx	r4
	
	if ((dacc_get_interrupt_status(DACC) & DACC_ISR_TXRDY) == DACC_ISR_TXRDY) //if DAC ready
  402b26:	480e      	ldr	r0, [pc, #56]	; (402b60 <blank_and_center+0x70>)
  402b28:	4b0e      	ldr	r3, [pc, #56]	; (402b64 <blank_and_center+0x74>)
  402b2a:	4798      	blx	r3
  402b2c:	f010 0f01 	tst.w	r0, #1
  402b30:	d010      	beq.n	402b54 <blank_and_center+0x64>
	{
		dacc_set_channel_selection(DACC, 0);
  402b32:	4c0b      	ldr	r4, [pc, #44]	; (402b60 <blank_and_center+0x70>)
  402b34:	4620      	mov	r0, r4
  402b36:	2100      	movs	r1, #0
  402b38:	4e0b      	ldr	r6, [pc, #44]	; (402b68 <blank_and_center+0x78>)
  402b3a:	47b0      	blx	r6
		dacc_write_conversion_data(DACC, (currentPoint[1] << 8) + currentPoint[0] ); //X
  402b3c:	4620      	mov	r0, r4
  402b3e:	f44f 6100 	mov.w	r1, #2048	; 0x800
  402b42:	4d0a      	ldr	r5, [pc, #40]	; (402b6c <blank_and_center+0x7c>)
  402b44:	47a8      	blx	r5
		dacc_set_channel_selection(DACC, 1);
  402b46:	4620      	mov	r0, r4
  402b48:	2101      	movs	r1, #1
  402b4a:	47b0      	blx	r6
		dacc_write_conversion_data(DACC, (currentPoint[3] << 8) + currentPoint[2] ); //Y
  402b4c:	4620      	mov	r0, r4
  402b4e:	f44f 6100 	mov.w	r1, #2048	; 0x800
  402b52:	47a8      	blx	r5
  402b54:	bd70      	pop	{r4, r5, r6, pc}
  402b56:	bf00      	nop
  402b58:	40008000 	.word	0x40008000
  402b5c:	004008bd 	.word	0x004008bd
  402b60:	4003c000 	.word	0x4003c000
  402b64:	0040234d 	.word	0x0040234d
  402b68:	00402355 	.word	0x00402355
  402b6c:	00402351 	.word	0x00402351

00402b70 <speed_set>:
	}
}

void speed_set(uint32_t speed) //set the output speed in points per second
{
	if (speed > MAXSPEED)
  402b70:	f24c 3350 	movw	r3, #50000	; 0xc350
  402b74:	4298      	cmp	r0, r3
  402b76:	d815      	bhi.n	402ba4 <speed_set+0x34>
	speed = MAXSPEED;
	else if (speed < MINSPEED)
  402b78:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
  402b7c:	d315      	bcc.n	402baa <speed_set+0x3a>
	speed = MINSPEED;
	outputSpeed = speed;
  402b7e:	4b0f      	ldr	r3, [pc, #60]	; (402bbc <speed_set+0x4c>)
  402b80:	6018      	str	r0, [r3, #0]
	SysTick_Config( (sysclk_get_cpu_hz() / speed) + 1);
  402b82:	4b0f      	ldr	r3, [pc, #60]	; (402bc0 <speed_set+0x50>)
  402b84:	fbb3 f0f0 	udiv	r0, r3, r0
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */
  402b88:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
  402b8c:	d215      	bcs.n	402bba <speed_set+0x4a>

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
  402b8e:	4b0d      	ldr	r3, [pc, #52]	; (402bc4 <speed_set+0x54>)
  402b90:	6058      	str	r0, [r3, #4]
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  402b92:	21f0      	movs	r1, #240	; 0xf0
  402b94:	4a0c      	ldr	r2, [pc, #48]	; (402bc8 <speed_set+0x58>)
  402b96:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
  402b9a:	2200      	movs	r2, #0
  402b9c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
  402b9e:	2207      	movs	r2, #7
  402ba0:	601a      	str	r2, [r3, #0]
  402ba2:	4770      	bx	lr
}

void speed_set(uint32_t speed) //set the output speed in points per second
{
	if (speed > MAXSPEED)
	speed = MAXSPEED;
  402ba4:	f24c 3050 	movw	r0, #50000	; 0xc350
  402ba8:	e001      	b.n	402bae <speed_set+0x3e>
	else if (speed < MINSPEED)
	speed = MINSPEED;
  402baa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
	outputSpeed = speed;
  402bae:	4b03      	ldr	r3, [pc, #12]	; (402bbc <speed_set+0x4c>)
  402bb0:	6018      	str	r0, [r3, #0]
	SysTick_Config( (sysclk_get_cpu_hz() / speed) + 1);
  402bb2:	4b03      	ldr	r3, [pc, #12]	; (402bc0 <speed_set+0x50>)
  402bb4:	fbb3 f0f0 	udiv	r0, r3, r0
  402bb8:	e7e9      	b.n	402b8e <speed_set+0x1e>
  402bba:	4770      	bx	lr
  402bbc:	200000a8 	.word	0x200000a8
  402bc0:	05b8d800 	.word	0x05b8d800
  402bc4:	e000e010 	.word	0xe000e010
  402bc8:	e000ed00 	.word	0xe000ed00

00402bcc <usb_bulk_out_callback>:
	else
	statusled_set(LOW);
}

void usb_bulk_out_callback(udd_ep_status_t status, iram_size_t length, udd_ep_id_t ep)
{
  402bcc:	b538      	push	{r3, r4, r5, lr}
	//0-n:	frame data, point is 16bit X, 16bit Y, 8bit R, 8bit G, 8bit B, 8bit I
	//n:	output rate 16bit
	//n+2:	frame size in points 16bit
	//n+4:	flags
	
	if ( (!newFrameReady) && (status == UDD_EP_TRANSFER_OK) && (length <= MAXFRAMESIZE * 8 + 5) ) //if received ok and buffer is not full
  402bce:	4b2c      	ldr	r3, [pc, #176]	; (402c80 <usb_bulk_out_callback+0xb4>)
  402bd0:	781b      	ldrb	r3, [r3, #0]
  402bd2:	2b00      	cmp	r3, #0
  402bd4:	d14c      	bne.n	402c70 <usb_bulk_out_callback+0xa4>
  402bd6:	2800      	cmp	r0, #0
  402bd8:	d14a      	bne.n	402c70 <usb_bulk_out_callback+0xa4>
  402bda:	f643 638d 	movw	r3, #16013	; 0x3e8d
  402bde:	4299      	cmp	r1, r3
  402be0:	d846      	bhi.n	402c70 <usb_bulk_out_callback+0xa4>
	{
		uint16_t numOfPointBytes = length - 5; //from length of received data
  402be2:	3905      	subs	r1, #5
  402be4:	b28c      	uxth	r4, r1
		uint16_t numOfPointBytes2 = ((usbBulkBufferAddress[numOfPointBytes + 3] << 8) + usbBulkBufferAddress[numOfPointBytes + 2]) * 8; //from control bytes
  402be6:	4b27      	ldr	r3, [pc, #156]	; (402c84 <usb_bulk_out_callback+0xb8>)
  402be8:	6819      	ldr	r1, [r3, #0]
  402bea:	190a      	adds	r2, r1, r4
  402bec:	78d0      	ldrb	r0, [r2, #3]
  402bee:	7893      	ldrb	r3, [r2, #2]
  402bf0:	eb03 2300 	add.w	r3, r3, r0, lsl #8
  402bf4:	00db      	lsls	r3, r3, #3
		
		if (numOfPointBytes == numOfPointBytes2) //sanity check, skip frame if conflicting frame size information
  402bf6:	b29b      	uxth	r3, r3
  402bf8:	429c      	cmp	r4, r3
  402bfa:	d139      	bne.n	402c70 <usb_bulk_out_callback+0xa4>
		{
			uint8_t flags = usbBulkBufferAddress[numOfPointBytes + 4];
  402bfc:	4613      	mov	r3, r2
  402bfe:	7915      	ldrb	r5, [r2, #4]
			newNotRepeat = (flags & (1 << 1));
  402c00:	f3c5 0040 	ubfx	r0, r5, #1, #1
  402c04:	4a20      	ldr	r2, [pc, #128]	; (402c88 <usb_bulk_out_callback+0xbc>)
  402c06:	7010      	strb	r0, [r2, #0]
			outputSpeed = (usbBulkBufferAddress[numOfPointBytes + 1] << 8) + usbBulkBufferAddress[numOfPointBytes + 0];
  402c08:	785a      	ldrb	r2, [r3, #1]
  402c0a:	5d0b      	ldrb	r3, [r1, r4]
  402c0c:	eb03 2302 	add.w	r3, r3, r2, lsl #8
  402c10:	4a1e      	ldr	r2, [pc, #120]	; (402c8c <usb_bulk_out_callback+0xc0>)
  402c12:	6013      	str	r3, [r2, #0]
			
			cpu_irq_enter_critical();
  402c14:	4b1e      	ldr	r3, [pc, #120]	; (402c90 <usb_bulk_out_callback+0xc4>)
  402c16:	4798      	blx	r3
				if ( (!playing) || (flags & (1 << 0)) ) //if frame is to start playing immediately
  402c18:	4b1e      	ldr	r3, [pc, #120]	; (402c94 <usb_bulk_out_callback+0xc8>)
  402c1a:	781b      	ldrb	r3, [r3, #0]
  402c1c:	b113      	cbz	r3, 402c24 <usb_bulk_out_callback+0x58>
  402c1e:	f015 0f01 	tst.w	r5, #1
  402c22:	d018      	beq.n	402c56 <usb_bulk_out_callback+0x8a>
				{
					uint8_t* previousFrameAddress = frameAddress;
  402c24:	4a1c      	ldr	r2, [pc, #112]	; (402c98 <usb_bulk_out_callback+0xcc>)
  402c26:	6811      	ldr	r1, [r2, #0]
					frameAddress = usbBulkBufferAddress;
  402c28:	4b16      	ldr	r3, [pc, #88]	; (402c84 <usb_bulk_out_callback+0xb8>)
  402c2a:	6818      	ldr	r0, [r3, #0]
  402c2c:	6010      	str	r0, [r2, #0]
					usbBulkBufferAddress = previousFrameAddress;
  402c2e:	6019      	str	r1, [r3, #0]
					framePos = 0;
  402c30:	2300      	movs	r3, #0
  402c32:	4a1a      	ldr	r2, [pc, #104]	; (402c9c <usb_bulk_out_callback+0xd0>)
  402c34:	8013      	strh	r3, [r2, #0]
					frameSize = numOfPointBytes;
  402c36:	4a1a      	ldr	r2, [pc, #104]	; (402ca0 <usb_bulk_out_callback+0xd4>)
  402c38:	8014      	strh	r4, [r2, #0]
					newFrameReady = false;
  402c3a:	4a11      	ldr	r2, [pc, #68]	; (402c80 <usb_bulk_out_callback+0xb4>)
  402c3c:	7013      	strb	r3, [r2, #0]
					playing = true;
  402c3e:	2201      	movs	r2, #1
  402c40:	4b14      	ldr	r3, [pc, #80]	; (402c94 <usb_bulk_out_callback+0xc8>)
  402c42:	701a      	strb	r2, [r3, #0]
					notRepeat = newNotRepeat;
  402c44:	4b10      	ldr	r3, [pc, #64]	; (402c88 <usb_bulk_out_callback+0xbc>)
  402c46:	781a      	ldrb	r2, [r3, #0]
  402c48:	4b16      	ldr	r3, [pc, #88]	; (402ca4 <usb_bulk_out_callback+0xd8>)
  402c4a:	701a      	strb	r2, [r3, #0]
					speed_set(outputSpeed);
  402c4c:	4b0f      	ldr	r3, [pc, #60]	; (402c8c <usb_bulk_out_callback+0xc0>)
  402c4e:	6818      	ldr	r0, [r3, #0]
  402c50:	4b15      	ldr	r3, [pc, #84]	; (402ca8 <usb_bulk_out_callback+0xdc>)
  402c52:	4798      	blx	r3
			newNotRepeat = (flags & (1 << 1));
			outputSpeed = (usbBulkBufferAddress[numOfPointBytes + 1] << 8) + usbBulkBufferAddress[numOfPointBytes + 0];
			
			cpu_irq_enter_critical();
				if ( (!playing) || (flags & (1 << 0)) ) //if frame is to start playing immediately
				{
  402c54:	e00a      	b.n	402c6c <usb_bulk_out_callback+0xa0>
					notRepeat = newNotRepeat;
					speed_set(outputSpeed);
				} 
				else
				{
					uint8_t* previousNewFrameAddress = newFrameAddress;
  402c56:	4a15      	ldr	r2, [pc, #84]	; (402cac <usb_bulk_out_callback+0xe0>)
  402c58:	6811      	ldr	r1, [r2, #0]
					newFrameAddress = usbBulkBufferAddress;
  402c5a:	4b0a      	ldr	r3, [pc, #40]	; (402c84 <usb_bulk_out_callback+0xb8>)
  402c5c:	6818      	ldr	r0, [r3, #0]
  402c5e:	6010      	str	r0, [r2, #0]
					usbBulkBufferAddress = previousNewFrameAddress;	
  402c60:	6019      	str	r1, [r3, #0]
					newFrameSize = numOfPointBytes;
  402c62:	4b13      	ldr	r3, [pc, #76]	; (402cb0 <usb_bulk_out_callback+0xe4>)
  402c64:	801c      	strh	r4, [r3, #0]
					newFrameReady = true;
  402c66:	2201      	movs	r2, #1
  402c68:	4b05      	ldr	r3, [pc, #20]	; (402c80 <usb_bulk_out_callback+0xb4>)
  402c6a:	701a      	strb	r2, [r3, #0]
				}
			cpu_irq_leave_critical();
  402c6c:	4b11      	ldr	r3, [pc, #68]	; (402cb4 <usb_bulk_out_callback+0xe8>)
  402c6e:	4798      	blx	r3
		}
	}
	
	udi_vendor_bulk_out_run((uint8_t*)usbBulkBufferAddress, MAXFRAMESIZE * 8 + 5, usb_bulk_out_callback);
  402c70:	4b04      	ldr	r3, [pc, #16]	; (402c84 <usb_bulk_out_callback+0xb8>)
  402c72:	6818      	ldr	r0, [r3, #0]
  402c74:	f643 618d 	movw	r1, #16013	; 0x3e8d
  402c78:	4a0f      	ldr	r2, [pc, #60]	; (402cb8 <usb_bulk_out_callback+0xec>)
  402c7a:	4b10      	ldr	r3, [pc, #64]	; (402cbc <usb_bulk_out_callback+0xf0>)
  402c7c:	4798      	blx	r3
  402c7e:	bd38      	pop	{r3, r4, r5, pc}
  402c80:	200005e5 	.word	0x200005e5
  402c84:	200000ac 	.word	0x200000ac
  402c88:	200000b4 	.word	0x200000b4
  402c8c:	200000a8 	.word	0x200000a8
  402c90:	00402791 	.word	0x00402791
  402c94:	200005e6 	.word	0x200005e6
  402c98:	200000b0 	.word	0x200000b0
  402c9c:	200005ec 	.word	0x200005ec
  402ca0:	200005ea 	.word	0x200005ea
  402ca4:	200000a0 	.word	0x200000a0
  402ca8:	00402b71 	.word	0x00402b71
  402cac:	200000a4 	.word	0x200000a4
  402cb0:	200005e8 	.word	0x200005e8
  402cb4:	004027cd 	.word	0x004027cd
  402cb8:	00402bcd 	.word	0x00402bcd
  402cbc:	00400171 	.word	0x00400171

00402cc0 <SysTick_Handler>:
	}
}

void SysTick_Handler(void) //systick timer ISR, called for each point
{
	if (playing)
  402cc0:	4b28      	ldr	r3, [pc, #160]	; (402d64 <SysTick_Handler+0xa4>)
  402cc2:	781b      	ldrb	r3, [r3, #0]
  402cc4:	2b00      	cmp	r3, #0
  402cc6:	d048      	beq.n	402d5a <SysTick_Handler+0x9a>
		__WFI();
	}
}

void SysTick_Handler(void) //systick timer ISR, called for each point
{
  402cc8:	b510      	push	{r4, lr}
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  402cca:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
  402cce:	4b26      	ldr	r3, [pc, #152]	; (402d68 <SysTick_Handler+0xa8>)
  402cd0:	631a      	str	r2, [r3, #48]	; 0x30
	if (playing)
	{
		statusled_set(HIGH);
		if (framePos >= frameSize)
  402cd2:	4b26      	ldr	r3, [pc, #152]	; (402d6c <SysTick_Handler+0xac>)
  402cd4:	881a      	ldrh	r2, [r3, #0]
  402cd6:	4b26      	ldr	r3, [pc, #152]	; (402d70 <SysTick_Handler+0xb0>)
  402cd8:	881b      	ldrh	r3, [r3, #0]
  402cda:	429a      	cmp	r2, r3
  402cdc:	d336      	bcc.n	402d4c <SysTick_Handler+0x8c>
		{
			//frame finished
			if (newFrameReady)
  402cde:	4b25      	ldr	r3, [pc, #148]	; (402d74 <SysTick_Handler+0xb4>)
  402ce0:	781b      	ldrb	r3, [r3, #0]
  402ce2:	b1e3      	cbz	r3, 402d1e <SysTick_Handler+0x5e>
			{
				//load new frame, switch buffers
				uint8_t* previousFrameAddress = frameAddress;
  402ce4:	4a24      	ldr	r2, [pc, #144]	; (402d78 <SysTick_Handler+0xb8>)
  402ce6:	6811      	ldr	r1, [r2, #0]
				frameAddress = newFrameAddress;
  402ce8:	4b24      	ldr	r3, [pc, #144]	; (402d7c <SysTick_Handler+0xbc>)
  402cea:	6818      	ldr	r0, [r3, #0]
  402cec:	6010      	str	r0, [r2, #0]
				newFrameAddress = previousFrameAddress;
  402cee:	6019      	str	r1, [r3, #0]
				newFrameReady = false;
  402cf0:	2300      	movs	r3, #0
  402cf2:	4a20      	ldr	r2, [pc, #128]	; (402d74 <SysTick_Handler+0xb4>)
  402cf4:	7013      	strb	r3, [r2, #0]
				framePos = 0;
  402cf6:	4c1d      	ldr	r4, [pc, #116]	; (402d6c <SysTick_Handler+0xac>)
  402cf8:	8023      	strh	r3, [r4, #0]
				frameSize = newFrameSize;
  402cfa:	4b21      	ldr	r3, [pc, #132]	; (402d80 <SysTick_Handler+0xc0>)
  402cfc:	881a      	ldrh	r2, [r3, #0]
  402cfe:	4b1c      	ldr	r3, [pc, #112]	; (402d70 <SysTick_Handler+0xb0>)
  402d00:	801a      	strh	r2, [r3, #0]
				notRepeat = newNotRepeat;
  402d02:	4b20      	ldr	r3, [pc, #128]	; (402d84 <SysTick_Handler+0xc4>)
  402d04:	781a      	ldrb	r2, [r3, #0]
  402d06:	4b20      	ldr	r3, [pc, #128]	; (402d88 <SysTick_Handler+0xc8>)
  402d08:	701a      	strb	r2, [r3, #0]
				point_output();
  402d0a:	4b20      	ldr	r3, [pc, #128]	; (402d8c <SysTick_Handler+0xcc>)
  402d0c:	4798      	blx	r3
				framePos += 8;
  402d0e:	8823      	ldrh	r3, [r4, #0]
  402d10:	3308      	adds	r3, #8
  402d12:	8023      	strh	r3, [r4, #0]
				speed_set(outputSpeed);
  402d14:	4b1e      	ldr	r3, [pc, #120]	; (402d90 <SysTick_Handler+0xd0>)
  402d16:	6818      	ldr	r0, [r3, #0]
  402d18:	4b1e      	ldr	r3, [pc, #120]	; (402d94 <SysTick_Handler+0xd4>)
  402d1a:	4798      	blx	r3
  402d1c:	bd10      	pop	{r4, pc}
			}
			else
			{
				if (!notRepeat)
  402d1e:	4b1a      	ldr	r3, [pc, #104]	; (402d88 <SysTick_Handler+0xc8>)
  402d20:	781b      	ldrb	r3, [r3, #0]
  402d22:	b93b      	cbnz	r3, 402d34 <SysTick_Handler+0x74>
				{
					//loop frame
					framePos = 0;
  402d24:	4c11      	ldr	r4, [pc, #68]	; (402d6c <SysTick_Handler+0xac>)
  402d26:	8023      	strh	r3, [r4, #0]
					point_output();
  402d28:	4b18      	ldr	r3, [pc, #96]	; (402d8c <SysTick_Handler+0xcc>)
  402d2a:	4798      	blx	r3
					framePos += 8;
  402d2c:	8823      	ldrh	r3, [r4, #0]
  402d2e:	3308      	adds	r3, #8
  402d30:	8023      	strh	r3, [r4, #0]
  402d32:	bd10      	pop	{r4, pc}
				}
				else
				{
					framePos = 0;
  402d34:	2300      	movs	r3, #0
  402d36:	4a0d      	ldr	r2, [pc, #52]	; (402d6c <SysTick_Handler+0xac>)
  402d38:	8013      	strh	r3, [r2, #0]
					playing = false;
  402d3a:	4a0a      	ldr	r2, [pc, #40]	; (402d64 <SysTick_Handler+0xa4>)
  402d3c:	7013      	strb	r3, [r2, #0]
					blank_and_center();
  402d3e:	4b16      	ldr	r3, [pc, #88]	; (402d98 <SysTick_Handler+0xd8>)
  402d40:	4798      	blx	r3
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  402d42:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
  402d46:	4b08      	ldr	r3, [pc, #32]	; (402d68 <SysTick_Handler+0xa8>)
  402d48:	635a      	str	r2, [r3, #52]	; 0x34
  402d4a:	bd10      	pop	{r4, pc}
			}
		}
		else
		{
			//output current point
			point_output();
  402d4c:	4b0f      	ldr	r3, [pc, #60]	; (402d8c <SysTick_Handler+0xcc>)
  402d4e:	4798      	blx	r3
			framePos += 8;
  402d50:	4a06      	ldr	r2, [pc, #24]	; (402d6c <SysTick_Handler+0xac>)
  402d52:	8813      	ldrh	r3, [r2, #0]
  402d54:	3308      	adds	r3, #8
  402d56:	8013      	strh	r3, [r2, #0]
  402d58:	bd10      	pop	{r4, pc}
  402d5a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
  402d5e:	4b02      	ldr	r3, [pc, #8]	; (402d68 <SysTick_Handler+0xa8>)
  402d60:	635a      	str	r2, [r3, #52]	; 0x34
  402d62:	4770      	bx	lr
  402d64:	200005e6 	.word	0x200005e6
  402d68:	400e0e00 	.word	0x400e0e00
  402d6c:	200005ec 	.word	0x200005ec
  402d70:	200005ea 	.word	0x200005ea
  402d74:	200005e5 	.word	0x200005e5
  402d78:	200000b0 	.word	0x200000b0
  402d7c:	200000a4 	.word	0x200000a4
  402d80:	200005e8 	.word	0x200005e8
  402d84:	200000b4 	.word	0x200000b4
  402d88:	200000a0 	.word	0x200000a0
  402d8c:	00402a39 	.word	0x00402a39
  402d90:	200000a8 	.word	0x200000a8
  402d94:	00402b71 	.word	0x00402b71
  402d98:	00402af1 	.word	0x00402af1

00402d9c <shutter_set>:
__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
  402d9c:	b120      	cbz	r0, 402da8 <shutter_set+0xc>
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  402d9e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  402da2:	4b04      	ldr	r3, [pc, #16]	; (402db4 <shutter_set+0x18>)
  402da4:	631a      	str	r2, [r3, #48]	; 0x30
  402da6:	4770      	bx	lr
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  402da8:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  402dac:	4b01      	ldr	r3, [pc, #4]	; (402db4 <shutter_set+0x18>)
  402dae:	635a      	str	r2, [r3, #52]	; 0x34
  402db0:	4770      	bx	lr
  402db2:	bf00      	nop
  402db4:	400e0e00 	.word	0x400e0e00

00402db8 <usb_interrupt_out_callback>:
	
	udi_vendor_bulk_out_run((uint8_t*)usbBulkBufferAddress, MAXFRAMESIZE * 8 + 5, usb_bulk_out_callback);
}

void usb_interrupt_out_callback(udd_ep_status_t status, iram_size_t length, udd_ep_id_t ep)
{
  402db8:	b508      	push	{r3, lr}
	//	Byte 0: Command
	//	Byte 1-2: Data (little endian)
	
	UNUSED(ep);
	if ( (status == UDD_EP_TRANSFER_OK) && (length == 3) )
  402dba:	b9d0      	cbnz	r0, 402df2 <usb_interrupt_out_callback+0x3a>
  402dbc:	2903      	cmp	r1, #3
  402dbe:	d118      	bne.n	402df2 <usb_interrupt_out_callback+0x3a>
	{
			
		if (usbInterruptBufferAddress[0] == 0x01)			//STOP
  402dc0:	4b0f      	ldr	r3, [pc, #60]	; (402e00 <usb_interrupt_out_callback+0x48>)
  402dc2:	681a      	ldr	r2, [r3, #0]
  402dc4:	7813      	ldrb	r3, [r2, #0]
  402dc6:	2b01      	cmp	r3, #1
  402dc8:	d10b      	bne.n	402de2 <usb_interrupt_out_callback+0x2a>
		{
			playing = false;
  402dca:	2300      	movs	r3, #0
  402dcc:	4a0d      	ldr	r2, [pc, #52]	; (402e04 <usb_interrupt_out_callback+0x4c>)
  402dce:	7013      	strb	r3, [r2, #0]
			framePos = 0;
  402dd0:	4a0d      	ldr	r2, [pc, #52]	; (402e08 <usb_interrupt_out_callback+0x50>)
  402dd2:	8013      	strh	r3, [r2, #0]
  402dd4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
  402dd8:	4b0c      	ldr	r3, [pc, #48]	; (402e0c <usb_interrupt_out_callback+0x54>)
  402dda:	635a      	str	r2, [r3, #52]	; 0x34
			statusled_set(LOW);
			blank_and_center();
  402ddc:	4b0c      	ldr	r3, [pc, #48]	; (402e10 <usb_interrupt_out_callback+0x58>)
  402dde:	4798      	blx	r3
  402de0:	e007      	b.n	402df2 <usb_interrupt_out_callback+0x3a>
		}
		else if (usbInterruptBufferAddress[0] == 0x02)	//SHUTTER
  402de2:	2b02      	cmp	r3, #2
  402de4:	d105      	bne.n	402df2 <usb_interrupt_out_callback+0x3a>
		{
			shutter_set(usbInterruptBufferAddress[1]);
  402de6:	7850      	ldrb	r0, [r2, #1]
  402de8:	3000      	adds	r0, #0
  402dea:	bf18      	it	ne
  402dec:	2001      	movne	r0, #1
  402dee:	4b09      	ldr	r3, [pc, #36]	; (402e14 <usb_interrupt_out_callback+0x5c>)
  402df0:	4798      	blx	r3
		{
			//TODO
		}
	}
	
	udi_vendor_interrupt_out_run((uint8_t*)usbInterruptBufferAddress, 3, usb_interrupt_out_callback);
  402df2:	4b03      	ldr	r3, [pc, #12]	; (402e00 <usb_interrupt_out_callback+0x48>)
  402df4:	6818      	ldr	r0, [r3, #0]
  402df6:	2103      	movs	r1, #3
  402df8:	4a07      	ldr	r2, [pc, #28]	; (402e18 <usb_interrupt_out_callback+0x60>)
  402dfa:	4b08      	ldr	r3, [pc, #32]	; (402e1c <usb_interrupt_out_callback+0x64>)
  402dfc:	4798      	blx	r3
  402dfe:	bd08      	pop	{r3, pc}
  402e00:	2000009c 	.word	0x2000009c
  402e04:	200005e6 	.word	0x200005e6
  402e08:	200005ec 	.word	0x200005ec
  402e0c:	400e0e00 	.word	0x400e0e00
  402e10:	00402af1 	.word	0x00402af1
  402e14:	00402d9d 	.word	0x00402d9d
  402e18:	00402db9 	.word	0x00402db9
  402e1c:	00400155 	.word	0x00400155

00402e20 <iopins_init>:
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
	} else {
		base->PIO_PUDR = mask;
  402e20:	4b11      	ldr	r3, [pc, #68]	; (402e68 <iopins_init+0x48>)
  402e22:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  402e26:	661a      	str	r2, [r3, #96]	; 0x60

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->PIO_PPDER = mask;
	} else {
		base->PIO_PPDDR = mask;
  402e28:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
  402e2c:	655a      	str	r2, [r3, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
  402e2e:	625a      	str	r2, [r3, #36]	; 0x24
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  402e30:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	} else {
		base->PIO_ABSR &= ~mask;
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABCDSR[0] |= mask;
  402e34:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  402e36:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
  402e3a:	671a      	str	r2, [r3, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->PIO_ABCDSR[1] |= mask;
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  402e3c:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  402e3e:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
  402e42:	675a      	str	r2, [r3, #116]	; 0x74
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
	} else {
		base->PIO_PUDR = mask;
  402e44:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
  402e48:	661a      	str	r2, [r3, #96]	; 0x60

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->PIO_PPDER = mask;
	} else {
		base->PIO_PPDDR = mask;
  402e4a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
  402e4e:	655a      	str	r2, [r3, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
  402e50:	625a      	str	r2, [r3, #36]	; 0x24
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  402e52:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	} else {
		base->PIO_ABSR &= ~mask;
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABCDSR[0] |= mask;
  402e56:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  402e58:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
  402e5c:	671a      	str	r2, [r3, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->PIO_ABCDSR[1] |= mask;
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  402e5e:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  402e60:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
  402e64:	675a      	str	r2, [r3, #116]	; 0x74
  402e66:	4770      	bx	lr
  402e68:	400e0e00 	.word	0x400e0e00

00402e6c <spi_init>:
	ioport_set_pin_mode(PIN_SHUTTER, IOPORT_DIR_OUTPUT);
	ioport_set_pin_mode(PIN_STATUSLED, IOPORT_DIR_OUTPUT);
}

void spi_init(void) //setup SPI for DAC084S085
{
  402e6c:	b538      	push	{r3, r4, r5, lr}
	gpio_configure_pin(SPI_MISO_GPIO, SPI_MISO_FLAGS);
  402e6e:	200c      	movs	r0, #12
  402e70:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  402e74:	4c25      	ldr	r4, [pc, #148]	; (402f0c <spi_init+0xa0>)
  402e76:	47a0      	blx	r4
	gpio_configure_pin(SPI_MOSI_GPIO, SPI_MOSI_FLAGS);
  402e78:	200d      	movs	r0, #13
  402e7a:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  402e7e:	47a0      	blx	r4
	gpio_configure_pin(SPI_SPCK_GPIO, SPI_SPCK_FLAGS);
  402e80:	200e      	movs	r0, #14
  402e82:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  402e86:	47a0      	blx	r4
	gpio_configure_pin(SPI_NPCS0_GPIO, SPI_NPCS0_FLAGS);
  402e88:	200b      	movs	r0, #11
  402e8a:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  402e8e:	47a0      	blx	r4
	spi_enable_clock(SPI);
  402e90:	4c1f      	ldr	r4, [pc, #124]	; (402f10 <spi_init+0xa4>)
  402e92:	4620      	mov	r0, r4
  402e94:	4b1f      	ldr	r3, [pc, #124]	; (402f14 <spi_init+0xa8>)
  402e96:	4798      	blx	r3
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable(Spi *p_spi)
{
	p_spi->SPI_CR = SPI_CR_SPIDIS;
  402e98:	2302      	movs	r3, #2
  402e9a:	6023      	str	r3, [r4, #0]
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_reset(Spi *p_spi)
{
	p_spi->SPI_CR = SPI_CR_SWRST;
  402e9c:	2580      	movs	r5, #128	; 0x80
  402e9e:	6025      	str	r5, [r4, #0]
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_set_master_mode(Spi *p_spi)
{
	p_spi->SPI_MR |= SPI_MR_MSTR;
  402ea0:	6863      	ldr	r3, [r4, #4]
  402ea2:	f043 0301 	orr.w	r3, r3, #1
  402ea6:	6063      	str	r3, [r4, #4]
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_set_fixed_peripheral_select(Spi *p_spi)
{
	p_spi->SPI_MR &= (~SPI_MR_PS);
  402ea8:	6863      	ldr	r3, [r4, #4]
  402eaa:	f023 0302 	bic.w	r3, r3, #2
  402eae:	6063      	str	r3, [r4, #4]
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable_mode_fault_detect(Spi *p_spi)
{
	p_spi->SPI_MR |= SPI_MR_MODFDIS;
  402eb0:	6863      	ldr	r3, [r4, #4]
  402eb2:	f043 0310 	orr.w	r3, r3, #16
  402eb6:	6063      	str	r3, [r4, #4]
	spi_disable(SPI);
	spi_reset(SPI);
	spi_set_master_mode(SPI);
	spi_set_fixed_peripheral_select(SPI);
	spi_disable_mode_fault_detect(SPI);
	spi_configure_cs_behavior(SPI, 0, SPI_CS_RISE_FORCED);
  402eb8:	4620      	mov	r0, r4
  402eba:	2100      	movs	r1, #0
  402ebc:	2204      	movs	r2, #4
  402ebe:	4b16      	ldr	r3, [pc, #88]	; (402f18 <spi_init+0xac>)
  402ec0:	4798      	blx	r3
	spi_set_delay_between_chip_select(SPI, 6);
  402ec2:	4620      	mov	r0, r4
  402ec4:	2106      	movs	r1, #6
  402ec6:	4b15      	ldr	r3, [pc, #84]	; (402f1c <spi_init+0xb0>)
  402ec8:	4798      	blx	r3
	spi_set_peripheral_chip_select_value(SPI, spi_get_pcs(0));
  402eca:	4620      	mov	r0, r4
  402ecc:	210e      	movs	r1, #14
  402ece:	4b14      	ldr	r3, [pc, #80]	; (402f20 <spi_init+0xb4>)
  402ed0:	4798      	blx	r3
	spi_set_clock_polarity(SPI, 0, 0);
  402ed2:	4620      	mov	r0, r4
  402ed4:	2100      	movs	r1, #0
  402ed6:	460a      	mov	r2, r1
  402ed8:	4b12      	ldr	r3, [pc, #72]	; (402f24 <spi_init+0xb8>)
  402eda:	4798      	blx	r3
	spi_set_clock_phase(SPI, 0, 0);
  402edc:	4620      	mov	r0, r4
  402ede:	2100      	movs	r1, #0
  402ee0:	460a      	mov	r2, r1
  402ee2:	4b11      	ldr	r3, [pc, #68]	; (402f28 <spi_init+0xbc>)
  402ee4:	4798      	blx	r3
	spi_set_bits_per_transfer(SPI, 0, SPI_CSR_BITS_16_BIT);
  402ee6:	4620      	mov	r0, r4
  402ee8:	2100      	movs	r1, #0
  402eea:	462a      	mov	r2, r5
  402eec:	4b0f      	ldr	r3, [pc, #60]	; (402f2c <spi_init+0xc0>)
  402eee:	4798      	blx	r3
	spi_set_baudrate_div(SPI, 0, (sysclk_get_cpu_hz() / 20000000) + 1 ); //max for dac: 30000000
  402ef0:	4620      	mov	r0, r4
  402ef2:	2100      	movs	r1, #0
  402ef4:	2205      	movs	r2, #5
  402ef6:	4b0e      	ldr	r3, [pc, #56]	; (402f30 <spi_init+0xc4>)
  402ef8:	4798      	blx	r3
	spi_set_transfer_delay(SPI, 0, 0, 0);
  402efa:	4620      	mov	r0, r4
  402efc:	2100      	movs	r1, #0
  402efe:	460a      	mov	r2, r1
  402f00:	460b      	mov	r3, r1
  402f02:	4d0c      	ldr	r5, [pc, #48]	; (402f34 <spi_init+0xc8>)
  402f04:	47a8      	blx	r5
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_enable(Spi *p_spi)
{
	p_spi->SPI_CR = SPI_CR_SPIEN;
  402f06:	2301      	movs	r3, #1
  402f08:	6023      	str	r3, [r4, #0]
  402f0a:	bd38      	pop	{r3, r4, r5, pc}
  402f0c:	00402479 	.word	0x00402479
  402f10:	40008000 	.word	0x40008000
  402f14:	00400881 	.word	0x00400881
  402f18:	00400935 	.word	0x00400935
  402f1c:	004008a9 	.word	0x004008a9
  402f20:	00400891 	.word	0x00400891
  402f24:	004008f5 	.word	0x004008f5
  402f28:	00400915 	.word	0x00400915
  402f2c:	00400979 	.word	0x00400979
  402f30:	0040098d 	.word	0x0040098d
  402f34:	004009a5 	.word	0x004009a5

00402f38 <dac_init>:
	spi_enable(SPI);
}

void dac_init(void) //setup sam internal DAC controller
{
  402f38:	b538      	push	{r3, r4, r5, lr}
  402f3a:	201e      	movs	r0, #30
  402f3c:	4b08      	ldr	r3, [pc, #32]	; (402f60 <dac_init+0x28>)
  402f3e:	4798      	blx	r3
	sysclk_enable_peripheral_clock(ID_DACC);
	dacc_reset(DACC);
  402f40:	4c08      	ldr	r4, [pc, #32]	; (402f64 <dac_init+0x2c>)
  402f42:	4620      	mov	r0, r4
  402f44:	4b08      	ldr	r3, [pc, #32]	; (402f68 <dac_init+0x30>)
  402f46:	4798      	blx	r3
	dacc_enable_channel(DACC, 0);
  402f48:	4620      	mov	r0, r4
  402f4a:	2100      	movs	r1, #0
  402f4c:	4d07      	ldr	r5, [pc, #28]	; (402f6c <dac_init+0x34>)
  402f4e:	47a8      	blx	r5
	dacc_enable_channel(DACC, 1);
  402f50:	4620      	mov	r0, r4
  402f52:	2101      	movs	r1, #1
  402f54:	47a8      	blx	r5
	dacc_set_transfer_mode(DACC, 0);
  402f56:	4620      	mov	r0, r4
  402f58:	2100      	movs	r1, #0
  402f5a:	4b05      	ldr	r3, [pc, #20]	; (402f70 <dac_init+0x38>)
  402f5c:	4798      	blx	r3
  402f5e:	bd38      	pop	{r3, r4, r5, pc}
  402f60:	004026a5 	.word	0x004026a5
  402f64:	4003c000 	.word	0x4003c000
  402f68:	0040231d 	.word	0x0040231d
  402f6c:	0040236d 	.word	0x0040236d
  402f70:	00402325 	.word	0x00402325

00402f74 <main>:
#include "main.h"
#include <string.h>

//ENTRY
int main (void)
{
  402f74:	b508      	push	{r3, lr}
	sysclk_init();
  402f76:	4b18      	ldr	r3, [pc, #96]	; (402fd8 <main+0x64>)
  402f78:	4798      	blx	r3
	dac_init();
  402f7a:	4b18      	ldr	r3, [pc, #96]	; (402fdc <main+0x68>)
  402f7c:	4798      	blx	r3
	spi_init();
  402f7e:	4b18      	ldr	r3, [pc, #96]	; (402fe0 <main+0x6c>)
  402f80:	4798      	blx	r3
	iopins_init();
  402f82:	4b18      	ldr	r3, [pc, #96]	; (402fe4 <main+0x70>)
  402f84:	4798      	blx	r3
	irq_initialize_vectors();
	cpu_irq_enable();
  402f86:	2201      	movs	r2, #1
  402f88:	4b17      	ldr	r3, [pc, #92]	; (402fe8 <main+0x74>)
  402f8a:	701a      	strb	r2, [r3, #0]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  402f8c:	f3bf 8f5f 	dmb	sy
  402f90:	b662      	cpsie	i
	udc_start();
  402f92:	4b16      	ldr	r3, [pc, #88]	; (402fec <main+0x78>)
  402f94:	4798      	blx	r3
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  402f96:	2000      	movs	r0, #0
  402f98:	4b15      	ldr	r3, [pc, #84]	; (402ff0 <main+0x7c>)
  402f9a:	f883 0023 	strb.w	r0, [r3, #35]	; 0x23
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
  402f9e:	2210      	movs	r2, #16
  402fa0:	f5a3 6340 	sub.w	r3, r3, #3072	; 0xc00
  402fa4:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
	
	//set systick higher priority to avoid pauses in playback when processing USB transfers
	NVIC_SetPriority(SysTick_IRQn, 0); 
	NVIC_SetPriority(UDP_IRQn, 1);
	
	shutter_set(LOW);
  402fa8:	4b12      	ldr	r3, [pc, #72]	; (402ff4 <main+0x80>)
  402faa:	4798      	blx	r3
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  402fac:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
  402fb0:	4b11      	ldr	r3, [pc, #68]	; (402ff8 <main+0x84>)
  402fb2:	631a      	str	r2, [r3, #48]	; 0x30
	statusled_set(HIGH);
	blank_and_center();
  402fb4:	4b11      	ldr	r3, [pc, #68]	; (402ffc <main+0x88>)
  402fb6:	4798      	blx	r3
	
	udi_vendor_bulk_out_run((uint8_t*)usbBulkBufferAddress, MAXFRAMESIZE * 8 + 5, usb_bulk_out_callback);
  402fb8:	4b11      	ldr	r3, [pc, #68]	; (403000 <main+0x8c>)
  402fba:	6818      	ldr	r0, [r3, #0]
  402fbc:	f643 618d 	movw	r1, #16013	; 0x3e8d
  402fc0:	4a10      	ldr	r2, [pc, #64]	; (403004 <main+0x90>)
  402fc2:	4b11      	ldr	r3, [pc, #68]	; (403008 <main+0x94>)
  402fc4:	4798      	blx	r3
	udi_vendor_interrupt_out_run((uint8_t*)usbInterruptBufferAddress, 3, usb_interrupt_out_callback);
  402fc6:	4b11      	ldr	r3, [pc, #68]	; (40300c <main+0x98>)
  402fc8:	6818      	ldr	r0, [r3, #0]
  402fca:	2103      	movs	r1, #3
  402fcc:	4a10      	ldr	r2, [pc, #64]	; (403010 <main+0x9c>)
  402fce:	4b11      	ldr	r3, [pc, #68]	; (403014 <main+0xa0>)
  402fd0:	4798      	blx	r3
    Wait For Interrupt is a hint instruction that suspends execution
    until one of a number of events occurs.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __WFI(void)
{
  __ASM volatile ("wfi");
  402fd2:	bf30      	wfi
  402fd4:	e7fd      	b.n	402fd2 <main+0x5e>
  402fd6:	bf00      	nop
  402fd8:	004022b5 	.word	0x004022b5
  402fdc:	00402f39 	.word	0x00402f39
  402fe0:	00402e6d 	.word	0x00402e6d
  402fe4:	00402e21 	.word	0x00402e21
  402fe8:	20000097 	.word	0x20000097
  402fec:	00400321 	.word	0x00400321
  402ff0:	e000ed00 	.word	0xe000ed00
  402ff4:	00402d9d 	.word	0x00402d9d
  402ff8:	400e0e00 	.word	0x400e0e00
  402ffc:	00402af1 	.word	0x00402af1
  403000:	200000ac 	.word	0x200000ac
  403004:	00402bcd 	.word	0x00402bcd
  403008:	00400171 	.word	0x00400171
  40300c:	2000009c 	.word	0x2000009c
  403010:	00402db9 	.word	0x00402db9
  403014:	00400155 	.word	0x00400155

00403018 <__libc_init_array>:
  403018:	b570      	push	{r4, r5, r6, lr}
  40301a:	4e0f      	ldr	r6, [pc, #60]	; (403058 <__libc_init_array+0x40>)
  40301c:	4d0f      	ldr	r5, [pc, #60]	; (40305c <__libc_init_array+0x44>)
  40301e:	1b76      	subs	r6, r6, r5
  403020:	10b6      	asrs	r6, r6, #2
  403022:	bf18      	it	ne
  403024:	2400      	movne	r4, #0
  403026:	d005      	beq.n	403034 <__libc_init_array+0x1c>
  403028:	3401      	adds	r4, #1
  40302a:	f855 3b04 	ldr.w	r3, [r5], #4
  40302e:	4798      	blx	r3
  403030:	42a6      	cmp	r6, r4
  403032:	d1f9      	bne.n	403028 <__libc_init_array+0x10>
  403034:	4e0a      	ldr	r6, [pc, #40]	; (403060 <__libc_init_array+0x48>)
  403036:	4d0b      	ldr	r5, [pc, #44]	; (403064 <__libc_init_array+0x4c>)
  403038:	1b76      	subs	r6, r6, r5
  40303a:	f000 f895 	bl	403168 <_init>
  40303e:	10b6      	asrs	r6, r6, #2
  403040:	bf18      	it	ne
  403042:	2400      	movne	r4, #0
  403044:	d006      	beq.n	403054 <__libc_init_array+0x3c>
  403046:	3401      	adds	r4, #1
  403048:	f855 3b04 	ldr.w	r3, [r5], #4
  40304c:	4798      	blx	r3
  40304e:	42a6      	cmp	r6, r4
  403050:	d1f9      	bne.n	403046 <__libc_init_array+0x2e>
  403052:	bd70      	pop	{r4, r5, r6, pc}
  403054:	bd70      	pop	{r4, r5, r6, pc}
  403056:	bf00      	nop
  403058:	00403174 	.word	0x00403174
  40305c:	00403174 	.word	0x00403174
  403060:	0040317c 	.word	0x0040317c
  403064:	00403174 	.word	0x00403174

00403068 <register_fini>:
  403068:	4b02      	ldr	r3, [pc, #8]	; (403074 <register_fini+0xc>)
  40306a:	b113      	cbz	r3, 403072 <register_fini+0xa>
  40306c:	4802      	ldr	r0, [pc, #8]	; (403078 <register_fini+0x10>)
  40306e:	f000 b805 	b.w	40307c <atexit>
  403072:	4770      	bx	lr
  403074:	00000000 	.word	0x00000000
  403078:	00403089 	.word	0x00403089

0040307c <atexit>:
  40307c:	4601      	mov	r1, r0
  40307e:	2000      	movs	r0, #0
  403080:	4602      	mov	r2, r0
  403082:	4603      	mov	r3, r0
  403084:	f000 b816 	b.w	4030b4 <__register_exitproc>

00403088 <__libc_fini_array>:
  403088:	b538      	push	{r3, r4, r5, lr}
  40308a:	4b08      	ldr	r3, [pc, #32]	; (4030ac <__libc_fini_array+0x24>)
  40308c:	4d08      	ldr	r5, [pc, #32]	; (4030b0 <__libc_fini_array+0x28>)
  40308e:	1aed      	subs	r5, r5, r3
  403090:	10ac      	asrs	r4, r5, #2
  403092:	bf18      	it	ne
  403094:	18ed      	addne	r5, r5, r3
  403096:	d005      	beq.n	4030a4 <__libc_fini_array+0x1c>
  403098:	3c01      	subs	r4, #1
  40309a:	f855 3d04 	ldr.w	r3, [r5, #-4]!
  40309e:	4798      	blx	r3
  4030a0:	2c00      	cmp	r4, #0
  4030a2:	d1f9      	bne.n	403098 <__libc_fini_array+0x10>
  4030a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  4030a8:	f000 b868 	b.w	40317c <_fini>
  4030ac:	00403188 	.word	0x00403188
  4030b0:	0040318c 	.word	0x0040318c

004030b4 <__register_exitproc>:
  4030b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4030b8:	4c25      	ldr	r4, [pc, #148]	; (403150 <__register_exitproc+0x9c>)
  4030ba:	6825      	ldr	r5, [r4, #0]
  4030bc:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
  4030c0:	4606      	mov	r6, r0
  4030c2:	4688      	mov	r8, r1
  4030c4:	4692      	mov	sl, r2
  4030c6:	4699      	mov	r9, r3
  4030c8:	b3cc      	cbz	r4, 40313e <__register_exitproc+0x8a>
  4030ca:	6860      	ldr	r0, [r4, #4]
  4030cc:	281f      	cmp	r0, #31
  4030ce:	dc18      	bgt.n	403102 <__register_exitproc+0x4e>
  4030d0:	1c43      	adds	r3, r0, #1
  4030d2:	b17e      	cbz	r6, 4030f4 <__register_exitproc+0x40>
  4030d4:	eb04 0580 	add.w	r5, r4, r0, lsl #2
  4030d8:	2101      	movs	r1, #1
  4030da:	f8c5 a088 	str.w	sl, [r5, #136]	; 0x88
  4030de:	f8d4 7188 	ldr.w	r7, [r4, #392]	; 0x188
  4030e2:	fa01 f200 	lsl.w	r2, r1, r0
  4030e6:	4317      	orrs	r7, r2
  4030e8:	2e02      	cmp	r6, #2
  4030ea:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
  4030ee:	f8c5 9108 	str.w	r9, [r5, #264]	; 0x108
  4030f2:	d01e      	beq.n	403132 <__register_exitproc+0x7e>
  4030f4:	3002      	adds	r0, #2
  4030f6:	6063      	str	r3, [r4, #4]
  4030f8:	f844 8020 	str.w	r8, [r4, r0, lsl #2]
  4030fc:	2000      	movs	r0, #0
  4030fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  403102:	4b14      	ldr	r3, [pc, #80]	; (403154 <__register_exitproc+0xa0>)
  403104:	b303      	cbz	r3, 403148 <__register_exitproc+0x94>
  403106:	f44f 70c8 	mov.w	r0, #400	; 0x190
  40310a:	f3af 8000 	nop.w
  40310e:	4604      	mov	r4, r0
  403110:	b1d0      	cbz	r0, 403148 <__register_exitproc+0x94>
  403112:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
  403116:	2700      	movs	r7, #0
  403118:	e880 0088 	stmia.w	r0, {r3, r7}
  40311c:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  403120:	4638      	mov	r0, r7
  403122:	2301      	movs	r3, #1
  403124:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
  403128:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
  40312c:	2e00      	cmp	r6, #0
  40312e:	d0e1      	beq.n	4030f4 <__register_exitproc+0x40>
  403130:	e7d0      	b.n	4030d4 <__register_exitproc+0x20>
  403132:	f8d4 118c 	ldr.w	r1, [r4, #396]	; 0x18c
  403136:	430a      	orrs	r2, r1
  403138:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
  40313c:	e7da      	b.n	4030f4 <__register_exitproc+0x40>
  40313e:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
  403142:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  403146:	e7c0      	b.n	4030ca <__register_exitproc+0x16>
  403148:	f04f 30ff 	mov.w	r0, #4294967295
  40314c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  403150:	00403164 	.word	0x00403164
  403154:	00000000 	.word	0x00000000
  403158:	30303030 	.word	0x30303030
  40315c:	00000031 	.word	0x00000031
  403160:	00000043 	.word	0x00000043

00403164 <_global_impure_ptr>:
  403164:	200000b8                                ... 

00403168 <_init>:
  403168:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40316a:	bf00      	nop
  40316c:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40316e:	bc08      	pop	{r3}
  403170:	469e      	mov	lr, r3
  403172:	4770      	bx	lr

00403174 <__init_array_start>:
  403174:	00403069 	.word	0x00403069

00403178 <__frame_dummy_init_array_entry>:
  403178:	004000f1                                ..@.

0040317c <_fini>:
  40317c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40317e:	bf00      	nop
  403180:	bcf8      	pop	{r3, r4, r5, r6, r7}
  403182:	bc08      	pop	{r3}
  403184:	469e      	mov	lr, r3
  403186:	4770      	bx	lr

00403188 <__fini_array_start>:
  403188:	004000cd 	.word	0x004000cd
